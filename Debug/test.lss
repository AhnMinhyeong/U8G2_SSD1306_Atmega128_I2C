
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000088  00800100  000025d6  0000266a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000025d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000045d  00800188  00800188  000026f2  2**0
                  ALLOC
  3 .debug_aranges 000026c8  00000000  00000000  000026f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000f429  00000000  00000000  00004dba  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00041aec  00000000  00000000  000141e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00007ced  00000000  00000000  00055ccf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000166d4  00000000  00000000  0005d9bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00004290  00000000  00000000  00074090  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000119f1  00000000  00000000  00078320  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00029053  00000000  00000000  00089d11  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00002830  00000000  00000000  000b2d64  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	
	return 0;
}

uint8_t i2c_read_ack(void)
{
       0:	30 c5       	rjmp	.+2656   	; 0xa62 <__ctors_end>
  restriction: does not work for w = 0 or h = 0
  ToDo:
    pixel in the corners are drawn twice. This could be optimized.
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
       2:	00 00       	nop
/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
  u8g2->tile_curr_row = row;
  u8g2->cb->update(u8g2);
}
       4:	4c c5       	rjmp	.+2712   	; 0xa9e <__bad_interrupt>
      return;
  }
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_draw_ellipse(u8g2, x0, y0, rx, ry, option);
}
       6:	00 00       	nop
uint8_t *u8g2_m_16_8_2(uint8_t *page_cnt)
{
  static uint8_t buf[256];
  *page_cnt = 2;
  return buf;
}
       8:	4a c5       	rjmp	.+2708   	; 0xa9e <__bad_interrupt>
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_vcomh0, u8x8_cad_ssd13xx_i2c, byte_cb, gpio_and_delay_cb);
  buf = u8g2_m_16_8_f(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
       a:	00 00       	nop
}


/* calculate the overall length of the font, only used to create the picture for the google wiki */
size_t u8g2_GetFontSize(const uint8_t *font_arg)
{
       c:	48 c5       	rjmp	.+2704   	; 0xa9e <__bad_interrupt>

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
       e:	00 00       	nop
  asumption: 
    all clipping done
*/

void u8g2_ll_hvline_horizontal_right_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
      10:	46 c5       	rjmp	.+2700   	; 0xa9e <__bad_interrupt>
*/
void u8g2_SetDisplayRotation(u8g2_t *u8g2, const u8g2_cb_t *u8g2_cb)
{
  u8g2->cb = u8g2_cb;
  u8g2->cb->update(u8g2);
}
      12:	00 00       	nop
  {
    *dest++ = *src;
    *dest++ = *src++;
    i--;
  } while( i > 0 );
}
      14:	44 c5       	rjmp	.+2696   	; 0xa9e <__bad_interrupt>
#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}
      16:	00 00       	nop
{
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
}

uint8_t u8x8_cad_SendMultipleArg(u8x8_t *u8x8, uint8_t cnt, uint8_t arg)
{
      18:	42 c5       	rjmp	.+2692   	; 0xa9e <__bad_interrupt>
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
}

void u8x8_InitDisplay(u8x8_t *u8x8)
{
      1a:	00 00       	nop
  return 1;
    
}

uint8_t u8x8_d_sh1106_128x64_winstar(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
      1c:	40 c5       	rjmp	.+2688   	; 0xa9e <__bad_interrupt>
};


/* a special null device */
uint8_t u8x8_d_null_cb(u8x8_t *u8x8, uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
      1e:	00 00       	nop
      20:	3e c5       	rjmp	.+2684   	; 0xa9e <__bad_interrupt>
      22:	00 00       	nop
      24:	3c c5       	rjmp	.+2680   	; 0xa9e <__bad_interrupt>
      26:	00 00       	nop
      28:	3a c5       	rjmp	.+2676   	; 0xa9e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	38 c5       	rjmp	.+2672   	; 0xa9e <__bad_interrupt>
      2e:	00 00       	nop
      30:	36 c5       	rjmp	.+2668   	; 0xa9e <__bad_interrupt>
      32:	00 00       	nop
      34:	34 c5       	rjmp	.+2664   	; 0xa9e <__bad_interrupt>
      36:	00 00       	nop
      38:	32 c5       	rjmp	.+2660   	; 0xa9e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	30 c5       	rjmp	.+2656   	; 0xa9e <__bad_interrupt>
      3e:	00 00       	nop
      40:	2e c5       	rjmp	.+2652   	; 0xa9e <__bad_interrupt>
      42:	00 00       	nop
      44:	2c c5       	rjmp	.+2648   	; 0xa9e <__bad_interrupt>
      46:	00 00       	nop
      48:	2a c5       	rjmp	.+2644   	; 0xa9e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	28 c5       	rjmp	.+2640   	; 0xa9e <__bad_interrupt>
      4e:	00 00       	nop
      50:	26 c5       	rjmp	.+2636   	; 0xa9e <__bad_interrupt>
      52:	00 00       	nop
      54:	24 c5       	rjmp	.+2632   	; 0xa9e <__bad_interrupt>
      56:	00 00       	nop
      58:	22 c5       	rjmp	.+2628   	; 0xa9e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	20 c5       	rjmp	.+2624   	; 0xa9e <__bad_interrupt>
      5e:	00 00       	nop
      60:	1e c5       	rjmp	.+2620   	; 0xa9e <__bad_interrupt>
      62:	00 00       	nop
      64:	1c c5       	rjmp	.+2616   	; 0xa9e <__bad_interrupt>
      66:	00 00       	nop
      68:	1a c5       	rjmp	.+2612   	; 0xa9e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	18 c5       	rjmp	.+2608   	; 0xa9e <__bad_interrupt>
      6e:	00 00       	nop
      70:	16 c5       	rjmp	.+2604   	; 0xa9e <__bad_interrupt>
      72:	00 00       	nop
      74:	14 c5       	rjmp	.+2600   	; 0xa9e <__bad_interrupt>
      76:	00 00       	nop
      78:	12 c5       	rjmp	.+2596   	; 0xa9e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	10 c5       	rjmp	.+2592   	; 0xa9e <__bad_interrupt>
      7e:	00 00       	nop
      80:	0e c5       	rjmp	.+2588   	; 0xa9e <__bad_interrupt>
      82:	00 00       	nop
      84:	0c c5       	rjmp	.+2584   	; 0xa9e <__bad_interrupt>
      86:	00 00       	nop
      88:	0a c5       	rjmp	.+2580   	; 0xa9e <__bad_interrupt>
	...

0000008c <u8g2_font_ncenB08_tf>:
      8c:	bf 00 03 03 04 04 03 04 05 0c 0d ff fe 08 fe 08     ................
      9c:	fe 01 76 03 45 09 b9 20 05 00 cc 09 21 08 82 c4     ..v.E.. ....!...
      ac:	89 4b 8c 00 22 08 33 6d 8b 88 4a 00 23 12 87 44     .K..".3m..J.#..D
      bc:	bc 48 30 12 32 45 82 91 90 29 12 8c c4 00 24 10     .H0.2E...)....$.
      cc:	a5 3c ab 58 25 22 09 31 45 24 91 5a 08 00 25 19     .<.X%".1E$.Z..%.
      dc:	8a c4 1d 91 4c 22 89 49 12 25 29 22 49 44 12 8c     ....L".I.%)"ID..
      ec:	48 62 21 49 2c 26 01 26 11 88 c4 2c a9 24 28 89     Hb!I,&.&...,.$(.
      fc:	4a 23 32 91 12 65 22 01 27 06 31 6d 8a 01 28 0c     J#2..e".'.1m..(.
     10c:	a4 b4 ba 50 48 22 d2 26 0b 06 29 0c a4 b4 8a 60     ...PH".&..)....`
     11c:	4c 49 8b 28 0d 00 2a 0b 55 5c ab 94 94 49 a6 10     LI.(..*.U\...I..
     12c:	00 2b 0a 55 4c ab 60 a8 14 0c 01 2c 08 42 b4 09     .+.UL.`....,.B..
     13c:	8a 04 00 2d 06 13 5c 8a 01 2e 06 22 c4 09 02 2f     ...-..\....".../
     14c:	0c 84 c4 ba a4 58 28 16 8a c5 00 30 0b 85 44 9b     .....X(....0..D.
     15c:	89 84 2f 92 09 00 31 09 84 45 1b c9 48 2f 04 32     ../...1..E..H/.2
     16c:	0d 85 44 9b 89 84 22 13 89 62 87 01 33 0e 85 44     ..D..."..b..3..D
     17c:	9b 89 84 22 12 52 28 92 09 00 34 0c 85 44 ab 95     ...".R(...4..D..
     18c:	88 24 32 ba 89 06 35 0c 85 44 8b 83 24 c8 42 91     .$2...5..D..$.B.
     19c:	4c 00 36 0d 85 44 9b 89 84 46 91 b0 48 26 00 37     L.6..D...F..H&.7
     1ac:	0b 84 44 8b 43 2c 14 0b 69 01 38 0e 85 44 9b 89     ..D.C,..i.8..D..
     1bc:	84 22 99 48 58 24 13 00 39 0d 85 44 9b 89 84 45     .".HX$..9..D...E
     1cc:	42 a3 48 26 00 3a 07 52 c4 09 12 01 3b 08 72 b4     B.H&.:.R....;.r.
     1dc:	09 12 45 02 3c 08 56 cc 4b 91 b2 02 3d 07 35 54     ..E.<.V.K...=.5T
     1ec:	8b 6a 01 3e 09 56 cc 0b b1 92 22 00 3f 0d 85 44     .j.>.V....".?..D
     1fc:	9b 89 9a 48 14 07 c9 44 00 40 14 a9 3c bd a1 4c     ...H...D.@..<..L
     20c:	14 8d 84 28 fa 49 22 8a 43 e4 20 12 00 41 10 89     ...(.I".C. ..A..
     21c:	43 cc 38 60 3c 0d 09 43 b2 53 50 32 22 42 10 87     C.8`<..C.SP2"B..
     22c:	44 0c 93 8a 48 52 52 11 49 44 87 08 00 43 0e 87     D...HRR.ID...C..
     23c:	44 ac 49 1a 71 aa 18 09 86 28 00 44 12 88 c4 0c     D.I.q....(.D....
     24c:	9b 2c 24 93 c8 24 32 89 4c 22 8b 98 00 45 0f 86     .,$..$2.L"...E..
     25c:	c4 0b 8b 28 22 09 91 24 21 51 44 74 46 10 86 c4     ...("..$!QDtF...
     26c:	0b 8b 28 22 8a 48 42 24 49 48 46 02 47 0f 87 44     ..(".HB$IHF.G..D
     27c:	ac 49 1a 71 2a aa 49 62 a2 49 00 48 11 89 44 0d     .I.q*.Ib.I.H..D.
     28c:	0a 45 26 92 89 4e 32 91 4c 24 93 30 49 09 84 c4     .E&..N2.L$.0I...
     29c:	0a 8a 48 2f 04 4a 0c 86 c4 2b 9a 50 45 97 90 68     ..H/.J...+.PE..h
     2ac:	04 4b 11 89 c4 0c 92 5a 4c 14 94 44 8b 22 99 0a     .K.....ZL..D."..
     2bc:	69 00 4c 0b 86 c4 0b 9a 50 a7 88 e8 00 4d 19 8b     i.L.....P....M..
     2cc:	44 0e 1a 65 36 8a 48 22 a2 88 24 22 8a 48 22 a2     D..e6.H"..$".H".
     2dc:	90 52 48 65 22 21 4e 14 88 c4 0c d9 44 16 1a 85     .RHe"!N.....D...
     2ec:	28 a1 08 29 34 8a 49 66 11 00 4f 0d 87 44 ac 59     (..)4.If..O..D.Y
     2fc:	8a 8c 9b 24 16 1b 01 50 0f 87 44 0c 93 8a 48 22     ...$...P..D...H"
     30c:	92 94 a4 42 1a 00 51 14 98 3c ac 61 2c 24 93 c8     ...B..Q..<.a,$..
     31c:	24 32 09 45 24 11 52 a2 12 00 52 0d 88 c4 0c 9b     $2.E$.R...R.....
     32c:	48 a7 58 4d a4 85 32 53 0c 86 c4 9b 25 5a b1 46     H.XM..2S....%Z.F
     33c:	9a 4c 00 54 0c 86 c4 8b 8b 96 90 50 1b 05 00 55     .L.T.......P...U
     34c:	13 88 c4 0c ca 44 16 92 85 64 21 59 48 16 92 c5     .....D...d!YH...
     35c:	48 00 56 12 88 c4 0c ca 44 16 92 c5 24 41 49 50     H.V.....D...$AIP
     36c:	12 15 cb 00 57 19 8b 44 0e 8a 64 22 12 85 94 42     ....W..D..d"...B
     37c:	92 88 24 24 89 48 62 93 a1 4c 28 13 01 58 11 88     ..$$.Hb..L(..X..
     38c:	c4 0c ca 44 16 9a 04 c7 c3 c8 28 26 99 10 59 10     ...D......(&..Y.
     39c:	88 c4 0c ca 44 16 93 04 25 51 b1 2a 09 00 5a 0a     ....D...%Q.*..Z.
     3ac:	86 c4 8b 9b 6c b4 4d 76 5b 08 a3 34 8a 8a 7e 19     ....l.Mv[..4..~.
     3bc:	5c 0c 84 c4 8a 58 30 16 8c 05 63 01 5d 08 a3 34     \....X0...c.]..4
     3cc:	8a 89 7e 29 5e 0b 65 54 ab 60 6c 14 49 93 05 5f     ..~)^.eT.`l.I.._
     3dc:	06 16 34 0b 03 60 07 23 74 0a 91 00 61 08 54 c4     ..4..`.#t...a.T.
     3ec:	8a 99 84 62 62 0d 86 c4 0b a1 16 c9 84 44 9a 4c     ...bb........D.L
     3fc:	00 63 0b 55 44 9b 89 68 26 8a 4c 00 64 0b 86 c4     .c.UD..h&.L.d...
     40c:	bb a1 ca 89 65 a2 00 65 09 55 44 9b 89 e4 20 24     ....e..e.UD... $
     41c:	66 0d 85 c4 aa 89 24 22 22 c9 94 28 00 67 0c 86     f.....$""..(.g..
     42c:	34 cb d0 48 a2 69 66 bb 00 68 0b 86 c4 0b a1 16     4..H.if..h......
     43c:	c9 84 c4 24 69 0a 84 c4 1a 91 74 a4 85 00 6a 0a     ...$i.....t...j.
     44c:	a3 b4 1a b5 89 2e 14 00 6b 0c 86 44 0b a1 16 09     ........k..D....
     45c:	89 24 51 19 6c 08 84 c4 8a 91 be 10 6d 0e 5a c4     .$Q.l.......m.Z.
     46c:	0d 89 48 b2 42 12 91 44 24 05 6e 0a 56 c4 0b 89     ..H.B..D$.n.V...
     47c:	64 42 62 12 6f 0a 56 c4 1b 8a 88 49 42 01 70 0d     dBb.o.V....IB.p.
     48c:	76 b4 0b 89 64 42 22 5d 84 33 00 71 0f 77 b4 9b     v...dB"].3.q.w..
     49c:	8a 48 22 92 48 46 12 a9 90 00 72 09 54 c4 0a c9     .H".HF....r.T...
     4ac:	49 09 00 73 08 54 c4 9a 12 a9 02 74 09 73 44 9a     I..s.T.....t.sD.
     4bc:	88 a4 a2 24 75 09 56 c4 0b 11 97 89 02 76 0c 56     ...$u.V......v.V
     4cc:	c4 8b 89 4a 48 12 13 8a 00 77 0f 59 44 8d 89 2e     ...JH....w.YD...
     4dc:	21 89 24 26 11 4a 44 00 78 0b 56 c4 8b 89 4a 4c     !.$&.JD.x.V...JL
     4ec:	16 51 19 79 0e 76 b4 8b 89 4a 48 12 13 8a 66 42     .Q.y.v...JH...fB
     4fc:	00 7a 09 55 44 0b 8b 48 c9 00 7b 0b a4 b4 2a 89     .z.UD..H..{...*.
     50c:	48 45 26 d2 26 7c 07 81 46 8b 43 00 7d 0c a4 b4     HE&.&|..F.C.}...
     51c:	0a 99 48 4d 22 d2 22 02 7e 08 26 dc 9b 89 64 02     ..HM".".~.&...d.
     52c:	a0 05 00 cc 09 a1 08 82 b4 09 5a e4 00 a2 0e 75     ..........Z....u
     53c:	3c cb 88 25 22 89 4c 22 a3 18 00 a3 0f 87 44 2c     <..%".L"......D,
     54c:	92 28 24 b4 09 65 92 cb 04 00 a4 0f 57 4c 8c c8     .($..e......WL..
     55c:	24 a2 24 11 49 24 91 49 00 a5 10 88 c4 0c ca 44     $.$.I$.I.......D
     56c:	16 93 04 25 42 69 51 4a 02 a6 07 81 46 8b 09 01     ...%BiQJ....F...
     57c:	a7 0e a4 b4 1a d2 4c 12 a1 44 64 23 0a 00 a8 08     ......L..Dd#....
     58c:	23 74 8a 88 24 00 a9 13 88 c4 2c 5a 30 12 9a 48     #t..$.....,Z0..H
     59c:	42 11 49 50 34 49 8c 91 00 aa 08 63 54 0a 59 25     B.IP4I.....cT.Y%
     5ac:	36 ab 0b 56 c4 ab 14 09 45 24 11 25 ac 07 35 54     6..V....E$.%..5T
     5bc:	8b 62 02 ad 06 13 5c 8a 01 ae 14 88 c4 2c 5a 30     .b....\......,Z0
     5cc:	12 a1 48 42 11 c9 48 12 91 24 c6 48 00 af 06 14     ..HB..H..$.H....
     5dc:	f4 0a 02 b0 09 43 64 9a 14 49 0a 00 b1 09 55 4c     .....Cd..I....UL
     5ec:	ab 50 29 0e 28 b2 08 43 e4 99 49 ca 00 b3 08 43     .P).(..C..I....C
     5fc:	e4 89 49 6c 02 b4 07 23 74 1a 0a 00 b5 0a 76 b4     ..Il...#t.....v.
     60c:	0b 11 17 0b 51 08 b6 11 87 44 9c c3 24 42 09 4d     ....Q....D..$B.M
     61c:	82 91 60 24 18 89 15 b7 06 22 dc 09 02 b8 07 32     ..`$.....".....2
     62c:	35 8a d0 00 b9 08 43 e4 99 88 28 32 ba 0a 64 d4     5.....C...(2..d.
     63c:	1a 49 48 14 91 12 bb 0e 56 c4 8b 50 48 22 92 50     .IH.....V..PH".P
     64c:	24 a1 10 00 bc 13 88 c4 9c 58 48 96 14 9b 84 43     $........XH....C
     65c:	c1 88 2c 42 8a 45 00 bd 12 88 c4 9c 58 48 96 14     ..,B.E......XH..
     66c:	9b 84 43 b2 48 52 2c 69 00 be 13 88 c4 8c 51 2c     ..C.HR,i......Q,
     67c:	31 12 13 85 43 c1 88 2c 42 8a 45 00 bf 0d 85 34     1...C..,B.E....4
     68c:	2b 99 1c 14 52 93 48 26 00 c0 14 b9 43 2c 39 44     +...R.H&....C,9D
     69c:	8e 16 07 8c a7 21 61 48 76 0a 4a 46 04 c1 13 b9     .....!aHv.JF....
     6ac:	43 5c b1 1c 29 0e 18 4f 43 c2 90 ec 14 94 8c 08     C\..)..OC.......
     6bc:	c2 14 b9 43 bc a9 44 8e 12 07 8c a7 21 61 48 76     ...C..D.....!aHv
     6cc:	0a 4a 46 04 c3 15 b9 43 3c 49 30 22 47 8a 03 c6     .JF....C<I0"G...
     6dc:	d3 90 30 24 3b 05 25 23 02 c4 15 b9 43 bc 48 38     ..0$;.%#....C.H8
     6ec:	12 47 8a 03 c6 d3 90 30 24 3b 05 25 23 02 c5 15     .G.....0$;.%#...
     6fc:	b9 43 3c 71 28 2c 87 c4 01 e3 69 48 18 92 9d 82     .C<q(,....iH....
     70c:	92 11 01 c6 16 8a c4 ad 43 2c 22 8a 45 24 b1 10     ........C,".E$..
     71c:	ad 12 8a 89 22 31 11 c5 00 c7 10 a7 34 ac 49 1a     ...."1......4.I.
     72c:	71 aa 18 09 86 88 51 19 00 c8 12 b6 c4 1b a9 1c     q.....Q.........
     73c:	62 11 45 24 21 92 24 24 8a 88 0e c9 11 b6 c4 3b     b.E$!.$$.......;
     74c:	75 88 45 14 91 84 48 92 90 28 22 3a ca 12 b6 c4     u.E...H..(":....
     75c:	ab 91 44 6c 11 45 24 21 92 24 24 8a 88 0e cb 14     ..Dl.E$!.$$.....
     76c:	b6 c4 ab 48 2c 12 07 58 44 11 49 88 24 09 89 22     ...H,..XD.I.$.."
     77c:	a2 03 cc 0b b4 c4 0a 99 94 22 d2 0b 01 cd 0b b4     ........."......
     78c:	c4 2a 89 94 22 d2 0b 01 ce 0c b5 c4 9a 89 2a 49     .*..".........*I
     79c:	a6 27 0a 00 cf 0a b4 c4 9a 1c 29 22 bd 10 d0 11     .'........)"....
     7ac:	88 c4 0c 9b 2c 24 33 49 64 12 99 44 16 31 01 d1     ....,$3Id..D.1..
     7bc:	18 b8 c4 3c 49 2c 22 87 c9 26 b2 d0 28 44 09 45     ...<I,"..&..(D.E
     7cc:	48 a1 51 4c 32 8b 00 d2 10 b7 44 2c b1 1c 38 4b     H.QL2.....D,..8K
     7dc:	91 71 93 c4 62 23 00 d3 10 b7 44 3c a1 1c 3a 4b     .q..b#....D<..:K
     7ec:	91 71 93 c4 62 23 00 d4 11 b7 44 ac 99 44 0e 9b     .q..b#....D..D..
     7fc:	a5 c8 b8 49 62 b1 11 00 d5 12 b7 44 2c 49 28 22     ...Ib......D,I("
     80c:	07 ce 52 64 dc 24 b1 d8 08 00 d6 12 b7 44 ac 48     ..Rd.$.......D.H
     81c:	30 12 07 ce 52 64 dc 24 b1 d8 08 00 d7 0a 55 4c     0...Rd.$......UL
     82c:	0b 89 64 16 9b 28 d8 12 87 44 ac 49 5a 44 54 89     ..d..(...D.IZDT.
     83c:	50 22 25 49 2c 12 19 01 d9 16 b8 c4 2c 39 40 0e     P"%I,.......,9@.
     84c:	a4 4c 64 21 59 48 16 92 85 64 21 59 8c 04 da 16     .Ld!YH...d!Y....
     85c:	b8 c4 4c a9 1c 48 99 c8 42 b2 90 2c 24 0b c9 42     ..L..H..B..,$..B
     86c:	b2 18 09 00 db 16 b8 c4 bc a1 44 0e a2 4c 64 21     ..........D..Ld!
     87c:	59 48 16 92 85 64 21 59 8c 04 dc 17 b8 c4 bc 48     YH...d!Y.......H
     88c:	34 12 87 51 26 b2 90 2c 24 0b c9 42 b2 90 2c 46     4..Q&..,$..B..,F
     89c:	02 dd 12 b8 c4 4c a9 1c 48 99 c8 62 92 a0 24 2a     .....L..H..b..$*
     8ac:	56 25 01 de 0f 87 44 8c 69 49 45 24 11 49 4a 42     V%....D.iIE$.IJB
     8bc:	1a 00 df 10 87 44 2c 92 8a 48 a2 a4 22 92 88 2a     .....D,..H.."..*
     8cc:	12 00 e0 0a 84 c4 0a 99 74 26 a1 18 e1 0a 84 c4     ........t&......
     8dc:	2a 89 74 26 a1 18 e2 0e 95 c4 aa d8 44 75 28 9a     *.t&........Du(.
     8ec:	44 24 14 00 e3 0c 85 c4 1a cd 43 d1 24 22 a1 00     D$........C.$"..
     8fc:	e4 0a 84 c4 8a 48 d6 99 84 62 e5 0c 84 c4 1a 49     .....H...b.....I
     90c:	28 22 99 49 28 06 e6 0e 58 c4 8c c9 24 24 91 1c     (".I(...X...$$..
     91c:	24 b2 09 01 e7 0d 75 34 9b 89 68 26 8a cc 62 22     $.....u4..h&..b"
     92c:	00 e8 0c 85 44 1b a1 1c 30 91 1c 84 04 e9 0b 85     ....D...0.......
     93c:	44 2b 75 c8 44 72 10 12 ea 0c 95 44 ab d8 44 79     D+u.Dr.....D..Dy
     94c:	22 39 08 09 eb 0d 85 44 9b a4 48 1c 30 91 1c 84     "9.....D..H.0...
     95c:	04 ec 0a 84 c4 0a 99 74 a4 85 00 ed 0a 84 c4 2a     .......t.......*
     96c:	89 74 a4 85 00 ee 0b 95 c4 aa d8 44 75 a6 89 02     .t.........Du...
     97c:	ef 0a 84 c4 8a 48 d6 91 16 02 f0 0e 86 c4 0b 51     .....H.........Q
     98c:	68 94 46 11 31 49 28 00 f1 0d 86 c4 1b 49 8a 1c     h.F.1I(......I..
     99c:	a2 32 21 31 09 f2 0d 86 c4 1b a9 1c 44 11 31 49     .2!1........D.1I
     9ac:	28 00 f3 0c 86 c4 3b 75 10 45 c4 24 a1 00 f4 0f     (.....;u.E.$....
     9bc:	96 c4 ab e0 48 22 87 50 44 4c 12 0a 00 f5 0e 86     ....H".PDL......
     9cc:	c4 2b 49 8a 1c 42 11 31 49 28 00 f6 0e 86 c4 9b     .+I..B.1I(......
     9dc:	b4 48 1c 44 11 31 49 28 00 f7 0a 55 4c ab 38 a0     .H.D.1I(...UL.8.
     9ec:	0e 08 01 f8 0d 76 bc db 08 45 62 21 49 28 51 00     .....v...Eb!I(Q.
     9fc:	f9 0b 86 c4 1b a9 1c 22 e2 32 51 fa 0b 86 c4 3b     .......".2Q....;
     a0c:	75 88 88 cb 44 01 fb 0d 96 c4 ab e0 48 22 07 88     u...D.......H"..
     a1c:	b8 4c 14 fc 0c 86 c4 9b b4 48 1c 22 e2 32 51 fd     .L.......H.".2Q.
     a2c:	10 a6 b4 3b 75 c8 44 25 24 89 09 45 33 21 00 fe     ...;u.D%$..E3!..
     a3c:	0e a6 b4 0b a1 16 c9 84 44 ba 08 67 00 ff 11 a6     ........D..g....
     a4c:	b4 9b b4 48 1c 32 51 09 49 62 42 d1 4c 08 00 00     ...H.2Q.IbB.L...
     a5c:	00 04 ff ff 00 00                                   ......

00000a62 <__ctors_end>:
     a62:	11 24       	eor	r1, r1
     a64:	1f be       	out	0x3f, r1	; 63
     a66:	cf ef       	ldi	r28, 0xFF	; 255
     a68:	d0 e1       	ldi	r29, 0x10	; 16
     a6a:	de bf       	out	0x3e, r29	; 62
     a6c:	cd bf       	out	0x3d, r28	; 61

00000a6e <__do_copy_data>:
     a6e:	11 e0       	ldi	r17, 0x01	; 1
     a70:	a0 e0       	ldi	r26, 0x00	; 0
     a72:	b1 e0       	ldi	r27, 0x01	; 1
     a74:	e6 ed       	ldi	r30, 0xD6	; 214
     a76:	f5 e2       	ldi	r31, 0x25	; 37
     a78:	00 e0       	ldi	r16, 0x00	; 0
     a7a:	0b bf       	out	0x3b, r16	; 59
     a7c:	02 c0       	rjmp	.+4      	; 0xa82 <__do_copy_data+0x14>
     a7e:	07 90       	elpm	r0, Z+
     a80:	0d 92       	st	X+, r0
     a82:	a8 38       	cpi	r26, 0x88	; 136
     a84:	b1 07       	cpc	r27, r17
     a86:	d9 f7       	brne	.-10     	; 0xa7e <__do_copy_data+0x10>

00000a88 <__do_clear_bss>:
     a88:	15 e0       	ldi	r17, 0x05	; 5
     a8a:	a8 e8       	ldi	r26, 0x88	; 136
     a8c:	b1 e0       	ldi	r27, 0x01	; 1
     a8e:	01 c0       	rjmp	.+2      	; 0xa92 <.do_clear_bss_start>

00000a90 <.do_clear_bss_loop>:
     a90:	1d 92       	st	X+, r1

00000a92 <.do_clear_bss_start>:
     a92:	a5 3e       	cpi	r26, 0xE5	; 229
     a94:	b1 07       	cpc	r27, r17
     a96:	e1 f7       	brne	.-8      	; 0xa90 <.do_clear_bss_loop>
     a98:	22 d1       	rcall	.+580    	; 0xcde <main>
     a9a:	0c 94 e9 12 	jmp	0x25d2	; 0x25d2 <_exit>

00000a9e <__bad_interrupt>:
     a9e:	b0 ca       	rjmp	.-2720   	; 0x0 <__vectors>

00000aa0 <i2c_initialize>:
#define Prescaler 1
#define TWBR_val ((((F_CPU / F_SCL) / Prescaler) - 16 ) / 2)

void i2c_initialize(void)
{
	TWBR = (uint8_t)TWBR_val;
     aa0:	88 e4       	ldi	r24, 0x48	; 72
     aa2:	80 93 70 00 	sts	0x0070, r24
}
     aa6:	08 95       	ret

00000aa8 <i2c_Start>:

uint8_t i2c_Start(uint8_t address)
{
     aa8:	98 2f       	mov	r25, r24
	// reset TWI control register
	TWCR = 0;
     aaa:	e4 e7       	ldi	r30, 0x74	; 116
     aac:	f0 e0       	ldi	r31, 0x00	; 0
     aae:	10 82       	st	Z, r1
	// transmit START condition 
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     ab0:	84 ea       	ldi	r24, 0xA4	; 164
     ab2:	80 83       	st	Z, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     ab4:	80 81       	ld	r24, Z
     ab6:	88 23       	and	r24, r24
     ab8:	ec f7       	brge	.-6      	; 0xab4 <i2c_Start+0xc>
	
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
     aba:	80 91 71 00 	lds	r24, 0x0071
     abe:	88 7f       	andi	r24, 0xF8	; 248
     ac0:	88 30       	cpi	r24, 0x08	; 8
     ac2:	11 f0       	breq	.+4      	; 0xac8 <i2c_Start+0x20>
     ac4:	81 e0       	ldi	r24, 0x01	; 1
     ac6:	08 95       	ret
	
	// load slave address into data register
	TWDR = address;
     ac8:	90 93 73 00 	sts	0x0073, r25
	// start transmission of address
	TWCR = (1<<TWINT) | (1<<TWEN);
     acc:	84 e8       	ldi	r24, 0x84	; 132
     ace:	80 93 74 00 	sts	0x0074, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     ad2:	e4 e7       	ldi	r30, 0x74	; 116
     ad4:	f0 e0       	ldi	r31, 0x00	; 0
     ad6:	80 81       	ld	r24, Z
     ad8:	88 23       	and	r24, r24
     ada:	ec f7       	brge	.-6      	; 0xad6 <i2c_Start+0x2e>
	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
     adc:	80 91 71 00 	lds	r24, 0x0071
     ae0:	98 2f       	mov	r25, r24
     ae2:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     ae4:	98 31       	cpi	r25, 0x18	; 24
     ae6:	11 f4       	brne	.+4      	; 0xaec <i2c_Start+0x44>
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	08 95       	ret
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	90 34       	cpi	r25, 0x40	; 64
     af0:	09 f0       	breq	.+2      	; 0xaf4 <i2c_Start+0x4c>
     af2:	81 e0       	ldi	r24, 0x01	; 1
	
	return 0;
}
     af4:	08 95       	ret

00000af6 <i2c_write>:

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
     af6:	80 93 73 00 	sts	0x0073, r24
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     afa:	84 e8       	ldi	r24, 0x84	; 132
     afc:	80 93 74 00 	sts	0x0074, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     b00:	e4 e7       	ldi	r30, 0x74	; 116
     b02:	f0 e0       	ldi	r31, 0x00	; 0
     b04:	80 81       	ld	r24, Z
     b06:	88 23       	and	r24, r24
     b08:	ec f7       	brge	.-6      	; 0xb04 <i2c_write+0xe>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     b0a:	80 91 71 00 	lds	r24, 0x0071
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	88 7f       	andi	r24, 0xF8	; 248
     b12:	88 32       	cpi	r24, 0x28	; 40
     b14:	09 f0       	breq	.+2      	; 0xb18 <i2c_write+0x22>
     b16:	91 e0       	ldi	r25, 0x01	; 1
	
	return 0;
}
     b18:	89 2f       	mov	r24, r25
     b1a:	08 95       	ret

00000b1c <i2c_Stop>:
}

void i2c_Stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     b1c:	84 e9       	ldi	r24, 0x94	; 148
     b1e:	80 93 74 00 	sts	0x0074, r24
}
     b22:	08 95       	ret

00000b24 <gpio_and_delay_atmega128>:
	}
	return 1;
}

uint8_t gpio_and_delay_atmega128(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{ 
     b24:	af 92       	push	r10
     b26:	bf 92       	push	r11
     b28:	cf 92       	push	r12
     b2a:	df 92       	push	r13
     b2c:	ef 92       	push	r14
     b2e:	ff 92       	push	r15
     b30:	0f 93       	push	r16
     b32:	1f 93       	push	r17
	switch(msg)
     b34:	6a 32       	cpi	r22, 0x2A	; 42
     b36:	51 f0       	breq	.+20     	; 0xb4c <gpio_and_delay_atmega128+0x28>
     b38:	6b 32       	cpi	r22, 0x2B	; 43
     b3a:	21 f0       	breq	.+8      	; 0xb44 <gpio_and_delay_atmega128+0x20>
     b3c:	69 32       	cpi	r22, 0x29	; 41
     b3e:	09 f0       	breq	.+2      	; 0xb42 <gpio_and_delay_atmega128+0x1e>
     b40:	4a c0       	rjmp	.+148    	; 0xbd6 <gpio_and_delay_atmega128+0xb2>
     b42:	08 c0       	rjmp	.+16     	; 0xb54 <gpio_and_delay_atmega128+0x30>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     b44:	81 e0       	ldi	r24, 0x01	; 1
     b46:	8a 95       	dec	r24
     b48:	f1 f7       	brne	.-4      	; 0xb46 <gpio_and_delay_atmega128+0x22>
     b4a:	45 c0       	rjmp	.+138    	; 0xbd6 <gpio_and_delay_atmega128+0xb2>
		break;
		case U8X8_MSG_DELAY_10MICRO:		// delay arg_int * 10 micro seconds
		_delay_us(10);
		break;
		case U8X8_MSG_DELAY_MILLI:			// delay arg_int * 1 milli second
		_delay_ms(arg_int);
     b4c:	85 e3       	ldi	r24, 0x35	; 53
     b4e:	8a 95       	dec	r24
     b50:	f1 f7       	brne	.-4      	; 0xb4e <gpio_and_delay_atmega128+0x2a>
     b52:	41 c0       	rjmp	.+130    	; 0xbd6 <gpio_and_delay_atmega128+0xb2>
     b54:	64 2f       	mov	r22, r20
     b56:	70 e0       	ldi	r23, 0x00	; 0
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	0e 94 bd 11 	call	0x237a	; 0x237a <__floatunsisf>
     b60:	5b 01       	movw	r10, r22
     b62:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b64:	20 e0       	ldi	r18, 0x00	; 0
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	4a e7       	ldi	r20, 0x7A	; 122
     b6a:	55 e4       	ldi	r21, 0x45	; 69
     b6c:	0e 94 4b 12 	call	0x2496	; 0x2496 <__mulsf3>
     b70:	7b 01       	movw	r14, r22
     b72:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     b74:	20 e0       	ldi	r18, 0x00	; 0
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	40 e8       	ldi	r20, 0x80	; 128
     b7a:	5f e3       	ldi	r21, 0x3F	; 63
     b7c:	0e 94 8d 11 	call	0x231a	; 0x231a <__cmpsf2>
     b80:	88 23       	and	r24, r24
     b82:	1c f4       	brge	.+6      	; 0xb8a <gpio_and_delay_atmega128+0x66>
     b84:	61 e0       	ldi	r22, 0x01	; 1
     b86:	70 e0       	ldi	r23, 0x00	; 0
     b88:	23 c0       	rjmp	.+70     	; 0xbd0 <gpio_and_delay_atmega128+0xac>
		__ticks = 1;
	else if (__tmp > 65535)
     b8a:	c8 01       	movw	r24, r16
     b8c:	b7 01       	movw	r22, r14
     b8e:	20 e0       	ldi	r18, 0x00	; 0
     b90:	3f ef       	ldi	r19, 0xFF	; 255
     b92:	4f e7       	ldi	r20, 0x7F	; 127
     b94:	57 e4       	ldi	r21, 0x47	; 71
     b96:	0e 94 47 12 	call	0x248e	; 0x248e <__gesf2>
     b9a:	18 16       	cp	r1, r24
     b9c:	ac f4       	brge	.+42     	; 0xbc8 <gpio_and_delay_atmega128+0xa4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b9e:	c6 01       	movw	r24, r12
     ba0:	b5 01       	movw	r22, r10
     ba2:	20 e0       	ldi	r18, 0x00	; 0
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	40 e2       	ldi	r20, 0x20	; 32
     ba8:	51 e4       	ldi	r21, 0x41	; 65
     baa:	0e 94 4b 12 	call	0x2496	; 0x2496 <__mulsf3>
     bae:	0e 94 91 11 	call	0x2322	; 0x2322 <__fixunssfsi>
     bb2:	cb 01       	movw	r24, r22
		while(__ticks)
     bb4:	67 2b       	or	r22, r23
     bb6:	79 f0       	breq	.+30     	; 0xbd6 <gpio_and_delay_atmega128+0xb2>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     bb8:	20 e9       	ldi	r18, 0x90	; 144
     bba:	31 e0       	ldi	r19, 0x01	; 1
     bbc:	f9 01       	movw	r30, r18
     bbe:	31 97       	sbiw	r30, 0x01	; 1
     bc0:	f1 f7       	brne	.-4      	; 0xbbe <gpio_and_delay_atmega128+0x9a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bc2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bc4:	d9 f7       	brne	.-10     	; 0xbbc <gpio_and_delay_atmega128+0x98>
     bc6:	07 c0       	rjmp	.+14     	; 0xbd6 <gpio_and_delay_atmega128+0xb2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bc8:	c8 01       	movw	r24, r16
     bca:	b7 01       	movw	r22, r14
     bcc:	0e 94 91 11 	call	0x2322	; 0x2322 <__fixunssfsi>
     bd0:	cb 01       	movw	r24, r22
     bd2:	01 97       	sbiw	r24, 0x01	; 1
     bd4:	f1 f7       	brne	.-4      	; 0xbd2 <gpio_and_delay_atmega128+0xae>
		break;
	}
	return 1;
}
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	1f 91       	pop	r17
     bda:	0f 91       	pop	r16
     bdc:	ff 90       	pop	r15
     bde:	ef 90       	pop	r14
     be0:	df 90       	pop	r13
     be2:	cf 90       	pop	r12
     be4:	bf 90       	pop	r11
     be6:	af 90       	pop	r10
     be8:	08 95       	ret

00000bea <init_ssd1306>:

void init_ssd1306(void)
{
     bea:	ef 92       	push	r14
     bec:	ff 92       	push	r15
     bee:	0f 93       	push	r16
     bf0:	1f 93       	push	r17
     bf2:	df 93       	push	r29
     bf4:	cf 93       	push	r28
     bf6:	cd b7       	in	r28, 0x3d	; 61
     bf8:	de b7       	in	r29, 0x3e	; 62
     bfa:	69 97       	sbiw	r28, 0x19	; 25
     bfc:	0f b6       	in	r0, 0x3f	; 63
     bfe:	f8 94       	cli
     c00:	de bf       	out	0x3e, r29	; 62
     c02:	0f be       	out	0x3f, r0	; 63
     c04:	cd bf       	out	0x3d, r28	; 61
	char data[25];
	
	data[0]=0xae;
     c06:	8e ea       	ldi	r24, 0xAE	; 174
     c08:	89 83       	std	Y+1, r24	; 0x01
	data[1]=0x00;
     c0a:	1a 82       	std	Y+2, r1	; 0x02
	data[2]=0x10;
     c0c:	80 e1       	ldi	r24, 0x10	; 16
     c0e:	8b 83       	std	Y+3, r24	; 0x03
	data[3]=0x40;
     c10:	90 e4       	ldi	r25, 0x40	; 64
     c12:	9c 83       	std	Y+4, r25	; 0x04
	data[4]=0xb0;
     c14:	80 eb       	ldi	r24, 0xB0	; 176
     c16:	8d 83       	std	Y+5, r24	; 0x05
	data[5]=0x81;
     c18:	81 e8       	ldi	r24, 0x81	; 129
     c1a:	8e 83       	std	Y+6, r24	; 0x06
	data[6]=0xff;
     c1c:	8f ef       	ldi	r24, 0xFF	; 255
     c1e:	8f 83       	std	Y+7, r24	; 0x07
	data[7]=0xa1;
     c20:	81 ea       	ldi	r24, 0xA1	; 161
     c22:	88 87       	std	Y+8, r24	; 0x08
	data[8]=0xa6;
     c24:	86 ea       	ldi	r24, 0xA6	; 166
     c26:	89 87       	std	Y+9, r24	; 0x09
	data[9]=0xc9;
     c28:	89 ec       	ldi	r24, 0xC9	; 201
     c2a:	8a 87       	std	Y+10, r24	; 0x0a
	data[10]=0xa8;
     c2c:	88 ea       	ldi	r24, 0xA8	; 168
     c2e:	8b 87       	std	Y+11, r24	; 0x0b
	data[11]=0x3f;
     c30:	8f e3       	ldi	r24, 0x3F	; 63
     c32:	8c 87       	std	Y+12, r24	; 0x0c
	data[12]=0xd3;
     c34:	83 ed       	ldi	r24, 0xD3	; 211
     c36:	8d 87       	std	Y+13, r24	; 0x0d
	data[13]=0x00;
     c38:	1e 86       	std	Y+14, r1	; 0x0e
	data[14]=0xd5;
     c3a:	85 ed       	ldi	r24, 0xD5	; 213
     c3c:	8f 87       	std	Y+15, r24	; 0x0f
	data[15]=0x80;
     c3e:	80 e8       	ldi	r24, 0x80	; 128
     c40:	88 8b       	std	Y+16, r24	; 0x10
	data[16]=0xd9;
     c42:	89 ed       	ldi	r24, 0xD9	; 217
     c44:	89 8b       	std	Y+17, r24	; 0x11
	data[17]=0xf1;
     c46:	81 ef       	ldi	r24, 0xF1	; 241
     c48:	8a 8b       	std	Y+18, r24	; 0x12
	data[18]=0xda;
     c4a:	8a ed       	ldi	r24, 0xDA	; 218
     c4c:	8b 8b       	std	Y+19, r24	; 0x13
	data[19]=0x12;
     c4e:	82 e1       	ldi	r24, 0x12	; 18
     c50:	8c 8b       	std	Y+20, r24	; 0x14
	data[20]=0xdb;
     c52:	8b ed       	ldi	r24, 0xDB	; 219
     c54:	8d 8b       	std	Y+21, r24	; 0x15
	data[21]=0x40;
     c56:	9e 8b       	std	Y+22, r25	; 0x16
	data[22]=0x8d;
     c58:	8d e8       	ldi	r24, 0x8D	; 141
     c5a:	8f 8b       	std	Y+23, r24	; 0x17
	data[23]=0x14;
     c5c:	84 e1       	ldi	r24, 0x14	; 20
     c5e:	88 8f       	std	Y+24, r24	; 0x18
	data[24]=0xaf;
     c60:	8f ea       	ldi	r24, 0xAF	; 175
     c62:	89 8f       	std	Y+25, r24	; 0x19
	i2c_initialize();
     c64:	1d df       	rcall	.-454    	; 0xaa0 <i2c_initialize>
     c66:	28 ee       	ldi	r18, 0xE8	; 232
     c68:	33 e0       	ldi	r19, 0x03	; 3
     c6a:	40 e9       	ldi	r20, 0x90	; 144
     c6c:	51 e0       	ldi	r21, 0x01	; 1
     c6e:	ca 01       	movw	r24, r20
     c70:	01 97       	sbiw	r24, 0x01	; 1
     c72:	f1 f7       	brne	.-4      	; 0xc70 <init_ssd1306+0x86>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c74:	21 50       	subi	r18, 0x01	; 1
     c76:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c78:	d1 f7       	brne	.-12     	; 0xc6e <init_ssd1306+0x84>

	_delay_ms(100);
	PORTD&=~(1<<3);
     c7a:	e2 e3       	ldi	r30, 0x32	; 50
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	80 81       	ld	r24, Z
     c80:	87 7f       	andi	r24, 0xF7	; 247
     c82:	80 83       	st	Z, r24
     c84:	80 ea       	ldi	r24, 0xA0	; 160
     c86:	9f e0       	ldi	r25, 0x0F	; 15
     c88:	01 97       	sbiw	r24, 0x01	; 1
     c8a:	f1 f7       	brne	.-4      	; 0xc88 <init_ssd1306+0x9e>
	_delay_ms(1);
	PORTD|=(1<<3);
     c8c:	80 81       	ld	r24, Z
     c8e:	88 60       	ori	r24, 0x08	; 8
     c90:	80 83       	st	Z, r24
     c92:	8e 01       	movw	r16, r28
     c94:	0f 5f       	subi	r16, 0xFF	; 255
     c96:	1f 4f       	sbci	r17, 0xFF	; 255

	for(int i=0;i<25;i++)
     c98:	0f 2e       	mov	r0, r31
     c9a:	fa e1       	ldi	r31, 0x1A	; 26
     c9c:	ef 2e       	mov	r14, r31
     c9e:	ff 24       	eor	r15, r15
     ca0:	f0 2d       	mov	r31, r0
     ca2:	ec 0e       	add	r14, r28
     ca4:	fd 1e       	adc	r15, r29
	{
		i2c_Start(OLED_ADDR);
     ca6:	8a e7       	ldi	r24, 0x7A	; 122
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	fe de       	rcall	.-516    	; 0xaa8 <i2c_Start>
		i2c_write(0x00);
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	22 df       	rcall	.-444    	; 0xaf6 <i2c_write>
		i2c_write(data[i]);
     cb2:	f8 01       	movw	r30, r16
     cb4:	81 91       	ld	r24, Z+
     cb6:	8f 01       	movw	r16, r30
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	1d df       	rcall	.-454    	; 0xaf6 <i2c_write>
		i2c_Stop();
     cbc:	2f df       	rcall	.-418    	; 0xb1c <i2c_Stop>
	_delay_ms(100);
	PORTD&=~(1<<3);
	_delay_ms(1);
	PORTD|=(1<<3);

	for(int i=0;i<25;i++)
     cbe:	0e 15       	cp	r16, r14
     cc0:	1f 05       	cpc	r17, r15
     cc2:	89 f7       	brne	.-30     	; 0xca6 <init_ssd1306+0xbc>
		i2c_Start(OLED_ADDR);
		i2c_write(0x00);
		i2c_write(data[i]);
		i2c_Stop();
	}
}
     cc4:	69 96       	adiw	r28, 0x19	; 25
     cc6:	0f b6       	in	r0, 0x3f	; 63
     cc8:	f8 94       	cli
     cca:	de bf       	out	0x3e, r29	; 62
     ccc:	0f be       	out	0x3f, r0	; 63
     cce:	cd bf       	out	0x3d, r28	; 61
     cd0:	cf 91       	pop	r28
     cd2:	df 91       	pop	r29
     cd4:	1f 91       	pop	r17
     cd6:	0f 91       	pop	r16
     cd8:	ff 90       	pop	r15
     cda:	ef 90       	pop	r14
     cdc:	08 95       	ret

00000cde <main>:
int main(void)
{
     cde:	2f 92       	push	r2
     ce0:	3f 92       	push	r3
     ce2:	4f 92       	push	r4
     ce4:	5f 92       	push	r5
     ce6:	6f 92       	push	r6
     ce8:	7f 92       	push	r7
     cea:	8f 92       	push	r8
     cec:	9f 92       	push	r9
     cee:	af 92       	push	r10
     cf0:	bf 92       	push	r11
     cf2:	cf 92       	push	r12
     cf4:	df 92       	push	r13
     cf6:	ef 92       	push	r14
     cf8:	0f 93       	push	r16
     cfa:	1f 93       	push	r17
     cfc:	cf 93       	push	r28
     cfe:	df 93       	push	r29
	DDRC=0x10;
     d00:	80 e1       	ldi	r24, 0x10	; 16
     d02:	84 bb       	out	0x14, r24	; 20
	PORTC=0x0f;
     d04:	8f e0       	ldi	r24, 0x0F	; 15
     d06:	85 bb       	out	0x15, r24	; 21
	DDRD=0x08;
     d08:	88 e0       	ldi	r24, 0x08	; 8
     d0a:	81 bb       	out	0x11, r24	; 17
	
	init_ssd1306();
     d0c:	6e df       	rcall	.-292    	; 0xbea <init_ssd1306>
	u8g2_Setup_ssd1306_i2c_128x64_noname_f(&u8g2, U8G2_R0, u8x8_byte_hw_i2c, gpio_and_delay_atmega128);
     d0e:	08 e8       	ldi	r16, 0x88	; 136
     d10:	15 e0       	ldi	r17, 0x05	; 5
     d12:	c8 01       	movw	r24, r16
     d14:	6e e1       	ldi	r22, 0x1E	; 30
     d16:	71 e0       	ldi	r23, 0x01	; 1
     d18:	40 e0       	ldi	r20, 0x00	; 0
     d1a:	57 e0       	ldi	r21, 0x07	; 7
     d1c:	22 e9       	ldi	r18, 0x92	; 146
     d1e:	35 e0       	ldi	r19, 0x05	; 5
     d20:	31 d2       	rcall	.+1122   	; 0x1184 <u8g2_Setup_ssd1306_i2c_128x64_noname_f>
	u8g2_SetFont(&u8g2,u8g2_font_ncenB08_tf);
     d22:	c8 01       	movw	r24, r16
     d24:	6c e8       	ldi	r22, 0x8C	; 140
     d26:	70 e0       	ldi	r23, 0x00	; 0
     d28:	69 d4       	rcall	.+2258   	; 0x15fc <u8g2_SetFont>
	u8g2_ClearBuffer(&u8g2);
     d2a:	c8 01       	movw	r24, r16
     d2c:	6c d1       	rcall	.+728    	; 0x1006 <u8g2_ClearBuffer>
	u8g2_DrawStr(&u8g2,0,30,"Ready To Go!!");
     d2e:	c8 01       	movw	r24, r16
     d30:	60 e0       	ldi	r22, 0x00	; 0
     d32:	4e e1       	ldi	r20, 0x1E	; 30
     d34:	20 e0       	ldi	r18, 0x00	; 0
     d36:	31 e0       	ldi	r19, 0x01	; 1
     d38:	0b d6       	rcall	.+3094   	; 0x1950 <u8g2_DrawStr>
	u8g2_SendBuffer(&u8g2);
     d3a:	c8 01       	movw	r24, r16
     d3c:	5a d1       	rcall	.+692    	; 0xff2 <u8g2_SendBuffer>
    while (1)
    {
	    switch(PINC&0x0f)
     d3e:	0f 2e       	mov	r0, r31
     d40:	f3 e3       	ldi	r31, 0x33	; 51
     d42:	8f 2e       	mov	r8, r31
     d44:	99 24       	eor	r9, r9
     d46:	f0 2d       	mov	r31, r0
	    {
		    case 0x0e:
		    PORTC|=(1<<4);
     d48:	0f 2e       	mov	r0, r31
     d4a:	f5 e3       	ldi	r31, 0x35	; 53
     d4c:	af 2e       	mov	r10, r31
     d4e:	bb 24       	eor	r11, r11
     d50:	f0 2d       	mov	r31, r0

			u8g2_ClearBuffer(&u8g2);
     d52:	68 01       	movw	r12, r16
			u8g2_DrawStr(&u8g2,0,8,"Hi");
     d54:	0f 2e       	mov	r0, r31
     d56:	fe e0       	ldi	r31, 0x0E	; 14
     d58:	4f 2e       	mov	r4, r31
     d5a:	f1 e0       	ldi	r31, 0x01	; 1
     d5c:	5f 2e       	mov	r5, r31
     d5e:	f0 2d       	mov	r31, r0
			u8g2_SendBuffer(&u8g2);
     d60:	0f 2e       	mov	r0, r31
     d62:	f8 ee       	ldi	r31, 0xE8	; 232
     d64:	6f 2e       	mov	r6, r31
     d66:	f3 e0       	ldi	r31, 0x03	; 3
     d68:	7f 2e       	mov	r7, r31
     d6a:	f0 2d       	mov	r31, r0
     d6c:	c0 e9       	ldi	r28, 0x90	; 144
     d6e:	d1 e0       	ldi	r29, 0x01	; 1
		    break;
			
			case 0x0d:
			PORTC|=(1<<4);
			u8g2_ClearBuffer(&u8g2);
			u8g2_DrawStr(&u8g2,0,16,"This is Ahn!");
     d70:	0f 2e       	mov	r0, r31
     d72:	f1 e1       	ldi	r31, 0x11	; 17
     d74:	2f 2e       	mov	r2, r31
     d76:	f1 e0       	ldi	r31, 0x01	; 1
     d78:	3f 2e       	mov	r3, r31
     d7a:	f0 2d       	mov	r31, r0
	u8g2_ClearBuffer(&u8g2);
	u8g2_DrawStr(&u8g2,0,30,"Ready To Go!!");
	u8g2_SendBuffer(&u8g2);
    while (1)
    {
	    switch(PINC&0x0f)
     d7c:	f4 01       	movw	r30, r8
     d7e:	80 81       	ld	r24, Z
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	8f 70       	andi	r24, 0x0F	; 15
     d84:	90 70       	andi	r25, 0x00	; 0
     d86:	8d 30       	cpi	r24, 0x0D	; 13
     d88:	91 05       	cpc	r25, r1
     d8a:	c1 f0       	breq	.+48     	; 0xdbc <main+0xde>
     d8c:	0e 97       	sbiw	r24, 0x0e	; 14
     d8e:	09 f0       	breq	.+2      	; 0xd92 <main+0xb4>
     d90:	32 c0       	rjmp	.+100    	; 0xdf6 <main+0x118>
	    {
		    case 0x0e:
		    PORTC|=(1<<4);
     d92:	f5 01       	movw	r30, r10
     d94:	80 81       	ld	r24, Z
     d96:	80 61       	ori	r24, 0x10	; 16
     d98:	80 83       	st	Z, r24

			u8g2_ClearBuffer(&u8g2);
     d9a:	c6 01       	movw	r24, r12
     d9c:	34 d1       	rcall	.+616    	; 0x1006 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2,0,8,"Hi");
     d9e:	c6 01       	movw	r24, r12
     da0:	60 e0       	ldi	r22, 0x00	; 0
     da2:	48 e0       	ldi	r20, 0x08	; 8
     da4:	92 01       	movw	r18, r4
     da6:	d4 d5       	rcall	.+2984   	; 0x1950 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
     da8:	c6 01       	movw	r24, r12
     daa:	23 d1       	rcall	.+582    	; 0xff2 <u8g2_SendBuffer>
     dac:	93 01       	movw	r18, r6
     dae:	ce 01       	movw	r24, r28
     db0:	01 97       	sbiw	r24, 0x01	; 1
     db2:	f1 f7       	brne	.-4      	; 0xdb0 <main+0xd2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     db4:	21 50       	subi	r18, 0x01	; 1
     db6:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     db8:	d1 f7       	brne	.-12     	; 0xdae <main+0xd0>
     dba:	e0 cf       	rjmp	.-64     	; 0xd7c <main+0x9e>
		    _delay_ms(100);
		    break;
			
			case 0x0d:
			PORTC|=(1<<4);
     dbc:	f5 01       	movw	r30, r10
     dbe:	80 81       	ld	r24, Z
     dc0:	80 61       	ori	r24, 0x10	; 16
     dc2:	80 83       	st	Z, r24
			u8g2_ClearBuffer(&u8g2);
     dc4:	c6 01       	movw	r24, r12
     dc6:	1f d1       	rcall	.+574    	; 0x1006 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2,0,16,"This is Ahn!");
     dc8:	c6 01       	movw	r24, r12
     dca:	60 e0       	ldi	r22, 0x00	; 0
     dcc:	40 e1       	ldi	r20, 0x10	; 16
     dce:	91 01       	movw	r18, r2
     dd0:	bf d5       	rcall	.+2942   	; 0x1950 <u8g2_DrawStr>
			u8g2_DrawRFrame(&u8g2,5,17,50,30,8);
     dd2:	c6 01       	movw	r24, r12
     dd4:	65 e0       	ldi	r22, 0x05	; 5
     dd6:	41 e1       	ldi	r20, 0x11	; 17
     dd8:	22 e3       	ldi	r18, 0x32	; 50
     dda:	0e e1       	ldi	r16, 0x1E	; 30
     ddc:	ee 24       	eor	r14, r14
     dde:	68 94       	set
     de0:	e3 f8       	bld	r14, 3
     de2:	44 d0       	rcall	.+136    	; 0xe6c <u8g2_DrawRFrame>
			u8g2_SendBuffer(&u8g2);
     de4:	c6 01       	movw	r24, r12
     de6:	05 d1       	rcall	.+522    	; 0xff2 <u8g2_SendBuffer>
     de8:	93 01       	movw	r18, r6
     dea:	ce 01       	movw	r24, r28
     dec:	01 97       	sbiw	r24, 0x01	; 1
     dee:	f1 f7       	brne	.-4      	; 0xdec <main+0x10e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     df0:	21 50       	subi	r18, 0x01	; 1
     df2:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     df4:	d1 f7       	brne	.-12     	; 0xdea <main+0x10c>
		    _delay_ms(100);
		    default:
		    PORTC&=~(1<<4);
     df6:	f5 01       	movw	r30, r10
     df8:	80 81       	ld	r24, Z
     dfa:	8f 7e       	andi	r24, 0xEF	; 239
     dfc:	80 83       	st	Z, r24
     dfe:	be cf       	rjmp	.-132    	; 0xd7c <main+0x9e>

00000e00 <u8x8_byte_hw_i2c>:
#define OLED_ADDR (0x3D<<1)

u8g2_t u8g2;

uint8_t u8x8_byte_hw_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
     e00:	1f 93       	push	r17
     e02:	cf 93       	push	r28
     e04:	df 93       	push	r29
     e06:	fc 01       	movw	r30, r24
     e08:	14 2f       	mov	r17, r20
	uint8_t *data;

	switch(msg)
     e0a:	68 31       	cpi	r22, 0x18	; 24
     e0c:	c9 f0       	breq	.+50     	; 0xe40 <u8x8_byte_hw_i2c+0x40>
     e0e:	69 31       	cpi	r22, 0x19	; 25
     e10:	28 f4       	brcc	.+10     	; 0xe1c <u8x8_byte_hw_i2c+0x1c>
     e12:	64 31       	cpi	r22, 0x14	; 20
     e14:	91 f0       	breq	.+36     	; 0xe3a <u8x8_byte_hw_i2c+0x3a>
     e16:	67 31       	cpi	r22, 0x17	; 23
     e18:	29 f4       	brne	.+10     	; 0xe24 <u8x8_byte_hw_i2c+0x24>
     e1a:	06 c0       	rjmp	.+12     	; 0xe28 <u8x8_byte_hw_i2c+0x28>
     e1c:	69 31       	cpi	r22, 0x19	; 25
     e1e:	f1 f0       	breq	.+60     	; 0xe5c <u8x8_byte_hw_i2c+0x5c>
     e20:	60 32       	cpi	r22, 0x20	; 32
     e22:	f9 f0       	breq	.+62     	; 0xe62 <u8x8_byte_hw_i2c+0x62>
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	1e c0       	rjmp	.+60     	; 0xe64 <u8x8_byte_hw_i2c+0x64>
	{
		case U8X8_MSG_BYTE_SEND:
		data = (uint8_t *)arg_ptr;
		while( arg_int > 0 )
     e28:	44 23       	and	r20, r20
     e2a:	d9 f0       	breq	.+54     	; 0xe62 <u8x8_byte_hw_i2c+0x62>
	uint8_t *data;

	switch(msg)
	{
		case U8X8_MSG_BYTE_SEND:
		data = (uint8_t *)arg_ptr;
     e2c:	e9 01       	movw	r28, r18
		while( arg_int > 0 )
		{
			i2c_write(*data);
     e2e:	89 91       	ld	r24, Y+
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	61 de       	rcall	.-830    	; 0xaf6 <i2c_write>
			data++;
			arg_int--;
     e34:	11 50       	subi	r17, 0x01	; 1

	switch(msg)
	{
		case U8X8_MSG_BYTE_SEND:
		data = (uint8_t *)arg_ptr;
		while( arg_int > 0 )
     e36:	d9 f7       	brne	.-10     	; 0xe2e <u8x8_byte_hw_i2c+0x2e>
     e38:	14 c0       	rjmp	.+40     	; 0xe62 <u8x8_byte_hw_i2c+0x62>
		}
		
		break;
		
		case U8X8_MSG_BYTE_INIT:
		i2c_initialize();
     e3a:	32 de       	rcall	.-924    	; 0xaa0 <i2c_initialize>
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	12 c0       	rjmp	.+36     	; 0xe64 <u8x8_byte_hw_i2c+0x64>
		break;
		case U8X8_MSG_BYTE_SET_DC:
		break;
		case U8X8_MSG_BYTE_START_TRANSFER:
		if(u8x8->display_info->i2c_bus_clock_100kHz >= 4)
     e40:	01 90       	ld	r0, Z+
     e42:	f0 81       	ld	r31, Z
     e44:	e0 2d       	mov	r30, r0
     e46:	85 85       	ldd	r24, Z+13	; 0x0d
     e48:	84 30       	cpi	r24, 0x04	; 4
     e4a:	18 f0       	brcs	.+6      	; 0xe52 <u8x8_byte_hw_i2c+0x52>
		{
			TWBR=0x12;
     e4c:	82 e1       	ldi	r24, 0x12	; 18
     e4e:	80 93 70 00 	sts	0x0070, r24
		}
		i2c_Start(OLED_ADDR);
     e52:	8a e7       	ldi	r24, 0x7A	; 122
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	28 de       	rcall	.-944    	; 0xaa8 <i2c_Start>
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	04 c0       	rjmp	.+8      	; 0xe64 <u8x8_byte_hw_i2c+0x64>
		//i2c_write_byte(u8x8_GetI2CAddress(u8x8));
		//i2c_write_byte(u8x8, 0x078);
		break;
		case U8X8_MSG_BYTE_END_TRANSFER:
		i2c_Stop();
     e5c:	5f de       	rcall	.-834    	; 0xb1c <i2c_Stop>
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	01 c0       	rjmp	.+2      	; 0xe64 <u8x8_byte_hw_i2c+0x64>
		break;
     e62:	81 e0       	ldi	r24, 0x01	; 1
		default:
		return 0;
	}
	return 1;
}
     e64:	df 91       	pop	r29
     e66:	cf 91       	pop	r28
     e68:	1f 91       	pop	r17
     e6a:	08 95       	ret

00000e6c <u8g2_DrawRFrame>:
  }
}


void u8g2_DrawRFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, u8g2_uint_t r)
{
     e6c:	8f 92       	push	r8
     e6e:	9f 92       	push	r9
     e70:	af 92       	push	r10
     e72:	bf 92       	push	r11
     e74:	cf 92       	push	r12
     e76:	df 92       	push	r13
     e78:	ef 92       	push	r14
     e7a:	ff 92       	push	r15
     e7c:	0f 93       	push	r16
     e7e:	1f 93       	push	r17
     e80:	cf 93       	push	r28
     e82:	df 93       	push	r29
     e84:	ec 01       	movw	r28, r24
     e86:	c6 2e       	mov	r12, r22
     e88:	d4 2e       	mov	r13, r20
     e8a:	a2 2e       	mov	r10, r18
     e8c:	b0 2e       	mov	r11, r16
  u8g2_uint_t xl, yu;

#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
     e8e:	f2 2e       	mov	r15, r18
     e90:	f6 0e       	add	r15, r22
     e92:	10 2f       	mov	r17, r16
     e94:	14 0f       	add	r17, r20
     e96:	2f 2d       	mov	r18, r15
     e98:	01 2f       	mov	r16, r17
     e9a:	78 d6       	rcall	.+3312   	; 0x1b8c <u8g2_IsIntersection>
     e9c:	88 23       	and	r24, r24
     e9e:	09 f4       	brne	.+2      	; 0xea2 <u8g2_DrawRFrame+0x36>
     ea0:	4c c0       	rjmp	.+152    	; 0xf3a <u8g2_DrawRFrame+0xce>
    return;
#endif /* U8G2_WITH_INTERSECTION */

  xl = x;
  xl += r;
     ea2:	9e 2c       	mov	r9, r14
     ea4:	9c 0c       	add	r9, r12
  yu = y;
  yu += r;
     ea6:	8e 2c       	mov	r8, r14
     ea8:	8d 0c       	add	r8, r13
  {
    u8g2_uint_t yl, xr;
      
    xr = x;
    xr += w;
    xr -= r;
     eaa:	fa 94       	dec	r15
    xr -= 1;
     eac:	fe 18       	sub	r15, r14
    
    yl = y;
    yl += h;
    yl -= r; 
     eae:	11 50       	subi	r17, 0x01	; 1
    yl -= 1;
     eb0:	1e 19       	sub	r17, r14

    u8g2_DrawCircle(u8g2, xl, yu, r, U8G2_DRAW_UPPER_LEFT);
     eb2:	ce 01       	movw	r24, r28
     eb4:	69 2d       	mov	r22, r9
     eb6:	48 2d       	mov	r20, r8
     eb8:	2e 2d       	mov	r18, r14
     eba:	02 e0       	ldi	r16, 0x02	; 2
     ebc:	0b d1       	rcall	.+534    	; 0x10d4 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xr, yu, r, U8G2_DRAW_UPPER_RIGHT);
     ebe:	ce 01       	movw	r24, r28
     ec0:	6f 2d       	mov	r22, r15
     ec2:	48 2d       	mov	r20, r8
     ec4:	2e 2d       	mov	r18, r14
     ec6:	01 e0       	ldi	r16, 0x01	; 1
     ec8:	05 d1       	rcall	.+522    	; 0x10d4 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xl, yl, r, U8G2_DRAW_LOWER_LEFT);
     eca:	ce 01       	movw	r24, r28
     ecc:	69 2d       	mov	r22, r9
     ece:	41 2f       	mov	r20, r17
     ed0:	2e 2d       	mov	r18, r14
     ed2:	04 e0       	ldi	r16, 0x04	; 4
     ed4:	ff d0       	rcall	.+510    	; 0x10d4 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xr, yl, r, U8G2_DRAW_LOWER_RIGHT);
     ed6:	ce 01       	movw	r24, r28
     ed8:	6f 2d       	mov	r22, r15
     eda:	41 2f       	mov	r20, r17
     edc:	2e 2d       	mov	r18, r14
     ede:	08 e0       	ldi	r16, 0x08	; 8
     ee0:	f9 d0       	rcall	.+498    	; 0x10d4 <u8g2_DrawCircle>

  {
    u8g2_uint_t ww, hh;

    ww = w;
    ww -= r;
     ee2:	8a 2d       	mov	r24, r10
     ee4:	8e 19       	sub	r24, r14
    ww -= r;
     ee6:	08 2f       	mov	r16, r24
     ee8:	0e 19       	sub	r16, r14
    hh = h;
    hh -= r;
     eea:	8b 2d       	mov	r24, r11
     eec:	8e 19       	sub	r24, r14
    hh -= r;
     eee:	f8 2e       	mov	r15, r24
     ef0:	fe 18       	sub	r15, r14
    
    xl++;
    yu++;
    
    if ( ww >= 3 )
     ef2:	03 30       	cpi	r16, 0x03	; 3
     ef4:	78 f0       	brcs	.+30     	; 0xf14 <u8g2_DrawRFrame+0xa8>
    ww -= r;
    hh = h;
    hh -= r;
    hh -= r;
    
    xl++;
     ef6:	19 2d       	mov	r17, r9
     ef8:	1f 5f       	subi	r17, 0xFF	; 255
    yu++;
    
    if ( ww >= 3 )
    {
      ww -= 2;
     efa:	02 50       	subi	r16, 0x02	; 2
      h--;
      u8g2_DrawHLine(u8g2, xl, y, ww);
     efc:	ce 01       	movw	r24, r28
     efe:	61 2f       	mov	r22, r17
     f00:	4d 2d       	mov	r20, r13
     f02:	20 2f       	mov	r18, r16
     f04:	12 d6       	rcall	.+3108   	; 0x1b2a <u8g2_DrawHLine>
      u8g2_DrawHLine(u8g2, xl, y+h, ww);
     f06:	4d 2d       	mov	r20, r13
     f08:	41 50       	subi	r20, 0x01	; 1
     f0a:	4b 0d       	add	r20, r11
     f0c:	ce 01       	movw	r24, r28
     f0e:	61 2f       	mov	r22, r17
     f10:	20 2f       	mov	r18, r16
     f12:	0b d6       	rcall	.+3094   	; 0x1b2a <u8g2_DrawHLine>
    }
    
    if ( hh >= 3 )
     f14:	82 e0       	ldi	r24, 0x02	; 2
     f16:	8f 15       	cp	r24, r15
     f18:	80 f4       	brcc	.+32     	; 0xf3a <u8g2_DrawRFrame+0xce>
    hh = h;
    hh -= r;
    hh -= r;
    
    xl++;
    yu++;
     f1a:	18 2d       	mov	r17, r8
     f1c:	1f 5f       	subi	r17, 0xFF	; 255
      u8g2_DrawHLine(u8g2, xl, y+h, ww);
    }
    
    if ( hh >= 3 )
    {
      hh -= 2;
     f1e:	0f 2d       	mov	r16, r15
     f20:	02 50       	subi	r16, 0x02	; 2
      w--;
      u8g2_DrawVLine(u8g2, x, yu, hh);
     f22:	ce 01       	movw	r24, r28
     f24:	6c 2d       	mov	r22, r12
     f26:	41 2f       	mov	r20, r17
     f28:	20 2f       	mov	r18, r16
     f2a:	e1 d5       	rcall	.+3010   	; 0x1aee <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x+w, yu, hh);
     f2c:	6c 2d       	mov	r22, r12
     f2e:	61 50       	subi	r22, 0x01	; 1
     f30:	6a 0d       	add	r22, r10
     f32:	ce 01       	movw	r24, r28
     f34:	41 2f       	mov	r20, r17
     f36:	20 2f       	mov	r18, r16
     f38:	da d5       	rcall	.+2996   	; 0x1aee <u8g2_DrawVLine>
    }
  }
}
     f3a:	df 91       	pop	r29
     f3c:	cf 91       	pop	r28
     f3e:	1f 91       	pop	r17
     f40:	0f 91       	pop	r16
     f42:	ff 90       	pop	r15
     f44:	ef 90       	pop	r14
     f46:	df 90       	pop	r13
     f48:	cf 90       	pop	r12
     f4a:	bf 90       	pop	r11
     f4c:	af 90       	pop	r10
     f4e:	9f 90       	pop	r9
     f50:	8f 90       	pop	r8
     f52:	08 95       	ret

00000f54 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
     f54:	9f 92       	push	r9
     f56:	af 92       	push	r10
     f58:	bf 92       	push	r11
     f5a:	cf 92       	push	r12
     f5c:	df 92       	push	r13
     f5e:	ef 92       	push	r14
     f60:	ff 92       	push	r15
     f62:	0f 93       	push	r16
     f64:	1f 93       	push	r17
     f66:	cf 93       	push	r28
     f68:	df 93       	push	r29
     f6a:	7c 01       	movw	r14, r24
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
  src_max = u8g2->tile_buf_height;
     f6c:	dc 01       	movw	r26, r24
     f6e:	91 96       	adiw	r26, 0x21	; 33
     f70:	9c 90       	ld	r9, X
     f72:	91 97       	sbiw	r26, 0x21	; 33
  dest_row = u8g2->tile_curr_row;
     f74:	92 96       	adiw	r26, 0x22	; 34
     f76:	dc 90       	ld	r13, X
     f78:	92 97       	sbiw	r26, 0x22	; 34
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
     f7a:	ed 91       	ld	r30, X+
     f7c:	fc 91       	ld	r31, X
     f7e:	a1 88       	ldd	r10, Z+17	; 0x11
  offset = src_tile_row;
  ptr = u8g2->tile_buf_ptr;
  offset *= w;
  offset *= 8;
  ptr += offset;
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
     f80:	b8 2e       	mov	r11, r24
     f82:	cf 2c       	mov	r12, r15
     f84:	c0 e0       	ldi	r28, 0x00	; 0
     f86:	d0 e0       	ldi	r29, 0x00	; 0
{
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
     f88:	d7 01       	movw	r26, r14
     f8a:	ed 91       	ld	r30, X+
     f8c:	fc 91       	ld	r31, X
     f8e:	11 97       	sbiw	r26, 0x01	; 1
     f90:	20 89       	ldd	r18, Z+16	; 0x10
  offset = src_tile_row;
  ptr = u8g2->tile_buf_ptr;
     f92:	5f 96       	adiw	r26, 0x1f	; 31
     f94:	0d 91       	ld	r16, X+
     f96:	1c 91       	ld	r17, X
     f98:	90 97       	sbiw	r26, 0x20	; 32
  offset *= w;
     f9a:	82 2f       	mov	r24, r18
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	88 0f       	add	r24, r24
     fa0:	99 1f       	adc	r25, r25
     fa2:	88 0f       	add	r24, r24
     fa4:	99 1f       	adc	r25, r25
     fa6:	88 0f       	add	r24, r24
     fa8:	99 1f       	adc	r25, r25
  offset *= 8;
  ptr += offset;
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
     faa:	fc 01       	movw	r30, r24
     fac:	ec 9f       	mul	r30, r28
     fae:	c0 01       	movw	r24, r0
     fb0:	ed 9f       	mul	r30, r29
     fb2:	90 0d       	add	r25, r0
     fb4:	fc 9f       	mul	r31, r28
     fb6:	90 0d       	add	r25, r0
     fb8:	11 24       	eor	r1, r1
     fba:	08 0f       	add	r16, r24
     fbc:	19 1f       	adc	r17, r25
     fbe:	8b 2d       	mov	r24, r11
     fc0:	9c 2d       	mov	r25, r12
     fc2:	60 e0       	ldi	r22, 0x00	; 0
     fc4:	4d 2d       	mov	r20, r13
     fc6:	0e 94 3e 10 	call	0x207c	; 0x207c <u8x8_DrawTile>
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
    src_row++;
    dest_row++;
  } while( src_row < src_max && dest_row < dest_max );
     fca:	9e 01       	movw	r18, r28
     fcc:	2f 5f       	subi	r18, 0xFF	; 255
     fce:	29 15       	cp	r18, r9
     fd0:	20 f4       	brcc	.+8      	; 0xfda <u8g2_send_buffer+0x86>
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
    src_row++;
    dest_row++;
     fd2:	d3 94       	inc	r13
     fd4:	21 96       	adiw	r28, 0x01	; 1
  } while( src_row < src_max && dest_row < dest_max );
     fd6:	da 14       	cp	r13, r10
     fd8:	b8 f2       	brcs	.-82     	; 0xf88 <u8g2_send_buffer+0x34>
}
     fda:	df 91       	pop	r29
     fdc:	cf 91       	pop	r28
     fde:	1f 91       	pop	r17
     fe0:	0f 91       	pop	r16
     fe2:	ff 90       	pop	r15
     fe4:	ef 90       	pop	r14
     fe6:	df 90       	pop	r13
     fe8:	cf 90       	pop	r12
     fea:	bf 90       	pop	r11
     fec:	af 90       	pop	r10
     fee:	9f 90       	pop	r9
     ff0:	08 95       	ret

00000ff2 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
     ff2:	0f 93       	push	r16
     ff4:	1f 93       	push	r17
     ff6:	8c 01       	movw	r16, r24
  u8g2_send_buffer(u8g2);
     ff8:	ad df       	rcall	.-166    	; 0xf54 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
     ffa:	c8 01       	movw	r24, r16
     ffc:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <u8x8_RefreshDisplay>
}
    1000:	1f 91       	pop	r17
    1002:	0f 91       	pop	r16
    1004:	08 95       	ret

00001006 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
    1006:	dc 01       	movw	r26, r24
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
    1008:	ed 91       	ld	r30, X+
    100a:	fc 91       	ld	r31, X
    100c:	11 97       	sbiw	r26, 0x01	; 1
    100e:	80 89       	ldd	r24, Z+16	; 0x10
  cnt *= u8g2->tile_buf_height;
    1010:	91 96       	adiw	r26, 0x21	; 33
    1012:	2c 91       	ld	r18, X
    1014:	91 97       	sbiw	r26, 0x21	; 33
    1016:	28 9f       	mul	r18, r24
    1018:	90 01       	movw	r18, r0
    101a:	11 24       	eor	r1, r1
  cnt *= 8;
  memset(u8g2->tile_buf_ptr, 0, cnt);
    101c:	22 0f       	add	r18, r18
    101e:	33 1f       	adc	r19, r19
    1020:	22 0f       	add	r18, r18
    1022:	33 1f       	adc	r19, r19
    1024:	22 0f       	add	r18, r18
    1026:	33 1f       	adc	r19, r19
    1028:	5f 96       	adiw	r26, 0x1f	; 31
    102a:	8c 91       	ld	r24, X
    102c:	5f 97       	sbiw	r26, 0x1f	; 31
    102e:	90 96       	adiw	r26, 0x20	; 32
    1030:	9c 91       	ld	r25, X
    1032:	60 e0       	ldi	r22, 0x00	; 0
    1034:	70 e0       	ldi	r23, 0x00	; 0
    1036:	42 2f       	mov	r20, r18
    1038:	53 2f       	mov	r21, r19
    103a:	0c 94 e2 12 	jmp	0x25c4	; 0x25c4 <memset>

0000103e <u8g2_draw_circle_section>:
/* Circle */

static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option) U8G2_NOINLINE;

static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option)
{
    103e:	df 92       	push	r13
    1040:	ef 92       	push	r14
    1042:	ff 92       	push	r15
    1044:	0f 93       	push	r16
    1046:	1f 93       	push	r17
    1048:	cf 93       	push	r28
    104a:	df 93       	push	r29
    104c:	ec 01       	movw	r28, r24
    104e:	d6 2e       	mov	r13, r22
    1050:	f4 2e       	mov	r15, r20
    1052:	12 2f       	mov	r17, r18
    /* upper right */
    if ( option & U8G2_DRAW_UPPER_RIGHT )
    1054:	e0 fe       	sbrs	r14, 0
    1056:	0c c0       	rjmp	.+24     	; 0x1070 <u8g2_draw_circle_section+0x32>
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 - y);
    1058:	62 2f       	mov	r22, r18
    105a:	6d 0d       	add	r22, r13
    105c:	40 2f       	mov	r20, r16
    105e:	4f 19       	sub	r20, r15
    1060:	ce 01       	movw	r24, r28
    1062:	31 d5       	rcall	.+2658   	; 0x1ac6 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 + y, y0 - x);
    1064:	61 2f       	mov	r22, r17
    1066:	6f 0d       	add	r22, r15
    1068:	40 2f       	mov	r20, r16
    106a:	4d 19       	sub	r20, r13
    106c:	ce 01       	movw	r24, r28
    106e:	2b d5       	rcall	.+2646   	; 0x1ac6 <u8g2_DrawPixel>
    }
    
    /* upper left */
    if ( option & U8G2_DRAW_UPPER_LEFT )
    1070:	e1 fe       	sbrs	r14, 1
    1072:	0c c0       	rjmp	.+24     	; 0x108c <u8g2_draw_circle_section+0x4e>
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 - y);
    1074:	61 2f       	mov	r22, r17
    1076:	6d 19       	sub	r22, r13
    1078:	40 2f       	mov	r20, r16
    107a:	4f 19       	sub	r20, r15
    107c:	ce 01       	movw	r24, r28
    107e:	23 d5       	rcall	.+2630   	; 0x1ac6 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 - y, y0 - x);
    1080:	61 2f       	mov	r22, r17
    1082:	6f 19       	sub	r22, r15
    1084:	40 2f       	mov	r20, r16
    1086:	4d 19       	sub	r20, r13
    1088:	ce 01       	movw	r24, r28
    108a:	1d d5       	rcall	.+2618   	; 0x1ac6 <u8g2_DrawPixel>
    }
    
    /* lower right */
    if ( option & U8G2_DRAW_LOWER_RIGHT )
    108c:	e3 fe       	sbrs	r14, 3
    108e:	0c c0       	rjmp	.+24     	; 0x10a8 <u8g2_draw_circle_section+0x6a>
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 + y);
    1090:	61 2f       	mov	r22, r17
    1092:	6d 0d       	add	r22, r13
    1094:	40 2f       	mov	r20, r16
    1096:	4f 0d       	add	r20, r15
    1098:	ce 01       	movw	r24, r28
    109a:	15 d5       	rcall	.+2602   	; 0x1ac6 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 + y, y0 + x);
    109c:	61 2f       	mov	r22, r17
    109e:	6f 0d       	add	r22, r15
    10a0:	40 2f       	mov	r20, r16
    10a2:	4d 0d       	add	r20, r13
    10a4:	ce 01       	movw	r24, r28
    10a6:	0f d5       	rcall	.+2590   	; 0x1ac6 <u8g2_DrawPixel>
    }
    
    /* lower left */
    if ( option & U8G2_DRAW_LOWER_LEFT )
    10a8:	e2 fe       	sbrs	r14, 2
    10aa:	0c c0       	rjmp	.+24     	; 0x10c4 <u8g2_draw_circle_section+0x86>
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 + y);
    10ac:	61 2f       	mov	r22, r17
    10ae:	6d 19       	sub	r22, r13
    10b0:	40 2f       	mov	r20, r16
    10b2:	4f 0d       	add	r20, r15
    10b4:	ce 01       	movw	r24, r28
    10b6:	07 d5       	rcall	.+2574   	; 0x1ac6 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 - y, y0 + x);
    10b8:	61 2f       	mov	r22, r17
    10ba:	6f 19       	sub	r22, r15
    10bc:	40 2f       	mov	r20, r16
    10be:	4d 0d       	add	r20, r13
    10c0:	ce 01       	movw	r24, r28
    10c2:	01 d5       	rcall	.+2562   	; 0x1ac6 <u8g2_DrawPixel>
    }
}
    10c4:	df 91       	pop	r29
    10c6:	cf 91       	pop	r28
    10c8:	1f 91       	pop	r17
    10ca:	0f 91       	pop	r16
    10cc:	ff 90       	pop	r15
    10ce:	ef 90       	pop	r14
    10d0:	df 90       	pop	r13
    10d2:	08 95       	ret

000010d4 <u8g2_DrawCircle>:
      u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);    
    }
}

void u8g2_DrawCircle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
    10d4:	8f 92       	push	r8
    10d6:	9f 92       	push	r9
    10d8:	af 92       	push	r10
    10da:	bf 92       	push	r11
    10dc:	cf 92       	push	r12
    10de:	df 92       	push	r13
    10e0:	ef 92       	push	r14
    10e2:	ff 92       	push	r15
    10e4:	0f 93       	push	r16
    10e6:	1f 93       	push	r17
    10e8:	cf 93       	push	r28
    10ea:	df 93       	push	r29
    10ec:	ec 01       	movw	r28, r24
    10ee:	96 2e       	mov	r9, r22
    10f0:	a4 2e       	mov	r10, r20
    10f2:	d2 2e       	mov	r13, r18
    10f4:	80 2e       	mov	r8, r16
  /* check for bounding box */
#ifdef U8G2_WITH_INTERSECTION
  {
    if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
    10f6:	62 1b       	sub	r22, r18
    10f8:	42 1b       	sub	r20, r18
    10fa:	29 2d       	mov	r18, r9
    10fc:	2f 5f       	subi	r18, 0xFF	; 255
    10fe:	2d 0d       	add	r18, r13
    1100:	0a 2d       	mov	r16, r10
    1102:	0f 5f       	subi	r16, 0xFF	; 255
    1104:	0d 0d       	add	r16, r13
    1106:	42 d5       	rcall	.+2692   	; 0x1b8c <u8g2_IsIntersection>
    1108:	88 23       	and	r24, r24
    110a:	49 f1       	breq	.+82     	; 0x115e <__stack+0x5f>
    ddF_y -= rad;
    ddF_y *= 2;
    x = 0;
    y = rad;

    u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);
    110c:	ce 01       	movw	r24, r28
    110e:	60 e0       	ldi	r22, 0x00	; 0
    1110:	4d 2d       	mov	r20, r13
    1112:	29 2d       	mov	r18, r9
    1114:	0a 2d       	mov	r16, r10
    1116:	e8 2c       	mov	r14, r8
    1118:	92 df       	rcall	.-220    	; 0x103e <u8g2_draw_circle_section>
    
    while ( x < y )
    111a:	dd 20       	and	r13, r13
    111c:	01 f1       	breq	.+64     	; 0x115e <__stack+0x5f>
    u8g2_int_t ddF_y;
    u8g2_uint_t x;
    u8g2_uint_t y;

    f = 1;
    f -= rad;
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	f8 2e       	mov	r15, r24
    1122:	fd 18       	sub	r15, r13
    ddF_x = 1;
    ddF_y = 0;
    ddF_y -= rad;
    ddF_y *= 2;
    1124:	8d 2d       	mov	r24, r13
    1126:	81 95       	neg	r24
    1128:	b8 2e       	mov	r11, r24
    112a:	bb 0c       	add	r11, r11
    112c:	10 e0       	ldi	r17, 0x00	; 0
    112e:	0f 2e       	mov	r0, r31
    1130:	f3 e0       	ldi	r31, 0x03	; 3
    1132:	cf 2e       	mov	r12, r31
    1134:	f0 2d       	mov	r31, r0

    u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);
    
    while ( x < y )
    {
      if (f >= 0) 
    1136:	ff 20       	and	r15, r15
    1138:	24 f0       	brlt	.+8      	; 0x1142 <__stack+0x43>
      {
        y--;
    113a:	da 94       	dec	r13
        ddF_y += 2;
    113c:	82 e0       	ldi	r24, 0x02	; 2
    113e:	b8 0e       	add	r11, r24
        f += ddF_y;
    1140:	fb 0c       	add	r15, r11
      }
      x++;
    1142:	1f 5f       	subi	r17, 0xFF	; 255
      ddF_x += 2;
      f += ddF_x;

      u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);    
    1144:	ce 01       	movw	r24, r28
    1146:	61 2f       	mov	r22, r17
    1148:	4d 2d       	mov	r20, r13
    114a:	29 2d       	mov	r18, r9
    114c:	0a 2d       	mov	r16, r10
    114e:	e8 2c       	mov	r14, r8
    1150:	76 df       	rcall	.-276    	; 0x103e <u8g2_draw_circle_section>
    x = 0;
    y = rad;

    u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);
    
    while ( x < y )
    1152:	1d 15       	cp	r17, r13
    1154:	20 f4       	brcc	.+8      	; 0x115e <__stack+0x5f>
        ddF_y += 2;
        f += ddF_y;
      }
      x++;
      ddF_x += 2;
      f += ddF_x;
    1156:	fc 0c       	add	r15, r12
    1158:	82 e0       	ldi	r24, 0x02	; 2
    115a:	c8 0e       	add	r12, r24
    115c:	ec cf       	rjmp	.-40     	; 0x1136 <__stack+0x37>
#endif /* U8G2_WITH_INTERSECTION */
  
  
  /* draw circle */
  u8g2_draw_circle(u8g2, x0, y0, rad, option);
}
    115e:	df 91       	pop	r29
    1160:	cf 91       	pop	r28
    1162:	1f 91       	pop	r17
    1164:	0f 91       	pop	r16
    1166:	ff 90       	pop	r15
    1168:	ef 90       	pop	r14
    116a:	df 90       	pop	r13
    116c:	cf 90       	pop	r12
    116e:	bf 90       	pop	r11
    1170:	af 90       	pop	r10
    1172:	9f 90       	pop	r9
    1174:	8f 90       	pop	r8
    1176:	08 95       	ret

00001178 <u8g2_m_16_8_f>:
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
    1178:	fc 01       	movw	r30, r24
  static uint8_t buf[1024];
  *page_cnt = 8;
    117a:	88 e0       	ldi	r24, 0x08	; 8
    117c:	80 83       	st	Z, r24
  return buf;
}
    117e:	88 e8       	ldi	r24, 0x88	; 136
    1180:	91 e0       	ldi	r25, 0x01	; 1
    1182:	08 95       	ret

00001184 <u8g2_Setup_ssd1306_i2c_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_i2c_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
    1184:	cf 92       	push	r12
    1186:	df 92       	push	r13
    1188:	ef 92       	push	r14
    118a:	ff 92       	push	r15
    118c:	0f 93       	push	r16
    118e:	1f 93       	push	r17
    1190:	df 93       	push	r29
    1192:	cf 93       	push	r28
    1194:	0f 92       	push	r0
    1196:	cd b7       	in	r28, 0x3d	; 61
    1198:	de b7       	in	r29, 0x3e	; 62
    119a:	7c 01       	movw	r14, r24
    119c:	6b 01       	movw	r12, r22
    119e:	fa 01       	movw	r30, r20
    11a0:	89 01       	movw	r16, r18
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_ssd13xx_i2c, byte_cb, gpio_and_delay_cb);
    11a2:	69 e2       	ldi	r22, 0x29	; 41
    11a4:	71 e1       	ldi	r23, 0x11	; 17
    11a6:	43 e7       	ldi	r20, 0x73	; 115
    11a8:	5f e0       	ldi	r21, 0x0F	; 15
    11aa:	9f 01       	movw	r18, r30
    11ac:	0e 94 68 11 	call	0x22d0	; 0x22d0 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
    11b0:	ce 01       	movw	r24, r28
    11b2:	01 96       	adiw	r24, 0x01	; 1
    11b4:	e1 df       	rcall	.-62     	; 0x1178 <u8g2_m_16_8_f>
    11b6:	bc 01       	movw	r22, r24
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
    11b8:	c7 01       	movw	r24, r14
    11ba:	49 81       	ldd	r20, Y+1	; 0x01
    11bc:	2f ed       	ldi	r18, 0xDF	; 223
    11be:	3d e0       	ldi	r19, 0x0D	; 13
    11c0:	86 01       	movw	r16, r12
    11c2:	da d5       	rcall	.+2996   	; 0x1d78 <u8g2_SetupBuffer>
}
    11c4:	0f 90       	pop	r0
    11c6:	cf 91       	pop	r28
    11c8:	df 91       	pop	r29
    11ca:	1f 91       	pop	r17
    11cc:	0f 91       	pop	r16
    11ce:	ff 90       	pop	r15
    11d0:	ef 90       	pop	r14
    11d2:	df 90       	pop	r13
    11d4:	cf 90       	pop	r12
    11d6:	08 95       	ret

000011d8 <u8g2_font_get_byte>:
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
    11d8:	fc 01       	movw	r30, r24
    11da:	e6 0f       	add	r30, r22
    11dc:	f1 1d       	adc	r31, r1
    11de:	e4 91       	lpm	r30, Z+
}
    11e0:	8e 2f       	mov	r24, r30
    11e2:	08 95       	ret

000011e4 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
    uint16_t pos;
    font += offset;
    11e4:	fc 01       	movw	r30, r24
    11e6:	e6 0f       	add	r30, r22
    11e8:	f1 1d       	adc	r31, r1
    pos = u8x8_pgm_read( font );
    11ea:	84 91       	lpm	r24, Z+
    font++;
    pos <<= 8;
    11ec:	38 2f       	mov	r19, r24
    11ee:	20 e0       	ldi	r18, 0x00	; 0
    pos += u8x8_pgm_read( font);
    11f0:	31 96       	adiw	r30, 0x01	; 1
    11f2:	e4 91       	lpm	r30, Z+
    11f4:	2e 0f       	add	r18, r30
    11f6:	31 1d       	adc	r19, r1
    return pos;
}
    11f8:	82 2f       	mov	r24, r18
    11fa:	93 2f       	mov	r25, r19
    11fc:	08 95       	ret

000011fe <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
    11fe:	ef 92       	push	r14
    1200:	ff 92       	push	r15
    1202:	0f 93       	push	r16
    1204:	1f 93       	push	r17
    1206:	7c 01       	movw	r14, r24
    1208:	8b 01       	movw	r16, r22
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
    120a:	cb 01       	movw	r24, r22
    120c:	60 e0       	ldi	r22, 0x00	; 0
    120e:	e4 df       	rcall	.-56     	; 0x11d8 <u8g2_font_get_byte>
    1210:	f7 01       	movw	r30, r14
    1212:	80 83       	st	Z, r24
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
    1214:	c8 01       	movw	r24, r16
    1216:	61 e0       	ldi	r22, 0x01	; 1
    1218:	df df       	rcall	.-66     	; 0x11d8 <u8g2_font_get_byte>
    121a:	f7 01       	movw	r30, r14
    121c:	81 83       	std	Z+1, r24	; 0x01
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
    121e:	c8 01       	movw	r24, r16
    1220:	62 e0       	ldi	r22, 0x02	; 2
    1222:	da df       	rcall	.-76     	; 0x11d8 <u8g2_font_get_byte>
    1224:	f7 01       	movw	r30, r14
    1226:	82 83       	std	Z+2, r24	; 0x02
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
    1228:	c8 01       	movw	r24, r16
    122a:	63 e0       	ldi	r22, 0x03	; 3
    122c:	d5 df       	rcall	.-86     	; 0x11d8 <u8g2_font_get_byte>
    122e:	f7 01       	movw	r30, r14
    1230:	83 83       	std	Z+3, r24	; 0x03
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
    1232:	c8 01       	movw	r24, r16
    1234:	64 e0       	ldi	r22, 0x04	; 4
    1236:	d0 df       	rcall	.-96     	; 0x11d8 <u8g2_font_get_byte>
    1238:	f7 01       	movw	r30, r14
    123a:	84 83       	std	Z+4, r24	; 0x04
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
    123c:	c8 01       	movw	r24, r16
    123e:	65 e0       	ldi	r22, 0x05	; 5
    1240:	cb df       	rcall	.-106    	; 0x11d8 <u8g2_font_get_byte>
    1242:	f7 01       	movw	r30, r14
    1244:	85 83       	std	Z+5, r24	; 0x05
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
    1246:	c8 01       	movw	r24, r16
    1248:	66 e0       	ldi	r22, 0x06	; 6
    124a:	c6 df       	rcall	.-116    	; 0x11d8 <u8g2_font_get_byte>
    124c:	f7 01       	movw	r30, r14
    124e:	86 83       	std	Z+6, r24	; 0x06
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
    1250:	c8 01       	movw	r24, r16
    1252:	67 e0       	ldi	r22, 0x07	; 7
    1254:	c1 df       	rcall	.-126    	; 0x11d8 <u8g2_font_get_byte>
    1256:	f7 01       	movw	r30, r14
    1258:	87 83       	std	Z+7, r24	; 0x07
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
    125a:	c8 01       	movw	r24, r16
    125c:	68 e0       	ldi	r22, 0x08	; 8
    125e:	bc df       	rcall	.-136    	; 0x11d8 <u8g2_font_get_byte>
    1260:	f7 01       	movw	r30, r14
    1262:	80 87       	std	Z+8, r24	; 0x08
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
    1264:	c8 01       	movw	r24, r16
    1266:	69 e0       	ldi	r22, 0x09	; 9
    1268:	b7 df       	rcall	.-146    	; 0x11d8 <u8g2_font_get_byte>
    126a:	f7 01       	movw	r30, r14
    126c:	81 87       	std	Z+9, r24	; 0x09
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
    126e:	c8 01       	movw	r24, r16
    1270:	6a e0       	ldi	r22, 0x0A	; 10
    1272:	b2 df       	rcall	.-156    	; 0x11d8 <u8g2_font_get_byte>
    1274:	f7 01       	movw	r30, r14
    1276:	82 87       	std	Z+10, r24	; 0x0a
  font_info->x_offset = u8g2_font_get_byte(font, 11);
    1278:	c8 01       	movw	r24, r16
    127a:	6b e0       	ldi	r22, 0x0B	; 11
    127c:	ad df       	rcall	.-166    	; 0x11d8 <u8g2_font_get_byte>
    127e:	f7 01       	movw	r30, r14
    1280:	83 87       	std	Z+11, r24	; 0x0b
  font_info->y_offset = u8g2_font_get_byte(font, 12);
    1282:	c8 01       	movw	r24, r16
    1284:	6c e0       	ldi	r22, 0x0C	; 12
    1286:	a8 df       	rcall	.-176    	; 0x11d8 <u8g2_font_get_byte>
    1288:	f7 01       	movw	r30, r14
    128a:	84 87       	std	Z+12, r24	; 0x0c
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
    128c:	c8 01       	movw	r24, r16
    128e:	6d e0       	ldi	r22, 0x0D	; 13
    1290:	a3 df       	rcall	.-186    	; 0x11d8 <u8g2_font_get_byte>
    1292:	f7 01       	movw	r30, r14
    1294:	85 87       	std	Z+13, r24	; 0x0d
  font_info->descent_g = u8g2_font_get_byte(font, 14);
    1296:	c8 01       	movw	r24, r16
    1298:	6e e0       	ldi	r22, 0x0E	; 14
    129a:	9e df       	rcall	.-196    	; 0x11d8 <u8g2_font_get_byte>
    129c:	f7 01       	movw	r30, r14
    129e:	86 87       	std	Z+14, r24	; 0x0e
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
    12a0:	c8 01       	movw	r24, r16
    12a2:	6f e0       	ldi	r22, 0x0F	; 15
    12a4:	99 df       	rcall	.-206    	; 0x11d8 <u8g2_font_get_byte>
    12a6:	f7 01       	movw	r30, r14
    12a8:	87 87       	std	Z+15, r24	; 0x0f
  font_info->descent_para = u8g2_font_get_byte(font, 16);
    12aa:	c8 01       	movw	r24, r16
    12ac:	60 e1       	ldi	r22, 0x10	; 16
    12ae:	94 df       	rcall	.-216    	; 0x11d8 <u8g2_font_get_byte>
    12b0:	f7 01       	movw	r30, r14
    12b2:	80 8b       	std	Z+16, r24	; 0x10
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
    12b4:	c8 01       	movw	r24, r16
    12b6:	61 e1       	ldi	r22, 0x11	; 17
    12b8:	95 df       	rcall	.-214    	; 0x11e4 <u8g2_font_get_word>
    12ba:	f7 01       	movw	r30, r14
    12bc:	92 8b       	std	Z+18, r25	; 0x12
    12be:	81 8b       	std	Z+17, r24	; 0x11
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
    12c0:	c8 01       	movw	r24, r16
    12c2:	63 e1       	ldi	r22, 0x13	; 19
    12c4:	8f df       	rcall	.-226    	; 0x11e4 <u8g2_font_get_word>
    12c6:	f7 01       	movw	r30, r14
    12c8:	94 8b       	std	Z+20, r25	; 0x14
    12ca:	83 8b       	std	Z+19, r24	; 0x13
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
    12cc:	c8 01       	movw	r24, r16
    12ce:	65 e1       	ldi	r22, 0x15	; 21
    12d0:	89 df       	rcall	.-238    	; 0x11e4 <u8g2_font_get_word>
    12d2:	f7 01       	movw	r30, r14
    12d4:	96 8b       	std	Z+22, r25	; 0x16
    12d6:	85 8b       	std	Z+21, r24	; 0x15
#endif
}
    12d8:	1f 91       	pop	r17
    12da:	0f 91       	pop	r16
    12dc:	ff 90       	pop	r15
    12de:	ef 90       	pop	r14
    12e0:	08 95       	ret

000012e2 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
    12e2:	dc 01       	movw	r26, r24
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
    12e4:	18 96       	adiw	r26, 0x08	; 8
    12e6:	4c 91       	ld	r20, X
    12e8:	18 97       	sbiw	r26, 0x08	; 8
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
    12ea:	ed 91       	ld	r30, X+
    12ec:	fc 91       	ld	r31, X
    12ee:	11 97       	sbiw	r26, 0x01	; 1
    12f0:	84 91       	lpm	r24, Z+
  
  val >>= bit_pos;
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	04 2e       	mov	r0, r20
    12f6:	02 c0       	rjmp	.+4      	; 0x12fc <u8g2_font_decode_get_unsigned_bits+0x1a>
    12f8:	95 95       	asr	r25
    12fa:	87 95       	ror	r24
    12fc:	0a 94       	dec	r0
    12fe:	e2 f7       	brpl	.-8      	; 0x12f8 <u8g2_font_decode_get_unsigned_bits+0x16>
    1300:	58 2f       	mov	r21, r24
  bit_pos_plus_cnt = bit_pos;
  bit_pos_plus_cnt += cnt;
    1302:	36 2f       	mov	r19, r22
    1304:	34 0f       	add	r19, r20
  if ( bit_pos_plus_cnt >= 8 )
    1306:	38 30       	cpi	r19, 0x08	; 8
    1308:	80 f0       	brcs	.+32     	; 0x132a <u8g2_font_decode_get_unsigned_bits+0x48>
  {
    uint8_t s = 8;
    s -= bit_pos;
    f->decode_ptr++;
    130a:	31 96       	adiw	r30, 0x01	; 1
    130c:	11 96       	adiw	r26, 0x01	; 1
    130e:	fc 93       	st	X, r31
    1310:	ee 93       	st	-X, r30
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
    1312:	e4 91       	lpm	r30, Z+
    1314:	8e 2f       	mov	r24, r30
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	28 e0       	ldi	r18, 0x08	; 8
    131a:	24 1b       	sub	r18, r20
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <u8g2_font_decode_get_unsigned_bits+0x40>
    131e:	88 0f       	add	r24, r24
    1320:	99 1f       	adc	r25, r25
    1322:	2a 95       	dec	r18
    1324:	e2 f7       	brpl	.-8      	; 0x131e <u8g2_font_decode_get_unsigned_bits+0x3c>
    1326:	58 2b       	or	r21, r24
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
    1328:	38 50       	subi	r19, 0x08	; 8
  }
  val &= (1U<<cnt)-1;
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
    132a:	18 96       	adiw	r26, 0x08	; 8
    132c:	3c 93       	st	X, r19
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	02 c0       	rjmp	.+4      	; 0x1338 <u8g2_font_decode_get_unsigned_bits+0x56>
    1334:	88 0f       	add	r24, r24
    1336:	99 1f       	adc	r25, r25
    1338:	6a 95       	dec	r22
    133a:	e2 f7       	brpl	.-8      	; 0x1334 <u8g2_font_decode_get_unsigned_bits+0x52>
    133c:	81 50       	subi	r24, 0x01	; 1
  return val;
}
    133e:	85 23       	and	r24, r21
    1340:	08 95       	ret

00001342 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
    1342:	1f 93       	push	r17
    1344:	16 2f       	mov	r17, r22
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
    1346:	cd df       	rcall	.-102    	; 0x12e2 <u8g2_font_decode_get_unsigned_bits>
    1348:	11 50       	subi	r17, 0x01	; 1
    134a:	21 e0       	ldi	r18, 0x01	; 1
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <u8g2_font_decode_get_signed_bits+0x12>
    1350:	22 0f       	add	r18, r18
    1352:	33 1f       	adc	r19, r19
    1354:	1a 95       	dec	r17
    1356:	e2 f7       	brpl	.-8      	; 0x1350 <u8g2_font_decode_get_signed_bits+0xe>
  cnt--;
  d <<= cnt;
  v -= d;
  return v;
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
    1358:	82 1b       	sub	r24, r18
    135a:	1f 91       	pop	r17
    135c:	08 95       	ret

0000135e <u8g2_add_vector_y>:

#ifdef U8G2_WITH_FONT_ROTATION
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
  switch(dir)
    135e:	21 30       	cpi	r18, 0x01	; 1
    1360:	39 f0       	breq	.+14     	; 0x1370 <u8g2_add_vector_y+0x12>
    1362:	21 30       	cpi	r18, 0x01	; 1
    1364:	18 f0       	brcs	.+6      	; 0x136c <u8g2_add_vector_y+0xe>
    1366:	22 30       	cpi	r18, 0x02	; 2
    1368:	39 f4       	brne	.+14     	; 0x1378 <u8g2_add_vector_y+0x1a>
    136a:	04 c0       	rjmp	.+8      	; 0x1374 <u8g2_add_vector_y+0x16>
  {
    case 0:
      dy += y;
    136c:	84 0f       	add	r24, r20
    136e:	08 95       	ret
      break;
    case 1:
      dy += x;
    1370:	86 0f       	add	r24, r22
    1372:	08 95       	ret
      break;
    case 2:
      dy -= y;
    1374:	84 1b       	sub	r24, r20
    1376:	08 95       	ret
      break;
    default:
      dy -= x;
    1378:	86 1b       	sub	r24, r22
      break;      
  }
  return dy;
}
    137a:	08 95       	ret

0000137c <u8g2_add_vector_x>:

static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
  switch(dir)
    137c:	21 30       	cpi	r18, 0x01	; 1
    137e:	39 f0       	breq	.+14     	; 0x138e <u8g2_add_vector_x+0x12>
    1380:	21 30       	cpi	r18, 0x01	; 1
    1382:	18 f0       	brcs	.+6      	; 0x138a <u8g2_add_vector_x+0xe>
    1384:	22 30       	cpi	r18, 0x02	; 2
    1386:	39 f4       	brne	.+14     	; 0x1396 <u8g2_add_vector_x+0x1a>
    1388:	04 c0       	rjmp	.+8      	; 0x1392 <u8g2_add_vector_x+0x16>
  {
    case 0:
      dx += x;
    138a:	86 0f       	add	r24, r22
    138c:	08 95       	ret
      break;
    case 1:
      dx -= y;
    138e:	84 1b       	sub	r24, r20
    1390:	08 95       	ret
      break;
    case 2:
      dx -= x;
    1392:	86 1b       	sub	r24, r22
    1394:	08 95       	ret
      break;
    default:
      dx += y;
    1396:	84 0f       	add	r24, r20
      break;      
  }
  return dx;
}
    1398:	08 95       	ret

0000139a <u8g2_font_setup_decode>:
  decode->y = ly;
  
}

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
    139a:	0f 93       	push	r16
    139c:	1f 93       	push	r17
    139e:	cf 93       	push	r28
    13a0:	df 93       	push	r29
    13a2:	ec 01       	movw	r28, r24
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
    13a4:	8c 01       	movw	r16, r24
    13a6:	0e 5c       	subi	r16, 0xCE	; 206
    13a8:	1f 4f       	sbci	r17, 0xFF	; 255
  decode->decode_ptr = glyph_data;
    13aa:	7b ab       	std	Y+51, r23	; 0x33
    13ac:	6a ab       	std	Y+50, r22	; 0x32
  decode->decode_bit_pos = 0;
    13ae:	1a ae       	std	Y+58, r1	; 0x3a
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
    13b0:	fc 01       	movw	r30, r24
    13b2:	ed 5b       	subi	r30, 0xBD	; 189
    13b4:	ff 4f       	sbci	r31, 0xFF	; 255
    13b6:	c8 01       	movw	r24, r16
    13b8:	60 81       	ld	r22, Z
    13ba:	93 df       	rcall	.-218    	; 0x12e2 <u8g2_font_decode_get_unsigned_bits>
    13bc:	88 af       	std	Y+56, r24	; 0x38
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
    13be:	fe 01       	movw	r30, r28
    13c0:	ec 5b       	subi	r30, 0xBC	; 188
    13c2:	ff 4f       	sbci	r31, 0xFF	; 255
    13c4:	c8 01       	movw	r24, r16
    13c6:	60 81       	ld	r22, Z
    13c8:	8c df       	rcall	.-232    	; 0x12e2 <u8g2_font_decode_get_unsigned_bits>
    13ca:	89 af       	std	Y+57, r24	; 0x39
  
  decode->fg_color = u8g2->draw_color;
    13cc:	fe 01       	movw	r30, r28
    13ce:	e5 5a       	subi	r30, 0xA5	; 165
    13d0:	ff 4f       	sbci	r31, 0xFF	; 255
    13d2:	80 81       	ld	r24, Z
    13d4:	8c af       	std	Y+60, r24	; 0x3c
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
    13d6:	1d ae       	std	Y+61, r1	; 0x3d
    13d8:	88 23       	and	r24, r24
    13da:	11 f4       	brne	.+4      	; 0x13e0 <u8g2_font_setup_decode+0x46>
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	8d af       	std	Y+61, r24	; 0x3d
}
    13e0:	df 91       	pop	r29
    13e2:	cf 91       	pop	r28
    13e4:	1f 91       	pop	r17
    13e6:	0f 91       	pop	r16
    13e8:	08 95       	ret

000013ea <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
    13ea:	ef 92       	push	r14
    13ec:	ff 92       	push	r15
    13ee:	0f 93       	push	r16
    13f0:	1f 93       	push	r17
    13f2:	cf 93       	push	r28
    13f4:	df 93       	push	r29
    13f6:	fc 01       	movw	r30, r24
    13f8:	7b 01       	movw	r14, r22
  const uint8_t *font = u8g2->font;
    13fa:	86 a5       	ldd	r24, Z+46	; 0x2e
    13fc:	97 a5       	ldd	r25, Z+47	; 0x2f
  font += U8G2_FONT_DATA_STRUCT_SIZE;
    13fe:	9c 01       	movw	r18, r24
    1400:	29 5e       	subi	r18, 0xE9	; 233
    1402:	3f 4f       	sbci	r19, 0xFF	; 255

  
  if ( encoding <= 255 )
    1404:	6f 3f       	cpi	r22, 0xFF	; 255
    1406:	71 05       	cpc	r23, r1
    1408:	11 f0       	breq	.+4      	; 0x140e <u8g2_font_get_glyph_data+0x24>
    140a:	08 f0       	brcs	.+2      	; 0x140e <u8g2_font_get_glyph_data+0x24>
    140c:	37 c0       	rjmp	.+110    	; 0x147c <u8g2_font_get_glyph_data+0x92>
  {
    if ( encoding >= 'a' )
    140e:	61 36       	cpi	r22, 0x61	; 97
    1410:	71 05       	cpc	r23, r1
    1412:	38 f0       	brcs	.+14     	; 0x1422 <u8g2_font_get_glyph_data+0x38>
    {
      font += u8g2->font_info.start_pos_lower_a;
    1414:	ee 5a       	subi	r30, 0xAE	; 174
    1416:	ff 4f       	sbci	r31, 0xFF	; 255
    1418:	80 81       	ld	r24, Z
    141a:	91 81       	ldd	r25, Z+1	; 0x01
    141c:	28 0f       	add	r18, r24
    141e:	39 1f       	adc	r19, r25
    1420:	09 c0       	rjmp	.+18     	; 0x1434 <u8g2_font_get_glyph_data+0x4a>
    }
    else if ( encoding >= 'A' )
    1422:	61 34       	cpi	r22, 0x41	; 65
    1424:	71 05       	cpc	r23, r1
    1426:	30 f0       	brcs	.+12     	; 0x1434 <u8g2_font_get_glyph_data+0x4a>
    {
      font += u8g2->font_info.start_pos_upper_A;
    1428:	e0 5b       	subi	r30, 0xB0	; 176
    142a:	ff 4f       	sbci	r31, 0xFF	; 255
    142c:	80 81       	ld	r24, Z
    142e:	91 81       	ldd	r25, Z+1	; 0x01
    1430:	28 0f       	add	r18, r24
    1432:	39 1f       	adc	r19, r25
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
    1434:	a9 01       	movw	r20, r18
    1436:	4f 5f       	subi	r20, 0xFF	; 255
    1438:	5f 4f       	sbci	r21, 0xFF	; 255
    143a:	fa 01       	movw	r30, r20
    143c:	84 91       	lpm	r24, Z+
    143e:	88 23       	and	r24, r24
    1440:	09 f4       	brne	.+2      	; 0x1444 <u8g2_font_get_glyph_data+0x5a>
    1442:	58 c0       	rjmp	.+176    	; 0x14f4 <u8g2_font_get_glyph_data+0x10a>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
    1444:	f9 01       	movw	r30, r18
    1446:	84 91       	lpm	r24, Z+
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	8e 15       	cp	r24, r14
    144c:	9f 05       	cpc	r25, r15
    144e:	51 f4       	brne	.+20     	; 0x1464 <u8g2_font_get_glyph_data+0x7a>
    1450:	06 c0       	rjmp	.+12     	; 0x145e <u8g2_font_get_glyph_data+0x74>
    1452:	f9 01       	movw	r30, r18
    1454:	84 91       	lpm	r24, Z+
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	8e 15       	cp	r24, r14
    145a:	9f 05       	cpc	r25, r15
    145c:	19 f4       	brne	.+6      	; 0x1464 <u8g2_font_get_glyph_data+0x7a>
      {
	return font+2;	/* skip encoding and glyph size */
    145e:	f9 01       	movw	r30, r18
    1460:	32 96       	adiw	r30, 0x02	; 2
    1462:	4a c0       	rjmp	.+148    	; 0x14f8 <u8g2_font_get_glyph_data+0x10e>
      }
      font += u8x8_pgm_read( font + 1 );
    1464:	fa 01       	movw	r30, r20
    1466:	84 91       	lpm	r24, Z+
    1468:	28 0f       	add	r18, r24
    146a:	31 1d       	adc	r19, r1
      font += u8g2->font_info.start_pos_upper_A;
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
    146c:	a9 01       	movw	r20, r18
    146e:	4f 5f       	subi	r20, 0xFF	; 255
    1470:	5f 4f       	sbci	r21, 0xFF	; 255
    1472:	fa 01       	movw	r30, r20
    1474:	84 91       	lpm	r24, Z+
    1476:	88 23       	and	r24, r24
    1478:	61 f7       	brne	.-40     	; 0x1452 <u8g2_font_get_glyph_data+0x68>
    147a:	3c c0       	rjmp	.+120    	; 0x14f4 <u8g2_font_get_glyph_data+0x10a>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
    147c:	ec 5a       	subi	r30, 0xAC	; 172
    147e:	ff 4f       	sbci	r31, 0xFF	; 255
    1480:	80 81       	ld	r24, Z
    1482:	91 81       	ldd	r25, Z+1	; 0x01
    1484:	e9 01       	movw	r28, r18
    1486:	c8 0f       	add	r28, r24
    1488:	d9 1f       	adc	r29, r25
    148a:	8e 01       	movw	r16, r28
    unicode_lookup_table = font; 
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
    148c:	c8 01       	movw	r24, r16
    148e:	60 e0       	ldi	r22, 0x00	; 0
    1490:	a9 de       	rcall	.-686    	; 0x11e4 <u8g2_font_get_word>
    1492:	c8 0f       	add	r28, r24
    1494:	d9 1f       	adc	r29, r25
      e = u8g2_font_get_word(unicode_lookup_table, 2);
    1496:	c8 01       	movw	r24, r16
    1498:	62 e0       	ldi	r22, 0x02	; 2
    149a:	a4 de       	rcall	.-696    	; 0x11e4 <u8g2_font_get_word>
      unicode_lookup_table+=4;
    149c:	0c 5f       	subi	r16, 0xFC	; 252
    149e:	1f 4f       	sbci	r17, 0xFF	; 255
    } while( e < encoding );
    14a0:	8e 15       	cp	r24, r14
    14a2:	9f 05       	cpc	r25, r15
    14a4:	98 f3       	brcs	.-26     	; 0x148c <u8g2_font_get_glyph_data+0xa2>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
    14a6:	fe 01       	movw	r30, r28
    14a8:	24 91       	lpm	r18, Z+
      e <<= 8;
    14aa:	92 2f       	mov	r25, r18
    14ac:	80 e0       	ldi	r24, 0x00	; 0
      e |= u8x8_pgm_read( font + 1 );
    14ae:	31 96       	adiw	r30, 0x01	; 1
    14b0:	e4 91       	lpm	r30, Z+
    14b2:	2e 2f       	mov	r18, r30
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	82 2b       	or	r24, r18
    14b8:	93 2b       	or	r25, r19
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
    14ba:	00 97       	sbiw	r24, 0x00	; 0
    14bc:	d9 f0       	breq	.+54     	; 0x14f4 <u8g2_font_get_glyph_data+0x10a>
	break;
  
      if ( e == encoding )
    14be:	8e 15       	cp	r24, r14
    14c0:	9f 05       	cpc	r25, r15
    14c2:	39 f4       	brne	.+14     	; 0x14d2 <u8g2_font_get_glyph_data+0xe8>
    14c4:	03 c0       	rjmp	.+6      	; 0x14cc <u8g2_font_get_glyph_data+0xe2>
    14c6:	8e 15       	cp	r24, r14
    14c8:	9f 05       	cpc	r25, r15
    14ca:	19 f4       	brne	.+6      	; 0x14d2 <u8g2_font_get_glyph_data+0xe8>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
    14cc:	fe 01       	movw	r30, r28
    14ce:	33 96       	adiw	r30, 0x03	; 3
    14d0:	13 c0       	rjmp	.+38     	; 0x14f8 <u8g2_font_get_glyph_data+0x10e>
      }
      font += u8x8_pgm_read( font + 2 );
    14d2:	fe 01       	movw	r30, r28
    14d4:	32 96       	adiw	r30, 0x02	; 2
    14d6:	e4 91       	lpm	r30, Z+
    14d8:	ce 0f       	add	r28, r30
    14da:	d1 1d       	adc	r29, r1
    } while( e < encoding );
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
    14dc:	fe 01       	movw	r30, r28
    14de:	84 91       	lpm	r24, Z+
      e <<= 8;
    14e0:	38 2f       	mov	r19, r24
    14e2:	20 e0       	ldi	r18, 0x00	; 0
      e |= u8x8_pgm_read( font + 1 );
    14e4:	31 96       	adiw	r30, 0x01	; 1
    14e6:	e4 91       	lpm	r30, Z+
    14e8:	8e 2f       	mov	r24, r30
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	82 2b       	or	r24, r18
    14ee:	93 2b       	or	r25, r19
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
    14f0:	00 97       	sbiw	r24, 0x00	; 0
    14f2:	49 f7       	brne	.-46     	; 0x14c6 <u8g2_font_get_glyph_data+0xdc>
    14f4:	e0 e0       	ldi	r30, 0x00	; 0
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    }  
  }
#endif
  
  return NULL;
}
    14f8:	8e 2f       	mov	r24, r30
    14fa:	9f 2f       	mov	r25, r31
    14fc:	df 91       	pop	r29
    14fe:	cf 91       	pop	r28
    1500:	1f 91       	pop	r17
    1502:	0f 91       	pop	r16
    1504:	ff 90       	pop	r15
    1506:	ef 90       	pop	r14
    1508:	08 95       	ret

0000150a <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
    150a:	cf 93       	push	r28
    150c:	df 93       	push	r29
    150e:	ec 01       	movw	r28, r24
  if ( u8g2->font == NULL )
    1510:	8e a5       	ldd	r24, Y+46	; 0x2e
    1512:	9f a5       	ldd	r25, Y+47	; 0x2f
    1514:	89 2b       	or	r24, r25
    1516:	09 f4       	brne	.+2      	; 0x151a <u8g2_UpdateRefHeight+0x10>
    1518:	66 c0       	rjmp	.+204    	; 0x15e6 <u8g2_UpdateRefHeight+0xdc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
    151a:	de 01       	movw	r26, r28
    151c:	a9 5a       	subi	r26, 0xA9	; 169
    151e:	bf 4f       	sbci	r27, 0xFF	; 255
    1520:	fe 01       	movw	r30, r28
    1522:	e4 5b       	subi	r30, 0xB4	; 180
    1524:	ff 4f       	sbci	r31, 0xFF	; 255
    1526:	80 81       	ld	r24, Z
    1528:	8c 93       	st	X, r24
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
    152a:	de 01       	movw	r26, r28
    152c:	a8 5a       	subi	r26, 0xA8	; 168
    152e:	bf 4f       	sbci	r27, 0xFF	; 255
    1530:	fe 01       	movw	r30, r28
    1532:	e3 5b       	subi	r30, 0xB3	; 179
    1534:	ff 4f       	sbci	r31, 0xFF	; 255
    1536:	80 81       	ld	r24, Z
    1538:	8c 93       	st	X, r24
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
    153a:	fe 01       	movw	r30, r28
    153c:	ea 5a       	subi	r30, 0xAA	; 170
    153e:	ff 4f       	sbci	r31, 0xFF	; 255
    1540:	e0 81       	ld	r30, Z
    1542:	ee 23       	and	r30, r30
    1544:	09 f4       	brne	.+2      	; 0x1548 <u8g2_UpdateRefHeight+0x3e>
    1546:	4f c0       	rjmp	.+158    	; 0x15e6 <u8g2_UpdateRefHeight+0xdc>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
    1548:	e1 30       	cpi	r30, 0x01	; 1
    154a:	e9 f4       	brne	.+58     	; 0x1586 <u8g2_UpdateRefHeight+0x7c>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
    154c:	fe 01       	movw	r30, r28
    154e:	e2 5b       	subi	r30, 0xB2	; 178
    1550:	ff 4f       	sbci	r31, 0xFF	; 255
    1552:	90 81       	ld	r25, Z
    1554:	fe 01       	movw	r30, r28
    1556:	e9 5a       	subi	r30, 0xA9	; 169
    1558:	ff 4f       	sbci	r31, 0xFF	; 255
    155a:	80 81       	ld	r24, Z
    155c:	89 17       	cp	r24, r25
    155e:	24 f4       	brge	.+8      	; 0x1568 <u8g2_UpdateRefHeight+0x5e>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
    1560:	fe 01       	movw	r30, r28
    1562:	e9 5a       	subi	r30, 0xA9	; 169
    1564:	ff 4f       	sbci	r31, 0xFF	; 255
    1566:	90 83       	st	Z, r25
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
    1568:	fe 01       	movw	r30, r28
    156a:	e1 5b       	subi	r30, 0xB1	; 177
    156c:	ff 4f       	sbci	r31, 0xFF	; 255
    156e:	90 81       	ld	r25, Z
    1570:	fe 01       	movw	r30, r28
    1572:	e8 5a       	subi	r30, 0xA8	; 168
    1574:	ff 4f       	sbci	r31, 0xFF	; 255
    1576:	80 81       	ld	r24, Z
    1578:	98 17       	cp	r25, r24
    157a:	ac f5       	brge	.+106    	; 0x15e6 <u8g2_UpdateRefHeight+0xdc>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
    157c:	fe 01       	movw	r30, r28
    157e:	e8 5a       	subi	r30, 0xA8	; 168
    1580:	ff 4f       	sbci	r31, 0xFF	; 255
    1582:	90 83       	st	Z, r25
    1584:	30 c0       	rjmp	.+96     	; 0x15e6 <u8g2_UpdateRefHeight+0xdc>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
    1586:	fe 01       	movw	r30, r28
    1588:	e7 5b       	subi	r30, 0xB7	; 183
    158a:	ff 4f       	sbci	r31, 0xFF	; 255
    158c:	70 81       	ld	r23, Z
    158e:	fe 01       	movw	r30, r28
    1590:	e5 5b       	subi	r30, 0xB5	; 181
    1592:	ff 4f       	sbci	r31, 0xFF	; 255
    1594:	60 81       	ld	r22, Z
    1596:	fe 01       	movw	r30, r28
    1598:	e9 5a       	subi	r30, 0xA9	; 169
    159a:	ff 4f       	sbci	r31, 0xFF	; 255
    159c:	40 81       	ld	r20, Z
    159e:	55 27       	eor	r21, r21
    15a0:	47 fd       	sbrc	r20, 7
    15a2:	50 95       	com	r21
    15a4:	86 2f       	mov	r24, r22
    15a6:	99 27       	eor	r25, r25
    15a8:	87 fd       	sbrc	r24, 7
    15aa:	90 95       	com	r25
    15ac:	27 2f       	mov	r18, r23
    15ae:	33 27       	eor	r19, r19
    15b0:	27 fd       	sbrc	r18, 7
    15b2:	30 95       	com	r19
    15b4:	82 0f       	add	r24, r18
    15b6:	93 1f       	adc	r25, r19
    15b8:	48 17       	cp	r20, r24
    15ba:	59 07       	cpc	r21, r25
    15bc:	34 f4       	brge	.+12     	; 0x15ca <u8g2_UpdateRefHeight+0xc0>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
    15be:	fe 01       	movw	r30, r28
    15c0:	e9 5a       	subi	r30, 0xA9	; 169
    15c2:	ff 4f       	sbci	r31, 0xFF	; 255
    15c4:	86 2f       	mov	r24, r22
    15c6:	87 0f       	add	r24, r23
    15c8:	80 83       	st	Z, r24
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
    15ca:	fe 01       	movw	r30, r28
    15cc:	e5 5b       	subi	r30, 0xB5	; 181
    15ce:	ff 4f       	sbci	r31, 0xFF	; 255
    15d0:	90 81       	ld	r25, Z
    15d2:	fe 01       	movw	r30, r28
    15d4:	e8 5a       	subi	r30, 0xA8	; 168
    15d6:	ff 4f       	sbci	r31, 0xFF	; 255
    15d8:	80 81       	ld	r24, Z
    15da:	98 17       	cp	r25, r24
    15dc:	24 f4       	brge	.+8      	; 0x15e6 <u8g2_UpdateRefHeight+0xdc>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
    15de:	fe 01       	movw	r30, r28
    15e0:	e8 5a       	subi	r30, 0xA8	; 168
    15e2:	ff 4f       	sbci	r31, 0xFF	; 255
    15e4:	90 83       	st	Z, r25
  }  
}
    15e6:	df 91       	pop	r29
    15e8:	cf 91       	pop	r28
    15ea:	08 95       	ret

000015ec <u8g2_font_calc_vref_font>:
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
  return 0;
}
    15ec:	80 e0       	ldi	r24, 0x00	; 0
    15ee:	08 95       	ret

000015f0 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
    15f0:	26 ef       	ldi	r18, 0xF6	; 246
    15f2:	3a e0       	ldi	r19, 0x0A	; 10
    15f4:	fc 01       	movw	r30, r24
    15f6:	31 ab       	std	Z+49, r19	; 0x31
    15f8:	20 ab       	std	Z+48, r18	; 0x30
}
    15fa:	08 95       	ret

000015fc <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
    15fc:	cf 93       	push	r28
    15fe:	df 93       	push	r29
    1600:	ec 01       	movw	r28, r24
  if ( u8g2->font != font )
    1602:	8e a5       	ldd	r24, Y+46	; 0x2e
    1604:	9f a5       	ldd	r25, Y+47	; 0x2f
    1606:	86 17       	cp	r24, r22
    1608:	97 07       	cpc	r25, r23
    160a:	39 f0       	breq	.+14     	; 0x161a <u8g2_SetFont+0x1e>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
    160c:	7f a7       	std	Y+47, r23	; 0x2f
    160e:	6e a7       	std	Y+46, r22	; 0x2e
    u8g2_read_font_info(&(u8g2->font_info), font);
    1610:	ce 01       	movw	r24, r28
    1612:	cf 96       	adiw	r24, 0x3f	; 63
    1614:	f4 dd       	rcall	.-1048   	; 0x11fe <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
    1616:	ce 01       	movw	r24, r28
    1618:	78 df       	rcall	.-272    	; 0x150a <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
    161a:	df 91       	pop	r29
    161c:	cf 91       	pop	r28
    161e:	08 95       	ret

00001620 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
    1620:	5f 92       	push	r5
    1622:	6f 92       	push	r6
    1624:	7f 92       	push	r7
    1626:	8f 92       	push	r8
    1628:	9f 92       	push	r9
    162a:	af 92       	push	r10
    162c:	bf 92       	push	r11
    162e:	cf 92       	push	r12
    1630:	df 92       	push	r13
    1632:	ef 92       	push	r14
    1634:	ff 92       	push	r15
    1636:	0f 93       	push	r16
    1638:	1f 93       	push	r17
    163a:	cf 93       	push	r28
    163c:	df 93       	push	r29
    163e:	ec 01       	movw	r28, r24
    1640:	84 2e       	mov	r8, r20
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
  
  cnt = len;
  
  /* get the local position */
  lx = decode->x;
    1642:	ce a8       	ldd	r12, Y+54	; 0x36
  ly = decode->y;
    1644:	ef a8       	ldd	r14, Y+55	; 0x37
    1646:	d6 2e       	mov	r13, r22
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
    1648:	0f 2e       	mov	r0, r31
    164a:	fb e5       	ldi	r31, 0x5B	; 91
    164c:	6f 2e       	mov	r6, r31
    164e:	77 24       	eor	r7, r7
    1650:	f0 2d       	mov	r31, r0
    1652:	68 0e       	add	r6, r24
    1654:	79 1e       	adc	r7, r25
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
      break;
    cnt -= rem;
    lx = 0;
    ly++;
    1656:	55 24       	eor	r5, r5
  ly = decode->y;
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
    1658:	88 ad       	ldd	r24, Y+56	; 0x38
    rem -= lx;
    165a:	f8 2e       	mov	r15, r24
    165c:	fc 18       	sub	r15, r12
    165e:	bf 2c       	mov	r11, r15
    1660:	df 14       	cp	r13, r15
    1662:	08 f4       	brcc	.+2      	; 0x1666 <u8g2_font_decode_len+0x46>
    1664:	bd 2c       	mov	r11, r13
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
    y = decode->target_y;
    1666:	0d a9       	ldd	r16, Y+53	; 0x35

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
    1668:	9e 2c       	mov	r9, r14
    166a:	1e ad       	ldd	r17, Y+62	; 0x3e
    166c:	8c a9       	ldd	r24, Y+52	; 0x34
    166e:	6c 2d       	mov	r22, r12
    1670:	4e 2d       	mov	r20, r14
    1672:	21 2f       	mov	r18, r17
    1674:	83 de       	rcall	.-762    	; 0x137c <u8g2_add_vector_x>
    1676:	a8 2e       	mov	r10, r24
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
    1678:	80 2f       	mov	r24, r16
    167a:	6c 2d       	mov	r22, r12
    167c:	4e 2d       	mov	r20, r14
    167e:	21 2f       	mov	r18, r17
    1680:	6e de       	rcall	.-804    	; 0x135e <u8g2_add_vector_y>
    1682:	48 2f       	mov	r20, r24
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
    1684:	88 20       	and	r8, r8
    1686:	49 f0       	breq	.+18     	; 0x169a <u8g2_font_decode_len+0x7a>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
    1688:	8c ad       	ldd	r24, Y+60	; 0x3c
    168a:	f3 01       	movw	r30, r6
    168c:	80 83       	st	Z, r24
      u8g2_DrawHVLine(u8g2, 
    168e:	ce 01       	movw	r24, r28
    1690:	6a 2d       	mov	r22, r10
    1692:	2b 2d       	mov	r18, r11
    1694:	01 2f       	mov	r16, r17
    1696:	09 d2       	rcall	.+1042   	; 0x1aaa <u8g2_DrawHVLine>
    1698:	0b c0       	rjmp	.+22     	; 0x16b0 <u8g2_font_decode_len+0x90>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
    169a:	8b ad       	ldd	r24, Y+59	; 0x3b
    169c:	88 23       	and	r24, r24
    169e:	41 f4       	brne	.+16     	; 0x16b0 <u8g2_font_decode_len+0x90>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
    16a0:	8d ad       	ldd	r24, Y+61	; 0x3d
    16a2:	f3 01       	movw	r30, r6
    16a4:	80 83       	st	Z, r24
      u8g2_DrawHVLine(u8g2, 
    16a6:	ce 01       	movw	r24, r28
    16a8:	6a 2d       	mov	r22, r10
    16aa:	2b 2d       	mov	r18, r11
    16ac:	0e ad       	ldd	r16, Y+62	; 0x3e
    16ae:	fd d1       	rcall	.+1018   	; 0x1aaa <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
    16b0:	df 14       	cp	r13, r15
    16b2:	20 f0       	brcs	.+8      	; 0x16bc <u8g2_font_decode_len+0x9c>
      break;
    cnt -= rem;
    16b4:	df 18       	sub	r13, r15
    lx = 0;
    ly++;
    16b6:	e3 94       	inc	r14
    16b8:	c5 2c       	mov	r12, r5
    16ba:	ce cf       	rjmp	.-100    	; 0x1658 <u8g2_font_decode_len+0x38>
  }
  lx += cnt;
  
  decode->x = lx;
    16bc:	8c 2d       	mov	r24, r12
    16be:	8d 0d       	add	r24, r13
    16c0:	8e ab       	std	Y+54, r24	; 0x36
  decode->y = ly;
    16c2:	9f aa       	std	Y+55, r9	; 0x37
  
}
    16c4:	df 91       	pop	r29
    16c6:	cf 91       	pop	r28
    16c8:	1f 91       	pop	r17
    16ca:	0f 91       	pop	r16
    16cc:	ff 90       	pop	r15
    16ce:	ef 90       	pop	r14
    16d0:	df 90       	pop	r13
    16d2:	cf 90       	pop	r12
    16d4:	bf 90       	pop	r11
    16d6:	af 90       	pop	r10
    16d8:	9f 90       	pop	r9
    16da:	8f 90       	pop	r8
    16dc:	7f 90       	pop	r7
    16de:	6f 90       	pop	r6
    16e0:	5f 90       	pop	r5
    16e2:	08 95       	ret

000016e4 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
    16e4:	8f 92       	push	r8
    16e6:	9f 92       	push	r9
    16e8:	af 92       	push	r10
    16ea:	bf 92       	push	r11
    16ec:	cf 92       	push	r12
    16ee:	df 92       	push	r13
    16f0:	ef 92       	push	r14
    16f2:	ff 92       	push	r15
    16f4:	0f 93       	push	r16
    16f6:	1f 93       	push	r17
    16f8:	cf 93       	push	r28
    16fa:	df 93       	push	r29
    16fc:	ec 01       	movw	r28, r24
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
    16fe:	0f 2e       	mov	r0, r31
    1700:	f2 e3       	ldi	r31, 0x32	; 50
    1702:	ef 2e       	mov	r14, r31
    1704:	ff 24       	eor	r15, r15
    1706:	f0 2d       	mov	r31, r0
    1708:	e8 0e       	add	r14, r24
    170a:	f9 1e       	adc	r15, r25
    
  u8g2_font_setup_decode(u8g2, glyph_data);
    170c:	46 de       	rcall	.-884    	; 0x139a <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
    170e:	99 ac       	ldd	r9, Y+57	; 0x39
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
    1710:	fe 01       	movw	r30, r28
    1712:	eb 5b       	subi	r30, 0xBB	; 187
    1714:	ff 4f       	sbci	r31, 0xFF	; 255
    1716:	c7 01       	movw	r24, r14
    1718:	60 81       	ld	r22, Z
    171a:	13 de       	rcall	.-986    	; 0x1342 <u8g2_font_decode_get_signed_bits>
    171c:	d8 2e       	mov	r13, r24
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
    171e:	fe 01       	movw	r30, r28
    1720:	ea 5b       	subi	r30, 0xBA	; 186
    1722:	ff 4f       	sbci	r31, 0xFF	; 255
    1724:	c7 01       	movw	r24, r14
    1726:	60 81       	ld	r22, Z
    1728:	0c de       	rcall	.-1000   	; 0x1342 <u8g2_font_decode_get_signed_bits>
    172a:	18 2f       	mov	r17, r24
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
    172c:	fe 01       	movw	r30, r28
    172e:	e9 5b       	subi	r30, 0xB9	; 185
    1730:	ff 4f       	sbci	r31, 0xFF	; 255
    1732:	c7 01       	movw	r24, r14
    1734:	60 81       	ld	r22, Z
    1736:	05 de       	rcall	.-1014   	; 0x1342 <u8g2_font_decode_get_signed_bits>
    1738:	88 2e       	mov	r8, r24
  
  if ( decode->glyph_width > 0 )
    173a:	88 ad       	ldd	r24, Y+56	; 0x38
    173c:	18 16       	cp	r1, r24
    173e:	0c f0       	brlt	.+2      	; 0x1742 <u8g2_font_decode_glyph+0x5e>
    1740:	74 c0       	rjmp	.+232    	; 0x182a <u8g2_font_decode_glyph+0x146>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
    1742:	19 0d       	add	r17, r9
    1744:	11 95       	neg	r17
    1746:	8c a9       	ldd	r24, Y+52	; 0x34
    1748:	6d 2d       	mov	r22, r13
    174a:	41 2f       	mov	r20, r17
    174c:	2e ad       	ldd	r18, Y+62	; 0x3e
    174e:	16 de       	rcall	.-980    	; 0x137c <u8g2_add_vector_x>
    1750:	08 2f       	mov	r16, r24
    1752:	8c ab       	std	Y+52, r24	; 0x34
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
    1754:	8d a9       	ldd	r24, Y+53	; 0x35
    1756:	6d 2d       	mov	r22, r13
    1758:	41 2f       	mov	r20, r17
    175a:	2e ad       	ldd	r18, Y+62	; 0x3e
    175c:	00 de       	rcall	.-1024   	; 0x135e <u8g2_add_vector_y>
    175e:	48 2f       	mov	r20, r24
    1760:	8d ab       	std	Y+53, r24	; 0x35
      y0 = decode->target_y;
      x1 = x0;
      y1 = y0;
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
    1762:	8e ad       	ldd	r24, Y+62	; 0x3e
    1764:	81 30       	cpi	r24, 0x01	; 1
    1766:	79 f0       	breq	.+30     	; 0x1786 <u8g2_font_decode_glyph+0xa2>
    1768:	81 30       	cpi	r24, 0x01	; 1
    176a:	38 f0       	brcs	.+14     	; 0x177a <u8g2_font_decode_glyph+0x96>
    176c:	82 30       	cpi	r24, 0x02	; 2
    176e:	a1 f0       	breq	.+40     	; 0x1798 <u8g2_font_decode_glyph+0xb4>
    1770:	83 30       	cpi	r24, 0x03	; 3
    1772:	f1 f0       	breq	.+60     	; 0x17b0 <u8g2_font_decode_glyph+0xcc>
    1774:	20 2f       	mov	r18, r16
    1776:	34 2f       	mov	r19, r20
    1778:	23 c0       	rjmp	.+70     	; 0x17c0 <u8g2_font_decode_glyph+0xdc>
      {
	case 0:
	    x1 += decode->glyph_width;
    177a:	88 ad       	ldd	r24, Y+56	; 0x38
    177c:	20 2f       	mov	r18, r16
    177e:	28 0f       	add	r18, r24
	    y1 += h;
    1780:	39 2d       	mov	r19, r9
    1782:	34 0f       	add	r19, r20
    1784:	1d c0       	rjmp	.+58     	; 0x17c0 <u8g2_font_decode_glyph+0xdc>
	    break;
	case 1:
	    x0 -= h;
    1786:	90 2f       	mov	r25, r16
    1788:	9f 5f       	subi	r25, 0xFF	; 255
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
    178a:	09 2f       	mov	r16, r25
    178c:	09 19       	sub	r16, r9
	    x1++;
	    y1 += decode->glyph_width;
    178e:	88 ad       	ldd	r24, Y+56	; 0x38
    1790:	34 2f       	mov	r19, r20
    1792:	38 0f       	add	r19, r24
    1794:	29 2f       	mov	r18, r25
    1796:	14 c0       	rjmp	.+40     	; 0x17c0 <u8g2_font_decode_glyph+0xdc>
	    break;
	case 2:
	    x0 -= decode->glyph_width;
    1798:	80 2f       	mov	r24, r16
    179a:	8f 5f       	subi	r24, 0xFF	; 255
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
    179c:	98 ad       	ldd	r25, Y+56	; 0x38
    179e:	08 2f       	mov	r16, r24
    17a0:	09 1b       	sub	r16, r25
	    x1++;
	    y0 -= h;
    17a2:	94 2f       	mov	r25, r20
    17a4:	9f 5f       	subi	r25, 0xFF	; 255
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
    17a6:	49 2f       	mov	r20, r25
    17a8:	49 19       	sub	r20, r9
    17aa:	28 2f       	mov	r18, r24
    17ac:	39 2f       	mov	r19, r25
    17ae:	08 c0       	rjmp	.+16     	; 0x17c0 <u8g2_font_decode_glyph+0xdc>
	    y1++;
	    break;	  
	case 3:
	    x1 += h;
    17b0:	29 2d       	mov	r18, r9
    17b2:	20 0f       	add	r18, r16
	    y0 -= decode->glyph_width;
    17b4:	94 2f       	mov	r25, r20
    17b6:	9f 5f       	subi	r25, 0xFF	; 255
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
    17b8:	88 ad       	ldd	r24, Y+56	; 0x38
    17ba:	49 2f       	mov	r20, r25
    17bc:	48 1b       	sub	r20, r24
    17be:	39 2f       	mov	r19, r25
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
    17c0:	ce 01       	movw	r24, r28
    17c2:	60 2f       	mov	r22, r16
    17c4:	03 2f       	mov	r16, r19
    17c6:	e2 d1       	rcall	.+964    	; 0x1b8c <u8g2_IsIntersection>
    17c8:	88 23       	and	r24, r24
    17ca:	79 f1       	breq	.+94     	; 0x182a <u8g2_font_decode_glyph+0x146>
	return d;
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
    17cc:	1e aa       	std	Y+54, r1	; 0x36
    decode->y = 0;
    17ce:	1f aa       	std	Y+55, r1	; 0x37
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
    17d0:	0f 2e       	mov	r0, r31
    17d2:	f1 e4       	ldi	r31, 0x41	; 65
    17d4:	af 2e       	mov	r10, r31
    17d6:	bb 24       	eor	r11, r11
    17d8:	f0 2d       	mov	r31, r0
    17da:	ac 0e       	add	r10, r28
    17dc:	bd 1e       	adc	r11, r29
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
    17de:	0f 2e       	mov	r0, r31
    17e0:	f2 e4       	ldi	r31, 0x42	; 66
    17e2:	cf 2e       	mov	r12, r31
    17e4:	dd 24       	eor	r13, r13
    17e6:	f0 2d       	mov	r31, r0
    17e8:	cc 0e       	add	r12, r28
    17ea:	dd 1e       	adc	r13, r29
    decode->y = 0;
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
    17ec:	c7 01       	movw	r24, r14
    17ee:	f5 01       	movw	r30, r10
    17f0:	60 81       	ld	r22, Z
    17f2:	77 dd       	rcall	.-1298   	; 0x12e2 <u8g2_font_decode_get_unsigned_bits>
    17f4:	08 2f       	mov	r16, r24
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
    17f6:	c7 01       	movw	r24, r14
    17f8:	f6 01       	movw	r30, r12
    17fa:	60 81       	ld	r22, Z
    17fc:	72 dd       	rcall	.-1308   	; 0x12e2 <u8g2_font_decode_get_unsigned_bits>
    17fe:	18 2f       	mov	r17, r24
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
    1800:	ce 01       	movw	r24, r28
    1802:	60 2f       	mov	r22, r16
    1804:	40 e0       	ldi	r20, 0x00	; 0
    1806:	0c df       	rcall	.-488    	; 0x1620 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
    1808:	ce 01       	movw	r24, r28
    180a:	61 2f       	mov	r22, r17
    180c:	41 e0       	ldi	r20, 0x01	; 1
    180e:	08 df       	rcall	.-496    	; 0x1620 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
    1810:	c7 01       	movw	r24, r14
    1812:	61 e0       	ldi	r22, 0x01	; 1
    1814:	66 dd       	rcall	.-1332   	; 0x12e2 <u8g2_font_decode_get_unsigned_bits>
    1816:	88 23       	and	r24, r24
    1818:	99 f7       	brne	.-26     	; 0x1800 <u8g2_font_decode_glyph+0x11c>

      if ( decode->y >= h )
    181a:	8f a9       	ldd	r24, Y+55	; 0x37
    181c:	89 15       	cp	r24, r9
    181e:	34 f3       	brlt	.-52     	; 0x17ec <u8g2_font_decode_glyph+0x108>
	break;
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
    1820:	fe 01       	movw	r30, r28
    1822:	e5 5a       	subi	r30, 0xA5	; 165
    1824:	ff 4f       	sbci	r31, 0xFF	; 255
    1826:	8c ad       	ldd	r24, Y+60	; 0x3c
    1828:	80 83       	st	Z, r24
  }
  return d;
}
    182a:	88 2d       	mov	r24, r8
    182c:	df 91       	pop	r29
    182e:	cf 91       	pop	r28
    1830:	1f 91       	pop	r17
    1832:	0f 91       	pop	r16
    1834:	ff 90       	pop	r15
    1836:	ef 90       	pop	r14
    1838:	df 90       	pop	r13
    183a:	cf 90       	pop	r12
    183c:	bf 90       	pop	r11
    183e:	af 90       	pop	r10
    1840:	9f 90       	pop	r9
    1842:	8f 90       	pop	r8
    1844:	08 95       	ret

00001846 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
    1846:	ef 92       	push	r14
    1848:	ff 92       	push	r15
    184a:	0f 93       	push	r16
    184c:	1f 93       	push	r17
    184e:	cf 93       	push	r28
    1850:	df 93       	push	r29
    1852:	ec 01       	movw	r28, r24
    1854:	16 2f       	mov	r17, r22
    1856:	04 2f       	mov	r16, r20
    1858:	79 01       	movw	r14, r18
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
    185a:	8e ad       	ldd	r24, Y+62	; 0x3e
    185c:	81 30       	cpi	r24, 0x01	; 1
    185e:	69 f0       	breq	.+26     	; 0x187a <u8g2_DrawGlyph+0x34>
    1860:	81 30       	cpi	r24, 0x01	; 1
    1862:	28 f0       	brcs	.+10     	; 0x186e <u8g2_DrawGlyph+0x28>
    1864:	82 30       	cpi	r24, 0x02	; 2
    1866:	79 f0       	breq	.+30     	; 0x1886 <u8g2_DrawGlyph+0x40>
    1868:	83 30       	cpi	r24, 0x03	; 3
    186a:	c1 f4       	brne	.+48     	; 0x189c <u8g2_DrawGlyph+0x56>
    186c:	12 c0       	rjmp	.+36     	; 0x1892 <u8g2_DrawGlyph+0x4c>
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
    186e:	e8 a9       	ldd	r30, Y+48	; 0x30
    1870:	f9 a9       	ldd	r31, Y+49	; 0x31
    1872:	ce 01       	movw	r24, r28
    1874:	09 95       	icall
    1876:	08 0f       	add	r16, r24
    1878:	11 c0       	rjmp	.+34     	; 0x189c <u8g2_DrawGlyph+0x56>
      break;
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
    187a:	e8 a9       	ldd	r30, Y+48	; 0x30
    187c:	f9 a9       	ldd	r31, Y+49	; 0x31
    187e:	ce 01       	movw	r24, r28
    1880:	09 95       	icall
    1882:	18 1b       	sub	r17, r24
    1884:	0b c0       	rjmp	.+22     	; 0x189c <u8g2_DrawGlyph+0x56>
      break;
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
    1886:	e8 a9       	ldd	r30, Y+48	; 0x30
    1888:	f9 a9       	ldd	r31, Y+49	; 0x31
    188a:	ce 01       	movw	r24, r28
    188c:	09 95       	icall
    188e:	08 1b       	sub	r16, r24
    1890:	05 c0       	rjmp	.+10     	; 0x189c <u8g2_DrawGlyph+0x56>
      break;
    case 3:
      x += u8g2->font_calc_vref(u8g2);
    1892:	e8 a9       	ldd	r30, Y+48	; 0x30
    1894:	f9 a9       	ldd	r31, Y+49	; 0x31
    1896:	ce 01       	movw	r24, r28
    1898:	09 95       	icall
    189a:	18 0f       	add	r17, r24
}

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
  u8g2_uint_t dx = 0;
  u8g2->font_decode.target_x = x;
    189c:	1c ab       	std	Y+52, r17	; 0x34
  u8g2->font_decode.target_y = y;
    189e:	0d ab       	std	Y+53, r16	; 0x35
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
    18a0:	ce 01       	movw	r24, r28
    18a2:	b7 01       	movw	r22, r14
    18a4:	a2 dd       	rcall	.-1212   	; 0x13ea <u8g2_font_get_glyph_data>
    18a6:	bc 01       	movw	r22, r24
  if ( glyph_data != NULL )
    18a8:	00 97       	sbiw	r24, 0x00	; 0
    18aa:	11 f4       	brne	.+4      	; 0x18b0 <u8g2_DrawGlyph+0x6a>
    18ac:	80 e0       	ldi	r24, 0x00	; 0
    18ae:	02 c0       	rjmp	.+4      	; 0x18b4 <u8g2_DrawGlyph+0x6e>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
    18b0:	ce 01       	movw	r24, r28
    18b2:	18 df       	rcall	.-464    	; 0x16e4 <u8g2_font_decode_glyph>
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
}
    18b4:	df 91       	pop	r29
    18b6:	cf 91       	pop	r28
    18b8:	1f 91       	pop	r17
    18ba:	0f 91       	pop	r16
    18bc:	ff 90       	pop	r15
    18be:	ef 90       	pop	r14
    18c0:	08 95       	ret

000018c2 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
    18c2:	bf 92       	push	r11
    18c4:	cf 92       	push	r12
    18c6:	df 92       	push	r13
    18c8:	ef 92       	push	r14
    18ca:	ff 92       	push	r15
    18cc:	0f 93       	push	r16
    18ce:	1f 93       	push	r17
    18d0:	cf 93       	push	r28
    18d2:	df 93       	push	r29
    18d4:	ec 01       	movw	r28, r24
    18d6:	d6 2e       	mov	r13, r22
    18d8:	e4 2e       	mov	r14, r20
    18da:	89 01       	movw	r16, r18
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
    18dc:	b8 2e       	mov	r11, r24
    18de:	cd 2e       	mov	r12, r29
    18e0:	9d 2f       	mov	r25, r29
    18e2:	76 d2       	rcall	.+1260   	; 0x1dd0 <u8x8_utf8_init>
    18e4:	ff 24       	eor	r15, r15
    18e6:	02 c0       	rjmp	.+4      	; 0x18ec <u8g2_draw_string+0x2a>
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
    if ( e == 0x0ffff )
      break;
    str++;
    18e8:	0f 5f       	subi	r16, 0xFF	; 255
    18ea:	1f 4f       	sbci	r17, 0xFF	; 255
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
  sum = 0;
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
    18ec:	ea 81       	ldd	r30, Y+2	; 0x02
    18ee:	fb 81       	ldd	r31, Y+3	; 0x03
    18f0:	8b 2d       	mov	r24, r11
    18f2:	9c 2d       	mov	r25, r12
    18f4:	d8 01       	movw	r26, r16
    18f6:	6c 91       	ld	r22, X
    18f8:	09 95       	icall
    18fa:	9c 01       	movw	r18, r24
    if ( e == 0x0ffff )
    18fc:	bf ef       	ldi	r27, 0xFF	; 255
    18fe:	8f 3f       	cpi	r24, 0xFF	; 255
    1900:	9b 07       	cpc	r25, r27
    1902:	d9 f0       	breq	.+54     	; 0x193a <u8g2_draw_string+0x78>
      break;
    str++;
    if ( e != 0x0fffe )
    1904:	8f ef       	ldi	r24, 0xFF	; 255
    1906:	2e 3f       	cpi	r18, 0xFE	; 254
    1908:	38 07       	cpc	r19, r24
    190a:	71 f3       	breq	.-36     	; 0x18e8 <u8g2_draw_string+0x26>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
    190c:	ce 01       	movw	r24, r28
    190e:	6d 2d       	mov	r22, r13
    1910:	4e 2d       	mov	r20, r14
    1912:	99 df       	rcall	.-206    	; 0x1846 <u8g2_DrawGlyph>
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
    1914:	9e ad       	ldd	r25, Y+62	; 0x3e
    1916:	91 30       	cpi	r25, 0x01	; 1
    1918:	49 f0       	breq	.+18     	; 0x192c <u8g2_draw_string+0x6a>
    191a:	91 30       	cpi	r25, 0x01	; 1
    191c:	28 f0       	brcs	.+10     	; 0x1928 <u8g2_draw_string+0x66>
    191e:	92 30       	cpi	r25, 0x02	; 2
    1920:	39 f0       	breq	.+14     	; 0x1930 <u8g2_draw_string+0x6e>
    1922:	93 30       	cpi	r25, 0x03	; 3
    1924:	41 f4       	brne	.+16     	; 0x1936 <u8g2_draw_string+0x74>
    1926:	06 c0       	rjmp	.+12     	; 0x1934 <u8g2_draw_string+0x72>
      {
	case 0:
	  x += delta;
    1928:	d8 0e       	add	r13, r24
    192a:	05 c0       	rjmp	.+10     	; 0x1936 <u8g2_draw_string+0x74>
	  break;
	case 1:
	  y += delta;
    192c:	e8 0e       	add	r14, r24
    192e:	03 c0       	rjmp	.+6      	; 0x1936 <u8g2_draw_string+0x74>
	  break;
	case 2:
	  x -= delta;
    1930:	d8 1a       	sub	r13, r24
    1932:	01 c0       	rjmp	.+2      	; 0x1936 <u8g2_draw_string+0x74>
	  break;
	case 3:
	  y -= delta;
    1934:	e8 1a       	sub	r14, r24
      }
#else
      x += delta;
#endif

      sum += delta;    
    1936:	f8 0e       	add	r15, r24
    1938:	d7 cf       	rjmp	.-82     	; 0x18e8 <u8g2_draw_string+0x26>
    }
  }
  return sum;
}
    193a:	8f 2d       	mov	r24, r15
    193c:	df 91       	pop	r29
    193e:	cf 91       	pop	r28
    1940:	1f 91       	pop	r17
    1942:	0f 91       	pop	r16
    1944:	ff 90       	pop	r15
    1946:	ef 90       	pop	r14
    1948:	df 90       	pop	r13
    194a:	cf 90       	pop	r12
    194c:	bf 90       	pop	r11
    194e:	08 95       	ret

00001950 <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
    1950:	fc 01       	movw	r30, r24
  u8g2->u8x8.next_cb = u8x8_ascii_next;
    1952:	8b ee       	ldi	r24, 0xEB	; 235
    1954:	9e e0       	ldi	r25, 0x0E	; 14
    1956:	93 83       	std	Z+3, r25	; 0x03
    1958:	82 83       	std	Z+2, r24	; 0x02
  return u8g2_draw_string(u8g2, x, y, str);
    195a:	cf 01       	movw	r24, r30
}
    195c:	b2 cf       	rjmp	.-156    	; 0x18c2 <u8g2_draw_string>

0000195e <u8g2_clip_intersection>:

  optimized clipping: c is set to 0
*/
//static uint8_t u8g2_clip_intersection(u8g2_uint_t *ap, u8g2_uint_t *bp, u8g2_uint_t c, u8g2_uint_t d)
static uint8_t u8g2_clip_intersection(u8g2_uint_t *ap, u8g2_uint_t *bp, u8g2_uint_t d)
{
    195e:	dc 01       	movw	r26, r24
    1960:	fb 01       	movw	r30, r22
  u8g2_uint_t a = *ap;
    1962:	8c 91       	ld	r24, X
  u8g2_uint_t b = *bp;
    1964:	90 81       	ld	r25, Z
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
    1966:	98 17       	cp	r25, r24
    1968:	40 f4       	brcc	.+16     	; 0x197a <u8g2_clip_intersection+0x1c>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
    196a:	84 17       	cp	r24, r20
    196c:	20 f4       	brcc	.+8      	; 0x1976 <u8g2_clip_intersection+0x18>
    {
      b = d;
      b--;
    196e:	94 2f       	mov	r25, r20
    1970:	91 50       	subi	r25, 0x01	; 1
      *bp = b;
    1972:	90 83       	st	Z, r25
    1974:	04 c0       	rjmp	.+8      	; 0x197e <u8g2_clip_intersection+0x20>
    }
    else
    {
      a = 0;
      *ap = a;
    1976:	1c 92       	st	X, r1
    1978:	80 e0       	ldi	r24, 0x00	; 0
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
    197a:	84 17       	cp	r24, r20
    197c:	48 f4       	brcc	.+18     	; 0x1990 <u8g2_clip_intersection+0x32>
    return 0;
  if ( b <= 0 )		// was b <= c, could be replaced with b == 0
    197e:	99 23       	and	r25, r25
    1980:	39 f0       	breq	.+14     	; 0x1990 <u8g2_clip_intersection+0x32>
    return 0;
  //if ( a < c )		// never true with c == 0
  //  *ap = c;
  if ( b > d )
    1982:	49 17       	cp	r20, r25
    1984:	10 f0       	brcs	.+4      	; 0x198a <u8g2_clip_intersection+0x2c>
    1986:	81 e0       	ldi	r24, 0x01	; 1
    1988:	08 95       	ret
    *bp = d;
    198a:	40 83       	st	Z, r20
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	08 95       	ret
    1990:	80 e0       	ldi	r24, 0x00	; 0
    
  return 1;
}
    1992:	08 95       	ret

00001994 <u8g2_draw_hv_line_4dir>:

  This function will remove directions 2 and 3. Instead 0 and 1 are used.

*/
void u8g2_draw_hv_line_4dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    1994:	ef 92       	push	r14
    1996:	ff 92       	push	r15
    1998:	0f 93       	push	r16
    199a:	1f 93       	push	r17
    199c:	df 93       	push	r29
    199e:	cf 93       	push	r28
    19a0:	00 d0       	rcall	.+0      	; 0x19a2 <u8g2_draw_hv_line_4dir+0xe>
    19a2:	0f 92       	push	r0
    19a4:	cd b7       	in	r28, 0x3d	; 61
    19a6:	de b7       	in	r29, 0x3e	; 62
    19a8:	7c 01       	movw	r14, r24
#ifdef U8G2_WITH_HVLINE_COUNT
  u8g2->hv_cnt++;
#endif /* U8G2_WITH_HVLINE_COUNT */   

  /* transform to pixel buffer coordinates */
   y -= u8g2->tile_curr_row*8;
    19aa:	dc 01       	movw	r26, r24
    19ac:	92 96       	adiw	r26, 0x22	; 34
    19ae:	8c 91       	ld	r24, X
    19b0:	92 97       	sbiw	r26, 0x22	; 34
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	88 0f       	add	r24, r24
    19b6:	99 1f       	adc	r25, r25
    19b8:	88 0f       	add	r24, r24
    19ba:	99 1f       	adc	r25, r25
    19bc:	88 0f       	add	r24, r24
    19be:	99 1f       	adc	r25, r25
    19c0:	48 1b       	sub	r20, r24

  /* additional optimization for one pixel draw */
  /* requires about 60 bytes on the ATMega flash memory */
  /* 20% improvement for single pixel draw test in FPS.ino */
#ifdef U8G2_WITH_ONE_PIXEL_OPTIMIZATION
  if ( len == 1 )
    19c2:	21 30       	cpi	r18, 0x01	; 1
    19c4:	99 f4       	brne	.+38     	; 0x19ec <u8g2_draw_hv_line_4dir+0x58>
  {
    if ( x < u8g2->pixel_buf_width && y < u8g2->pixel_buf_height )
    19c6:	93 96       	adiw	r26, 0x23	; 35
    19c8:	8c 91       	ld	r24, X
    19ca:	93 97       	sbiw	r26, 0x23	; 35
    19cc:	68 17       	cp	r22, r24
    19ce:	08 f0       	brcs	.+2      	; 0x19d2 <u8g2_draw_hv_line_4dir+0x3e>
    19d0:	62 c0       	rjmp	.+196    	; 0x1a96 <u8g2_draw_hv_line_4dir+0x102>
    19d2:	94 96       	adiw	r26, 0x24	; 36
    19d4:	8c 91       	ld	r24, X
    19d6:	94 97       	sbiw	r26, 0x24	; 36
    19d8:	48 17       	cp	r20, r24
    19da:	08 f0       	brcs	.+2      	; 0x19de <u8g2_draw_hv_line_4dir+0x4a>
    19dc:	5c c0       	rjmp	.+184    	; 0x1a96 <u8g2_draw_hv_line_4dir+0x102>
      u8g2->ll_hvline(u8g2, x, y, len, dir);
    19de:	5b 96       	adiw	r26, 0x1b	; 27
    19e0:	ed 91       	ld	r30, X+
    19e2:	fc 91       	ld	r31, X
    19e4:	5c 97       	sbiw	r26, 0x1c	; 28
    19e6:	c7 01       	movw	r24, r14
    19e8:	09 95       	icall
    19ea:	55 c0       	rjmp	.+170    	; 0x1a96 <u8g2_draw_hv_line_4dir+0x102>
    return;
  }
#endif
  
  if ( dir == 2 )
    19ec:	02 30       	cpi	r16, 0x02	; 2
    19ee:	59 f4       	brne	.+22     	; 0x1a06 <u8g2_draw_hv_line_4dir+0x72>
  {
    x -= len;
    19f0:	86 2f       	mov	r24, r22
    19f2:	8f 5f       	subi	r24, 0xFF	; 255
    x++;
    19f4:	68 2f       	mov	r22, r24
    19f6:	62 1b       	sub	r22, r18
    y -= len;
    y++;
  }
  dir &= 1;  
#ifdef U8G2_WITH_CLIPPING
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
    19f8:	69 83       	std	Y+1, r22	; 0x01
    19fa:	4a 83       	std	Y+2, r20	; 0x02
static void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
  u8g2_uint_t a;
  register u8g2_uint_t w, h;

  h = u8g2->pixel_buf_height;		// this must be the real buffer height
    19fc:	f7 01       	movw	r30, r14
    19fe:	54 a1       	ldd	r21, Z+36	; 0x24
  w = u8g2->pixel_buf_width;		// this could be replaced by u8g2->u8x8.display_info->pixel_width
    1a00:	33 a1       	ldd	r19, Z+35	; 0x23
    1a02:	10 e0       	ldi	r17, 0x00	; 0
    1a04:	19 c0       	rjmp	.+50     	; 0x1a38 <u8g2_draw_hv_line_4dir+0xa4>
  if ( dir == 2 )
  {
    x -= len;
    x++;
  }
  else if ( dir == 3 )
    1a06:	03 30       	cpi	r16, 0x03	; 3
    1a08:	71 f4       	brne	.+28     	; 0x1a26 <u8g2_draw_hv_line_4dir+0x92>
  {
    y -= len;
    1a0a:	84 2f       	mov	r24, r20
    1a0c:	8f 5f       	subi	r24, 0xFF	; 255
    y++;
    1a0e:	48 2f       	mov	r20, r24
    1a10:	42 1b       	sub	r20, r18
  }
  dir &= 1;  
#ifdef U8G2_WITH_CLIPPING
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
    1a12:	69 83       	std	Y+1, r22	; 0x01
    1a14:	4a 83       	std	Y+2, r20	; 0x02
static void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
  u8g2_uint_t a;
  register u8g2_uint_t w, h;

  h = u8g2->pixel_buf_height;		// this must be the real buffer height
    1a16:	d7 01       	movw	r26, r14
    1a18:	94 96       	adiw	r26, 0x24	; 36
    1a1a:	5c 91       	ld	r21, X
    1a1c:	94 97       	sbiw	r26, 0x24	; 36
  w = u8g2->pixel_buf_width;		// this could be replaced by u8g2->u8x8.display_info->pixel_width
    1a1e:	93 96       	adiw	r26, 0x23	; 35
    1a20:	3c 91       	ld	r19, X
    1a22:	11 e0       	ldi	r17, 0x01	; 1
    1a24:	1c c0       	rjmp	.+56     	; 0x1a5e <u8g2_draw_hv_line_4dir+0xca>
    y -= len;
    y++;
  }
  dir &= 1;  
#ifdef U8G2_WITH_CLIPPING
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
    1a26:	69 83       	std	Y+1, r22	; 0x01
    1a28:	4a 83       	std	Y+2, r20	; 0x02
static void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
  u8g2_uint_t a;
  register u8g2_uint_t w, h;

  h = u8g2->pixel_buf_height;		// this must be the real buffer height
    1a2a:	f7 01       	movw	r30, r14
    1a2c:	54 a1       	ldd	r21, Z+36	; 0x24
  w = u8g2->pixel_buf_width;		// this could be replaced by u8g2->u8x8.display_info->pixel_width
    1a2e:	33 a1       	ldd	r19, Z+35	; 0x23


  if ( dir == 0 )
    1a30:	10 2f       	mov	r17, r16
    1a32:	11 70       	andi	r17, 0x01	; 1
    1a34:	00 fd       	sbrc	r16, 0
    1a36:	13 c0       	rjmp	.+38     	; 0x1a5e <u8g2_draw_hv_line_4dir+0xca>
  {
    if ( y >= h )
    1a38:	45 17       	cp	r20, r21
    1a3a:	68 f5       	brcc	.+90     	; 0x1a96 <u8g2_draw_hv_line_4dir+0x102>
      return;
    a = x;
    a += len;
    1a3c:	86 2f       	mov	r24, r22
    1a3e:	82 0f       	add	r24, r18
    1a40:	8b 83       	std	Y+3, r24	; 0x03
    if ( u8g2_clip_intersection(&x, &a, w) == 0 )
    1a42:	ce 01       	movw	r24, r28
    1a44:	01 96       	adiw	r24, 0x01	; 1
    1a46:	be 01       	movw	r22, r28
    1a48:	6d 5f       	subi	r22, 0xFD	; 253
    1a4a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a4c:	43 2f       	mov	r20, r19
    1a4e:	87 df       	rcall	.-242    	; 0x195e <u8g2_clip_intersection>
    1a50:	88 23       	and	r24, r24
    1a52:	09 f1       	breq	.+66     	; 0x1a96 <u8g2_draw_hv_line_4dir+0x102>
      return;
    len = a;
    1a54:	9b 81       	ldd	r25, Y+3	; 0x03
    len -= x;
    1a56:	89 81       	ldd	r24, Y+1	; 0x01
    1a58:	29 2f       	mov	r18, r25
    1a5a:	28 1b       	sub	r18, r24
    1a5c:	12 c0       	rjmp	.+36     	; 0x1a82 <u8g2_draw_hv_line_4dir+0xee>
  }
  else
  {
    if ( x >= w )
    1a5e:	63 17       	cp	r22, r19
    1a60:	d0 f4       	brcc	.+52     	; 0x1a96 <u8g2_draw_hv_line_4dir+0x102>
      return;
    a = y;
    a += len;
    1a62:	84 2f       	mov	r24, r20
    1a64:	82 0f       	add	r24, r18
    1a66:	8b 83       	std	Y+3, r24	; 0x03
    if ( u8g2_clip_intersection(&y, &a, h) == 0 )
    1a68:	ce 01       	movw	r24, r28
    1a6a:	02 96       	adiw	r24, 0x02	; 2
    1a6c:	be 01       	movw	r22, r28
    1a6e:	6d 5f       	subi	r22, 0xFD	; 253
    1a70:	7f 4f       	sbci	r23, 0xFF	; 255
    1a72:	45 2f       	mov	r20, r21
    1a74:	74 df       	rcall	.-280    	; 0x195e <u8g2_clip_intersection>
    1a76:	88 23       	and	r24, r24
    1a78:	71 f0       	breq	.+28     	; 0x1a96 <u8g2_draw_hv_line_4dir+0x102>
      return;
    len = a;
    1a7a:	9b 81       	ldd	r25, Y+3	; 0x03
    len -= y;
    1a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7e:	29 2f       	mov	r18, r25
    1a80:	28 1b       	sub	r18, r24
  }
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
    1a82:	d7 01       	movw	r26, r14
    1a84:	5b 96       	adiw	r26, 0x1b	; 27
    1a86:	ed 91       	ld	r30, X+
    1a88:	fc 91       	ld	r31, X
    1a8a:	5c 97       	sbiw	r26, 0x1c	; 28
    1a8c:	c7 01       	movw	r24, r14
    1a8e:	69 81       	ldd	r22, Y+1	; 0x01
    1a90:	4a 81       	ldd	r20, Y+2	; 0x02
    1a92:	01 2f       	mov	r16, r17
    1a94:	09 95       	icall
#ifdef U8G2_WITH_CLIPPING
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
#else
  u8g2->ll_hvline(u8g2, x, y, len, dir);
#endif
}
    1a96:	0f 90       	pop	r0
    1a98:	0f 90       	pop	r0
    1a9a:	0f 90       	pop	r0
    1a9c:	cf 91       	pop	r28
    1a9e:	df 91       	pop	r29
    1aa0:	1f 91       	pop	r17
    1aa2:	0f 91       	pop	r16
    1aa4:	ff 90       	pop	r15
    1aa6:	ef 90       	pop	r14
    1aa8:	08 95       	ret

00001aaa <u8g2_DrawHVLine>:
/*
  This is the toplevel function for the hv line draw procedures.
  This function should be called by the user.
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    1aaa:	0f 93       	push	r16
    1aac:	dc 01       	movw	r26, r24
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  if ( len != 0 )
    1aae:	22 23       	and	r18, r18
    1ab0:	41 f0       	breq	.+16     	; 0x1ac2 <u8g2_DrawHVLine+0x18>
    u8g2->cb->draw_l90(u8g2, x, y, len, dir);
    1ab2:	5d 96       	adiw	r26, 0x1d	; 29
    1ab4:	ed 91       	ld	r30, X+
    1ab6:	fc 91       	ld	r31, X
    1ab8:	5e 97       	sbiw	r26, 0x1e	; 30
    1aba:	02 80       	ldd	r0, Z+2	; 0x02
    1abc:	f3 81       	ldd	r31, Z+3	; 0x03
    1abe:	e0 2d       	mov	r30, r0
    1ac0:	09 95       	icall
}
    1ac2:	0f 91       	pop	r16
    1ac4:	08 95       	ret

00001ac6 <u8g2_DrawPixel>:
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
}

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
    1ac6:	0f 93       	push	r16
    1ac8:	fc 01       	movw	r30, r24
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
    1aca:	84 a5       	ldd	r24, Z+44	; 0x2c
    1acc:	48 17       	cp	r20, r24
    1ace:	68 f0       	brcs	.+26     	; 0x1aea <u8g2_DrawPixel+0x24>
    return;
  if ( y >= u8g2->user_y1 )
    1ad0:	85 a5       	ldd	r24, Z+45	; 0x2d
    1ad2:	48 17       	cp	r20, r24
    1ad4:	50 f4       	brcc	.+20     	; 0x1aea <u8g2_DrawPixel+0x24>
    return;
  if ( x < u8g2->user_x0 )
    1ad6:	82 a5       	ldd	r24, Z+42	; 0x2a
    1ad8:	68 17       	cp	r22, r24
    1ada:	38 f0       	brcs	.+14     	; 0x1aea <u8g2_DrawPixel+0x24>
    return;
  if ( x >= u8g2->user_x1 )
    1adc:	83 a5       	ldd	r24, Z+43	; 0x2b
    1ade:	68 17       	cp	r22, r24
    1ae0:	20 f4       	brcc	.+8      	; 0x1aea <u8g2_DrawPixel+0x24>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
    1ae2:	cf 01       	movw	r24, r30
    1ae4:	21 e0       	ldi	r18, 0x01	; 1
    1ae6:	00 e0       	ldi	r16, 0x00	; 0
    1ae8:	e0 df       	rcall	.-64     	; 0x1aaa <u8g2_DrawHVLine>
}
    1aea:	0f 91       	pop	r16
    1aec:	08 95       	ret

00001aee <u8g2_DrawVLine>:
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
}

void u8g2_DrawVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
    1aee:	ef 92       	push	r14
    1af0:	ff 92       	push	r15
    1af2:	0f 93       	push	r16
    1af4:	1f 93       	push	r17
    1af6:	cf 93       	push	r28
    1af8:	df 93       	push	r29
    1afa:	ec 01       	movw	r28, r24
    1afc:	16 2f       	mov	r17, r22
    1afe:	f4 2e       	mov	r15, r20
    1b00:	e2 2e       	mov	r14, r18
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
    1b02:	26 2f       	mov	r18, r22
    1b04:	2f 5f       	subi	r18, 0xFF	; 255
    1b06:	0e 2d       	mov	r16, r14
    1b08:	04 0f       	add	r16, r20
    1b0a:	40 d0       	rcall	.+128    	; 0x1b8c <u8g2_IsIntersection>
    1b0c:	88 23       	and	r24, r24
    1b0e:	31 f0       	breq	.+12     	; 0x1b1c <u8g2_DrawVLine+0x2e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
    1b10:	ce 01       	movw	r24, r28
    1b12:	61 2f       	mov	r22, r17
    1b14:	4f 2d       	mov	r20, r15
    1b16:	2e 2d       	mov	r18, r14
    1b18:	01 e0       	ldi	r16, 0x01	; 1
    1b1a:	c7 df       	rcall	.-114    	; 0x1aaa <u8g2_DrawHVLine>
}
    1b1c:	df 91       	pop	r29
    1b1e:	cf 91       	pop	r28
    1b20:	1f 91       	pop	r17
    1b22:	0f 91       	pop	r16
    1b24:	ff 90       	pop	r15
    1b26:	ef 90       	pop	r14
    1b28:	08 95       	ret

00001b2a <u8g2_DrawHLine>:
  if ( len != 0 )
    u8g2->cb->draw_l90(u8g2, x, y, len, dir);
}

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
    1b2a:	ef 92       	push	r14
    1b2c:	ff 92       	push	r15
    1b2e:	0f 93       	push	r16
    1b30:	1f 93       	push	r17
    1b32:	cf 93       	push	r28
    1b34:	df 93       	push	r29
    1b36:	ec 01       	movw	r28, r24
    1b38:	16 2f       	mov	r17, r22
    1b3a:	f4 2e       	mov	r15, r20
    1b3c:	e2 2e       	mov	r14, r18
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
    1b3e:	26 0f       	add	r18, r22
    1b40:	04 2f       	mov	r16, r20
    1b42:	0f 5f       	subi	r16, 0xFF	; 255
    1b44:	23 d0       	rcall	.+70     	; 0x1b8c <u8g2_IsIntersection>
    1b46:	88 23       	and	r24, r24
    1b48:	31 f0       	breq	.+12     	; 0x1b56 <u8g2_DrawHLine+0x2c>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
    1b4a:	ce 01       	movw	r24, r28
    1b4c:	61 2f       	mov	r22, r17
    1b4e:	4f 2d       	mov	r20, r15
    1b50:	2e 2d       	mov	r18, r14
    1b52:	00 e0       	ldi	r16, 0x00	; 0
    1b54:	aa df       	rcall	.-172    	; 0x1aaa <u8g2_DrawHVLine>
}
    1b56:	df 91       	pop	r29
    1b58:	cf 91       	pop	r28
    1b5a:	1f 91       	pop	r17
    1b5c:	0f 91       	pop	r16
    1b5e:	ff 90       	pop	r15
    1b60:	ef 90       	pop	r14
    1b62:	08 95       	ret

00001b64 <u8g2_is_intersection_decision_tree>:
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
  if ( v0 < a1 )		// v0 <= a1
    1b64:	46 17       	cp	r20, r22
    1b66:	48 f4       	brcc	.+18     	; 0x1b7a <u8g2_is_intersection_decision_tree+0x16>
  {
    if ( v1 > a0 )	// v1 >= a0
    1b68:	82 17       	cp	r24, r18
    1b6a:	10 f4       	brcc	.+4      	; 0x1b70 <u8g2_is_intersection_decision_tree+0xc>
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	08 95       	ret
    1b70:	80 e0       	ldi	r24, 0x00	; 0
    1b72:	24 17       	cp	r18, r20
    1b74:	50 f4       	brcc	.+20     	; 0x1b8a <u8g2_is_intersection_decision_tree+0x26>
    1b76:	81 e0       	ldi	r24, 0x01	; 1
    1b78:	08 95       	ret
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
    1b7a:	82 17       	cp	r24, r18
    1b7c:	10 f0       	brcs	.+4      	; 0x1b82 <u8g2_is_intersection_decision_tree+0x1e>
    1b7e:	80 e0       	ldi	r24, 0x00	; 0
    1b80:	08 95       	ret
    1b82:	80 e0       	ldi	r24, 0x00	; 0
    1b84:	24 17       	cp	r18, r20
    1b86:	08 f4       	brcc	.+2      	; 0x1b8a <u8g2_is_intersection_decision_tree+0x26>
    1b88:	81 e0       	ldi	r24, 0x01	; 1
    else
    {
      return 0;
    }
  }
}
    1b8a:	08 95       	ret

00001b8c <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
    1b8c:	ff 92       	push	r15
    1b8e:	0f 93       	push	r16
    1b90:	1f 93       	push	r17
    1b92:	cf 93       	push	r28
    1b94:	df 93       	push	r29
    1b96:	ec 01       	movw	r28, r24
    1b98:	f6 2e       	mov	r15, r22
    1b9a:	12 2f       	mov	r17, r18
    1b9c:	20 2f       	mov	r18, r16
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
    1b9e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1ba0:	6d a5       	ldd	r22, Y+45	; 0x2d
    1ba2:	e0 df       	rcall	.-64     	; 0x1b64 <u8g2_is_intersection_decision_tree>
    1ba4:	88 23       	and	r24, r24
    1ba6:	29 f0       	breq	.+10     	; 0x1bb2 <u8g2_IsIntersection+0x26>
    return 0; 
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
    1ba8:	8a a5       	ldd	r24, Y+42	; 0x2a
    1baa:	6b a5       	ldd	r22, Y+43	; 0x2b
    1bac:	4f 2d       	mov	r20, r15
    1bae:	21 2f       	mov	r18, r17
    1bb0:	d9 df       	rcall	.-78     	; 0x1b64 <u8g2_is_intersection_decision_tree>
}
    1bb2:	df 91       	pop	r29
    1bb4:	cf 91       	pop	r28
    1bb6:	1f 91       	pop	r17
    1bb8:	0f 91       	pop	r16
    1bba:	ff 90       	pop	r15
    1bbc:	08 95       	ret

00001bbe <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    1bbe:	ef 92       	push	r14
    1bc0:	ff 92       	push	r15
    1bc2:	0f 93       	push	r16
    1bc4:	1f 93       	push	r17
    1bc6:	cf 93       	push	r28
    1bc8:	df 93       	push	r29
    1bca:	7c 01       	movw	r14, r24
    1bcc:	16 2f       	mov	r17, r22
    1bce:	a2 2f       	mov	r26, r18
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
    1bd0:	64 2f       	mov	r22, r20
    1bd2:	67 70       	andi	r22, 0x07	; 7
  mask = 1;
  mask <<= bit_pos;
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	06 2e       	mov	r0, r22
    1bda:	01 c0       	rjmp	.+2      	; 0x1bde <u8g2_ll_hvline_vertical_top_lsb+0x20>
    1bdc:	88 0f       	add	r24, r24
    1bde:	0a 94       	dec	r0
    1be0:	ea f7       	brpl	.-6      	; 0x1bdc <u8g2_ll_hvline_vertical_top_lsb+0x1e>

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    1be2:	f7 01       	movw	r30, r14
    1be4:	e5 5a       	subi	r30, 0xA5	; 165
    1be6:	ff 4f       	sbci	r31, 0xFF	; 255
    1be8:	e0 81       	ld	r30, Z
    1bea:	e2 30       	cpi	r30, 0x02	; 2
    1bec:	10 f0       	brcs	.+4      	; 0x1bf2 <u8g2_ll_hvline_vertical_top_lsb+0x34>
    1bee:	70 e0       	ldi	r23, 0x00	; 0
    1bf0:	06 c0       	rjmp	.+12     	; 0x1bfe <u8g2_ll_hvline_vertical_top_lsb+0x40>
    or_mask  = mask;
  if ( u8g2->draw_color != 1 )
    1bf2:	e1 30       	cpi	r30, 0x01	; 1
    1bf4:	19 f4       	brne	.+6      	; 0x1bfc <u8g2_ll_hvline_vertical_top_lsb+0x3e>
    1bf6:	78 2f       	mov	r23, r24
    1bf8:	b0 e0       	ldi	r27, 0x00	; 0
    1bfa:	02 c0       	rjmp	.+4      	; 0x1c00 <u8g2_ll_hvline_vertical_top_lsb+0x42>
    1bfc:	78 2f       	mov	r23, r24
    1bfe:	b8 2f       	mov	r27, r24
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
    1c00:	24 2f       	mov	r18, r20
    1c02:	30 e0       	ldi	r19, 0x00	; 0
  offset &= ~7;
    1c04:	28 7f       	andi	r18, 0xF8	; 248
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
  ptr = u8g2->tile_buf_ptr;
    1c06:	e7 01       	movw	r28, r14
    1c08:	4f 8d       	ldd	r20, Y+31	; 0x1f
    1c0a:	58 a1       	ldd	r21, Y+32	; 0x20
  ptr += offset;
    1c0c:	e8 81       	ld	r30, Y
    1c0e:	f9 81       	ldd	r31, Y+1	; 0x01
    1c10:	80 89       	ldd	r24, Z+16	; 0x10
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	fc 01       	movw	r30, r24
    1c16:	2e 9f       	mul	r18, r30
    1c18:	c0 01       	movw	r24, r0
    1c1a:	2f 9f       	mul	r18, r31
    1c1c:	90 0d       	add	r25, r0
    1c1e:	3e 9f       	mul	r19, r30
    1c20:	90 0d       	add	r25, r0
    1c22:	11 24       	eor	r1, r1
    1c24:	48 0f       	add	r20, r24
    1c26:	59 1f       	adc	r21, r25
  ptr += x;
    1c28:	fa 01       	movw	r30, r20
    1c2a:	e1 0f       	add	r30, r17
    1c2c:	f1 1d       	adc	r31, r1
  
  if ( dir == 0 )
    1c2e:	00 23       	and	r16, r16
    1c30:	39 f4       	brne	.+14     	; 0x1c40 <u8g2_ll_hvline_vertical_top_lsb+0x82>
  {
      do
      {
	*ptr |= or_mask;
	*ptr ^= xor_mask;
    1c32:	80 81       	ld	r24, Z
    1c34:	87 2b       	or	r24, r23
    1c36:	8b 27       	eor	r24, r27
    1c38:	81 93       	st	Z+, r24
	ptr++;
	len--;
    1c3a:	a1 50       	subi	r26, 0x01	; 1
      } while( len != 0 );
    1c3c:	d1 f7       	brne	.-12     	; 0x1c32 <u8g2_ll_hvline_vertical_top_lsb+0x74>
    1c3e:	22 c0       	rjmp	.+68     	; 0x1c84 <u8g2_ll_hvline_vertical_top_lsb+0xc6>

      if ( bit_pos == 0 )
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
    1c40:	97 01       	movw	r18, r14
    1c42:	25 5a       	subi	r18, 0xA5	; 165
    1c44:	3f 4f       	sbci	r19, 0xFF	; 255
	  or_mask  = 1;
	if ( u8g2->draw_color != 1 )
    1c46:	91 e0       	ldi	r25, 0x01	; 1
  else
  {    
    do
    {
      *ptr |= or_mask;
      *ptr ^= xor_mask;
    1c48:	80 81       	ld	r24, Z
    1c4a:	87 2b       	or	r24, r23
    1c4c:	8b 27       	eor	r24, r27
    1c4e:	80 83       	st	Z, r24
      
      bit_pos++;
    1c50:	86 2f       	mov	r24, r22
    1c52:	8f 5f       	subi	r24, 0xFF	; 255
      bit_pos &= 7;
    1c54:	68 2f       	mov	r22, r24
    1c56:	67 70       	andi	r22, 0x07	; 7

      len--;
    1c58:	a1 50       	subi	r26, 0x01	; 1

      if ( bit_pos == 0 )
    1c5a:	66 23       	and	r22, r22
    1c5c:	79 f4       	brne	.+30     	; 0x1c7c <u8g2_ll_hvline_vertical_top_lsb+0xbe>
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
    1c5e:	e7 01       	movw	r28, r14
    1c60:	8b a1       	ldd	r24, Y+35	; 0x23
    1c62:	e8 0f       	add	r30, r24
    1c64:	f1 1d       	adc	r31, r1
		
	if ( u8g2->draw_color <= 1 )
    1c66:	e9 01       	movw	r28, r18
    1c68:	88 81       	ld	r24, Y
    1c6a:	82 30       	cpi	r24, 0x02	; 2
    1c6c:	28 f4       	brcc	.+10     	; 0x1c78 <u8g2_ll_hvline_vertical_top_lsb+0xba>
	  or_mask  = 1;
	if ( u8g2->draw_color != 1 )
    1c6e:	81 30       	cpi	r24, 0x01	; 1
    1c70:	11 f4       	brne	.+4      	; 0x1c76 <u8g2_ll_hvline_vertical_top_lsb+0xb8>
    1c72:	79 2f       	mov	r23, r25
    1c74:	05 c0       	rjmp	.+10     	; 0x1c80 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
    1c76:	79 2f       	mov	r23, r25
    1c78:	b9 2f       	mov	r27, r25
    1c7a:	02 c0       	rjmp	.+4      	; 0x1c80 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
	  xor_mask = 1;
      }
      else
      {
	or_mask <<= 1;
    1c7c:	77 0f       	add	r23, r23
	xor_mask <<= 1;
    1c7e:	bb 0f       	add	r27, r27
      }
    } while( len != 0 );
    1c80:	aa 23       	and	r26, r26
    1c82:	11 f7       	brne	.-60     	; 0x1c48 <u8g2_ll_hvline_vertical_top_lsb+0x8a>
  }
}
    1c84:	df 91       	pop	r29
    1c86:	cf 91       	pop	r28
    1c88:	1f 91       	pop	r17
    1c8a:	0f 91       	pop	r16
    1c8c:	ff 90       	pop	r15
    1c8e:	ef 90       	pop	r14
    1c90:	08 95       	ret

00001c92 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
    1c92:	dc 01       	movw	r26, r24
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
  t *= 8;
    1c94:	91 96       	adiw	r26, 0x21	; 33
    1c96:	8c 91       	ld	r24, X
    1c98:	91 97       	sbiw	r26, 0x21	; 33
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	88 0f       	add	r24, r24
    1c9e:	99 1f       	adc	r25, r25
    1ca0:	88 0f       	add	r24, r24
    1ca2:	99 1f       	adc	r25, r25
    1ca4:	88 0f       	add	r24, r24
    1ca6:	99 1f       	adc	r25, r25
  u8g2->pixel_buf_height = t;
    1ca8:	94 96       	adiw	r26, 0x24	; 36
    1caa:	8c 93       	st	X, r24
    1cac:	94 97       	sbiw	r26, 0x24	; 36
  
  t = u8g2_GetU8x8(u8g2)->display_info->tile_width;
    1cae:	ed 91       	ld	r30, X+
    1cb0:	fc 91       	ld	r31, X
    1cb2:	11 97       	sbiw	r26, 0x01	; 1
    1cb4:	80 89       	ldd	r24, Z+16	; 0x10
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
    1cb6:	80 32       	cpi	r24, 0x20	; 32
    1cb8:	08 f0       	brcs	.+2      	; 0x1cbc <u8g2_update_dimension_common+0x2a>
    1cba:	8f e1       	ldi	r24, 0x1F	; 31
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	88 0f       	add	r24, r24
    1cc0:	99 1f       	adc	r25, r25
    1cc2:	88 0f       	add	r24, r24
    1cc4:	99 1f       	adc	r25, r25
    1cc6:	88 0f       	add	r24, r24
    1cc8:	99 1f       	adc	r25, r25
  u8g2->pixel_buf_width = t;
    1cca:	93 96       	adiw	r26, 0x23	; 35
    1ccc:	8c 93       	st	X, r24
    1cce:	93 97       	sbiw	r26, 0x23	; 35
  
  t = u8g2->tile_curr_row;
  t *= 8;
    1cd0:	92 96       	adiw	r26, 0x22	; 34
    1cd2:	4c 91       	ld	r20, X
    1cd4:	92 97       	sbiw	r26, 0x22	; 34
    1cd6:	24 2f       	mov	r18, r20
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	c9 01       	movw	r24, r18
    1cdc:	88 0f       	add	r24, r24
    1cde:	99 1f       	adc	r25, r25
    1ce0:	88 0f       	add	r24, r24
    1ce2:	99 1f       	adc	r25, r25
    1ce4:	88 0f       	add	r24, r24
    1ce6:	99 1f       	adc	r25, r25
    1ce8:	78 2f       	mov	r23, r24
  u8g2->pixel_curr_row = t;
    1cea:	95 96       	adiw	r26, 0x25	; 37
    1cec:	8c 93       	st	X, r24
    1cee:	95 97       	sbiw	r26, 0x25	; 37
  
  t = u8g2->tile_buf_height;
    1cf0:	91 96       	adiw	r26, 0x21	; 33
    1cf2:	5c 91       	ld	r21, X
    1cf4:	91 97       	sbiw	r26, 0x21	; 33
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > u8g2_GetU8x8(u8g2)->display_info->tile_height )
    1cf6:	ed 91       	ld	r30, X+
    1cf8:	fc 91       	ld	r31, X
    1cfa:	11 97       	sbiw	r26, 0x01	; 1
    1cfc:	61 89       	ldd	r22, Z+17	; 0x11
    1cfe:	25 0f       	add	r18, r21
    1d00:	31 1d       	adc	r19, r1
    1d02:	86 2f       	mov	r24, r22
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	82 17       	cp	r24, r18
    1d08:	93 07       	cpc	r25, r19
    1d0a:	14 f4       	brge	.+4      	; 0x1d10 <u8g2_update_dimension_common+0x7e>
    t = u8g2_GetU8x8(u8g2)->display_info->tile_height - u8g2->tile_curr_row;
    1d0c:	56 2f       	mov	r21, r22
    1d0e:	54 1b       	sub	r21, r20
  t *= 8;
    1d10:	85 2f       	mov	r24, r21
    1d12:	88 0f       	add	r24, r24
    1d14:	88 0f       	add	r24, r24
    1d16:	88 0f       	add	r24, r24
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
    1d18:	96 96       	adiw	r26, 0x26	; 38
    1d1a:	7c 93       	st	X, r23
    1d1c:	96 97       	sbiw	r26, 0x26	; 38
  u8g2->buf_y1 = u8g2->buf_y0;
  u8g2->buf_y1 += t;
    1d1e:	87 0f       	add	r24, r23
    1d20:	97 96       	adiw	r26, 0x27	; 39
    1d22:	8c 93       	st	X, r24
    1d24:	97 97       	sbiw	r26, 0x27	; 39
  
#ifdef U8G2_16BIT
  u8g2->width = u8g2_GetU8x8(u8g2)->display_info->pixel_width;
  u8g2->height = u8g2_GetU8x8(u8g2)->display_info->pixel_height;
#else
  u8g2->width = 240;
    1d26:	80 ef       	ldi	r24, 0xF0	; 240
    1d28:	98 96       	adiw	r26, 0x28	; 40
    1d2a:	8c 93       	st	X, r24
    1d2c:	98 97       	sbiw	r26, 0x28	; 40
  if ( u8g2_GetU8x8(u8g2)->display_info->pixel_width <= 240 )
    1d2e:	ed 91       	ld	r30, X+
    1d30:	fc 91       	ld	r31, X
    1d32:	11 97       	sbiw	r26, 0x01	; 1
    1d34:	84 89       	ldd	r24, Z+20	; 0x14
    1d36:	95 89       	ldd	r25, Z+21	; 0x15
    1d38:	81 3f       	cpi	r24, 0xF1	; 241
    1d3a:	91 05       	cpc	r25, r1
    1d3c:	18 f4       	brcc	.+6      	; 0x1d44 <u8g2_update_dimension_common+0xb2>
    u8g2->width = u8g2_GetU8x8(u8g2)->display_info->pixel_width;
    1d3e:	98 96       	adiw	r26, 0x28	; 40
    1d40:	8c 93       	st	X, r24
    1d42:	98 97       	sbiw	r26, 0x28	; 40
  u8g2->height = u8g2_GetU8x8(u8g2)->display_info->pixel_height;
    1d44:	ed 91       	ld	r30, X+
    1d46:	fc 91       	ld	r31, X
    1d48:	11 97       	sbiw	r26, 0x01	; 1
    1d4a:	86 89       	ldd	r24, Z+22	; 0x16
    1d4c:	99 96       	adiw	r26, 0x29	; 41
    1d4e:	8c 93       	st	X, r24
#endif

}
    1d50:	08 95       	ret

00001d52 <u8g2_update_dimension_r0>:

void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
    1d52:	0f 93       	push	r16
    1d54:	1f 93       	push	r17
    1d56:	8c 01       	movw	r16, r24
  u8g2_update_dimension_common(u8g2);
    1d58:	9c df       	rcall	.-200    	; 0x1c92 <u8g2_update_dimension_common>

  u8g2->user_x0 = 0;
    1d5a:	f8 01       	movw	r30, r16
    1d5c:	12 a6       	std	Z+42, r1	; 0x2a
  u8g2->user_x1 = u8g2->pixel_buf_width;	/* pixel_buf_width replaced with width */
    1d5e:	83 a1       	ldd	r24, Z+35	; 0x23
    1d60:	83 a7       	std	Z+43, r24	; 0x2b
  
  u8g2->user_y0 = u8g2->buf_y0;
    1d62:	86 a1       	ldd	r24, Z+38	; 0x26
    1d64:	84 a7       	std	Z+44, r24	; 0x2c
  u8g2->user_y1 = u8g2->buf_y1;
    1d66:	87 a1       	ldd	r24, Z+39	; 0x27
    1d68:	85 a7       	std	Z+45, r24	; 0x2d
  
//  printf("x0=%d x1=%d y0=%d y1=%d\n", 
//      u8g2->user_x0, u8g2->user_x1, u8g2->user_y0, u8g2->user_y1);
}
    1d6a:	1f 91       	pop	r17
    1d6c:	0f 91       	pop	r16
    1d6e:	08 95       	ret

00001d70 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_4dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    1d70:	0f 93       	push	r16
  u8g2_draw_hv_line_4dir(u8g2, x, y, len, dir);
    1d72:	10 de       	rcall	.-992    	; 0x1994 <u8g2_draw_hv_line_4dir>
}
    1d74:	0f 91       	pop	r16
    1d76:	08 95       	ret

00001d78 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
    1d78:	ef 92       	push	r14
    1d7a:	ff 92       	push	r15
    1d7c:	0f 93       	push	r16
    1d7e:	1f 93       	push	r17
    1d80:	7c 01       	movw	r14, r24
    1d82:	d8 01       	movw	r26, r16
  u8g2->font = NULL;
    1d84:	fc 01       	movw	r30, r24
    1d86:	17 a6       	std	Z+47, r1	; 0x2f
    1d88:	16 a6       	std	Z+46, r1	; 0x2e
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
    1d8a:	34 8f       	std	Z+28, r19	; 0x1c
    1d8c:	23 8f       	std	Z+27, r18	; 0x1b
  
  u8g2->tile_buf_ptr = buf;
    1d8e:	70 a3       	std	Z+32, r23	; 0x20
    1d90:	67 8f       	std	Z+31, r22	; 0x1f
  u8g2->tile_buf_height = tile_buf_height;
    1d92:	41 a3       	std	Z+33, r20	; 0x21
  
  u8g2->tile_curr_row = 0;
    1d94:	12 a2       	std	Z+34, r1	; 0x22
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
    1d96:	13 ae       	std	Z+59, r1	; 0x3b
  u8g2->bitmap_transparency = 0;
    1d98:	e6 5a       	subi	r30, 0xA6	; 166
    1d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9c:	10 82       	st	Z, r1
  
  u8g2->draw_color = 1;
    1d9e:	fc 01       	movw	r30, r24
    1da0:	e5 5a       	subi	r30, 0xA5	; 165
    1da2:	ff 4f       	sbci	r31, 0xFF	; 255
    1da4:	81 e0       	ldi	r24, 0x01	; 1
    1da6:	80 83       	st	Z, r24
  u8g2->is_auto_page_clear = 1;
    1da8:	f7 01       	movw	r30, r14
    1daa:	e4 5a       	subi	r30, 0xA4	; 164
    1dac:	ff 4f       	sbci	r31, 0xFF	; 255
    1dae:	80 83       	st	Z, r24
  
  u8g2->cb = u8g2_cb;
    1db0:	f7 01       	movw	r30, r14
    1db2:	16 8f       	std	Z+30, r17	; 0x1e
    1db4:	05 8f       	std	Z+29, r16	; 0x1d
  u8g2->cb->update(u8g2);
    1db6:	ed 91       	ld	r30, X+
    1db8:	fc 91       	ld	r31, X
    1dba:	c7 01       	movw	r24, r14
    1dbc:	09 95       	icall

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
    1dbe:	c7 01       	movw	r24, r14
    1dc0:	17 dc       	rcall	.-2002   	; 0x15f0 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
    1dc2:	f7 01       	movw	r30, r14
    1dc4:	16 ae       	std	Z+62, r1	; 0x3e
#endif
}
    1dc6:	1f 91       	pop	r17
    1dc8:	0f 91       	pop	r16
    1dca:	ff 90       	pop	r15
    1dcc:	ef 90       	pop	r14
    1dce:	08 95       	ret

00001dd0 <u8x8_utf8_init>:
*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
    1dd0:	fc 01       	movw	r30, r24
    1dd2:	15 8a       	std	Z+21, r1	; 0x15
}
    1dd4:	08 95       	ret

00001dd6 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
    1dd6:	66 23       	and	r22, r22
    1dd8:	21 f0       	breq	.+8      	; 0x1de2 <u8x8_ascii_next+0xc>
    1dda:	6a 30       	cpi	r22, 0x0A	; 10
    1ddc:	11 f0       	breq	.+4      	; 0x1de2 <u8x8_ascii_next+0xc>
    return 0x0ffff;	/* end of string detected*/
  return b;
    1dde:	70 e0       	ldi	r23, 0x00	; 0
    1de0:	02 c0       	rjmp	.+4      	; 0x1de6 <u8x8_ascii_next+0x10>
    1de2:	6f ef       	ldi	r22, 0xFF	; 255
    1de4:	7f ef       	ldi	r23, 0xFF	; 255
}
    1de6:	86 2f       	mov	r24, r22
    1de8:	97 2f       	mov	r25, r23
    1dea:	08 95       	ret

00001dec <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
    1dec:	fc 01       	movw	r30, r24
    1dee:	76 2f       	mov	r23, r22
    1df0:	9a 01       	movw	r18, r20
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
    1df2:	a0 85       	ldd	r26, Z+8	; 0x08
    1df4:	b1 85       	ldd	r27, Z+9	; 0x09
    1df6:	67 e1       	ldi	r22, 0x17	; 23
    1df8:	47 2f       	mov	r20, r23
    1dfa:	fd 01       	movw	r30, r26
    1dfc:	09 95       	icall
}
    1dfe:	08 95       	ret

00001e00 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
    1e00:	df 93       	push	r29
    1e02:	cf 93       	push	r28
    1e04:	0f 92       	push	r0
    1e06:	cd b7       	in	r28, 0x3d	; 61
    1e08:	de b7       	in	r29, 0x3e	; 62
    1e0a:	69 83       	std	Y+1, r22	; 0x01
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
    1e0c:	61 e0       	ldi	r22, 0x01	; 1
    1e0e:	ae 01       	movw	r20, r28
    1e10:	4f 5f       	subi	r20, 0xFF	; 255
    1e12:	5f 4f       	sbci	r21, 0xFF	; 255
    1e14:	eb df       	rcall	.-42     	; 0x1dec <u8x8_byte_SendBytes>
}
    1e16:	0f 90       	pop	r0
    1e18:	cf 91       	pop	r28
    1e1a:	df 91       	pop	r29
    1e1c:	08 95       	ret

00001e1e <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
    1e1e:	fc 01       	movw	r30, r24
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
    1e20:	a0 85       	ldd	r26, Z+8	; 0x08
    1e22:	b1 85       	ldd	r27, Z+9	; 0x09
    1e24:	68 e1       	ldi	r22, 0x18	; 24
    1e26:	40 e0       	ldi	r20, 0x00	; 0
    1e28:	20 e0       	ldi	r18, 0x00	; 0
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	fd 01       	movw	r30, r26
    1e2e:	09 95       	icall
}
    1e30:	08 95       	ret

00001e32 <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
    1e32:	fc 01       	movw	r30, r24
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
    1e34:	a0 85       	ldd	r26, Z+8	; 0x08
    1e36:	b1 85       	ldd	r27, Z+9	; 0x09
    1e38:	69 e1       	ldi	r22, 0x19	; 25
    1e3a:	40 e0       	ldi	r20, 0x00	; 0
    1e3c:	20 e0       	ldi	r18, 0x00	; 0
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	fd 01       	movw	r30, r26
    1e42:	09 95       	icall
}
    1e44:	08 95       	ret

00001e46 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
    1e46:	fc 01       	movw	r30, r24
    1e48:	46 2f       	mov	r20, r22
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
    1e4a:	a6 81       	ldd	r26, Z+6	; 0x06
    1e4c:	b7 81       	ldd	r27, Z+7	; 0x07
    1e4e:	65 e1       	ldi	r22, 0x15	; 21
    1e50:	20 e0       	ldi	r18, 0x00	; 0
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	fd 01       	movw	r30, r26
    1e56:	09 95       	icall
}
    1e58:	08 95       	ret

00001e5a <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
    1e5a:	fc 01       	movw	r30, r24
    1e5c:	46 2f       	mov	r20, r22
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
    1e5e:	a6 81       	ldd	r26, Z+6	; 0x06
    1e60:	b7 81       	ldd	r27, Z+7	; 0x07
    1e62:	66 e1       	ldi	r22, 0x16	; 22
    1e64:	20 e0       	ldi	r18, 0x00	; 0
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	fd 01       	movw	r30, r26
    1e6a:	09 95       	icall
}
    1e6c:	08 95       	ret

00001e6e <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
    1e6e:	fc 01       	movw	r30, r24
    1e70:	76 2f       	mov	r23, r22
    1e72:	9a 01       	movw	r18, r20
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
    1e74:	a6 81       	ldd	r26, Z+6	; 0x06
    1e76:	b7 81       	ldd	r27, Z+7	; 0x07
    1e78:	67 e1       	ldi	r22, 0x17	; 23
    1e7a:	47 2f       	mov	r20, r23
    1e7c:	fd 01       	movw	r30, r26
    1e7e:	09 95       	icall
}
    1e80:	08 95       	ret

00001e82 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
    1e82:	fc 01       	movw	r30, r24
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
    1e84:	a6 81       	ldd	r26, Z+6	; 0x06
    1e86:	b7 81       	ldd	r27, Z+7	; 0x07
    1e88:	68 e1       	ldi	r22, 0x18	; 24
    1e8a:	40 e0       	ldi	r20, 0x00	; 0
    1e8c:	20 e0       	ldi	r18, 0x00	; 0
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	fd 01       	movw	r30, r26
    1e92:	09 95       	icall
}
    1e94:	08 95       	ret

00001e96 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
    1e96:	fc 01       	movw	r30, r24
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
    1e98:	a6 81       	ldd	r26, Z+6	; 0x06
    1e9a:	b7 81       	ldd	r27, Z+7	; 0x07
    1e9c:	69 e1       	ldi	r22, 0x19	; 25
    1e9e:	40 e0       	ldi	r20, 0x00	; 0
    1ea0:	20 e0       	ldi	r18, 0x00	; 0
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	fd 01       	movw	r30, r26
    1ea6:	09 95       	icall
}
    1ea8:	08 95       	ret

00001eaa <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
    1eaa:	df 92       	push	r13
    1eac:	ef 92       	push	r14
    1eae:	ff 92       	push	r15
    1eb0:	0f 93       	push	r16
    1eb2:	1f 93       	push	r17
    1eb4:	8c 01       	movw	r16, r24
    1eb6:	d6 2e       	mov	r13, r22
    1eb8:	7a 01       	movw	r14, r20
    u8x8_byte_StartTransfer(u8x8);    
    1eba:	b1 df       	rcall	.-158    	; 0x1e1e <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
    1ebc:	c8 01       	movw	r24, r16
    1ebe:	60 e4       	ldi	r22, 0x40	; 64
    1ec0:	9f df       	rcall	.-194    	; 0x1e00 <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
    1ec2:	d8 01       	movw	r26, r16
    1ec4:	18 96       	adiw	r26, 0x08	; 8
    1ec6:	ed 91       	ld	r30, X+
    1ec8:	fc 91       	ld	r31, X
    1eca:	19 97       	sbiw	r26, 0x09	; 9
    1ecc:	c8 01       	movw	r24, r16
    1ece:	67 e1       	ldi	r22, 0x17	; 23
    1ed0:	4d 2d       	mov	r20, r13
    1ed2:	97 01       	movw	r18, r14
    1ed4:	09 95       	icall
    u8x8_byte_EndTransfer(u8x8);
    1ed6:	c8 01       	movw	r24, r16
    1ed8:	ac df       	rcall	.-168    	; 0x1e32 <u8x8_byte_EndTransfer>
}
    1eda:	1f 91       	pop	r17
    1edc:	0f 91       	pop	r16
    1ede:	ff 90       	pop	r15
    1ee0:	ef 90       	pop	r14
    1ee2:	df 90       	pop	r13
    1ee4:	08 95       	ret

00001ee6 <u8x8_cad_ssd13xx_i2c>:

uint8_t u8x8_cad_ssd13xx_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    1ee6:	cf 92       	push	r12
    1ee8:	df 92       	push	r13
    1eea:	ef 92       	push	r14
    1eec:	ff 92       	push	r15
    1eee:	0f 93       	push	r16
    1ef0:	1f 93       	push	r17
    1ef2:	cf 93       	push	r28
    1ef4:	df 93       	push	r29
    1ef6:	7c 01       	movw	r14, r24
    1ef8:	04 2f       	mov	r16, r20
  uint8_t *p;
  switch(msg)
    1efa:	67 31       	cpi	r22, 0x17	; 23
    1efc:	28 f4       	brcc	.+10     	; 0x1f08 <u8x8_cad_ssd13xx_i2c+0x22>
    1efe:	65 31       	cpi	r22, 0x15	; 21
    1f00:	58 f4       	brcc	.+22     	; 0x1f18 <u8x8_cad_ssd13xx_i2c+0x32>
    1f02:	64 31       	cpi	r22, 0x14	; 20
    1f04:	39 f4       	brne	.+14     	; 0x1f14 <u8x8_cad_ssd13xx_i2c+0x2e>
    1f06:	43 c0       	rjmp	.+134    	; 0x1f8e <u8x8_cad_ssd13xx_i2c+0xa8>
    1f08:	67 31       	cpi	r22, 0x17	; 23
    1f0a:	89 f0       	breq	.+34     	; 0x1f2e <u8x8_cad_ssd13xx_i2c+0x48>
    1f0c:	6a 31       	cpi	r22, 0x1A	; 26
    1f0e:	10 f4       	brcc	.+4      	; 0x1f14 <u8x8_cad_ssd13xx_i2c+0x2e>
    1f10:	81 e0       	ldi	r24, 0x01	; 1
    1f12:	4f c0       	rjmp	.+158    	; 0x1fb2 <u8x8_cad_ssd13xx_i2c+0xcc>
    1f14:	80 e0       	ldi	r24, 0x00	; 0
    1f16:	4d c0       	rjmp	.+154    	; 0x1fb2 <u8x8_cad_ssd13xx_i2c+0xcc>
  {
    case U8X8_MSG_CAD_SEND_CMD:
    case U8X8_MSG_CAD_SEND_ARG:
      /* 7 Nov 2016: Can this be improved?  */
      //u8x8_byte_SetDC(u8x8, 0);
      u8x8_byte_StartTransfer(u8x8);
    1f18:	82 df       	rcall	.-252    	; 0x1e1e <u8x8_byte_StartTransfer>
      //u8x8_byte_SendByte(u8x8, u8x8_GetI2CAddress(u8x8));
      u8x8_byte_SendByte(u8x8, 0x000);
    1f1a:	c7 01       	movw	r24, r14
    1f1c:	60 e0       	ldi	r22, 0x00	; 0
    1f1e:	70 df       	rcall	.-288    	; 0x1e00 <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
    1f20:	c7 01       	movw	r24, r14
    1f22:	60 2f       	mov	r22, r16
    1f24:	6d df       	rcall	.-294    	; 0x1e00 <u8x8_byte_SendByte>
      u8x8_byte_EndTransfer(u8x8);      
    1f26:	c7 01       	movw	r24, r14
    1f28:	84 df       	rcall	.-248    	; 0x1e32 <u8x8_byte_EndTransfer>
    1f2a:	81 e0       	ldi	r24, 0x01	; 1
    1f2c:	42 c0       	rjmp	.+132    	; 0x1fb2 <u8x8_cad_ssd13xx_i2c+0xcc>
      /* smaller streams, 32 seems to be the limit... */
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
    1f2e:	69 01       	movw	r12, r18
       while( arg_int > 24 )
    1f30:	49 31       	cpi	r20, 0x19	; 25
    1f32:	38 f1       	brcs	.+78     	; 0x1f82 <u8x8_cad_ssd13xx_i2c+0x9c>
    1f34:	14 2f       	mov	r17, r20
    1f36:	e6 01       	movw	r28, r12
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
    1f38:	c7 01       	movw	r24, r14
    1f3a:	68 e1       	ldi	r22, 0x18	; 24
    1f3c:	ae 01       	movw	r20, r28
    1f3e:	b5 df       	rcall	.-150    	; 0x1eaa <u8x8_i2c_data_transfer>
	arg_int-=24;
    1f40:	18 51       	subi	r17, 0x18	; 24
	p+=24;
    1f42:	68 96       	adiw	r28, 0x18	; 24
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
       while( arg_int > 24 )
    1f44:	19 31       	cpi	r17, 0x19	; 25
    1f46:	c0 f7       	brcc	.-16     	; 0x1f38 <u8x8_cad_ssd13xx_i2c+0x52>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
    u8x8_byte_EndTransfer(u8x8);
}

uint8_t u8x8_cad_ssd13xx_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    1f48:	80 2f       	mov	r24, r16
    1f4a:	89 51       	subi	r24, 0x19	; 25
    1f4c:	68 e1       	ldi	r22, 0x18	; 24
    1f4e:	2e d3       	rcall	.+1628   	; 0x25ac <__udivmodqi4>
    1f50:	48 2f       	mov	r20, r24
    1f52:	50 e0       	ldi	r21, 0x00	; 0
    1f54:	4f 5f       	subi	r20, 0xFF	; 255
    1f56:	5f 4f       	sbci	r21, 0xFF	; 255
    1f58:	9a 01       	movw	r18, r20
    1f5a:	22 0f       	add	r18, r18
    1f5c:	33 1f       	adc	r19, r19
    1f5e:	24 0f       	add	r18, r20
    1f60:	35 1f       	adc	r19, r21
    1f62:	22 0f       	add	r18, r18
    1f64:	33 1f       	adc	r19, r19
    1f66:	22 0f       	add	r18, r18
    1f68:	33 1f       	adc	r19, r19
    1f6a:	22 0f       	add	r18, r18
    1f6c:	33 1f       	adc	r19, r19
    1f6e:	c2 0e       	add	r12, r18
    1f70:	d3 1e       	adc	r13, r19
    1f72:	20 2f       	mov	r18, r16
    1f74:	28 51       	subi	r18, 0x18	; 24
    1f76:	98 ee       	ldi	r25, 0xE8	; 232
    1f78:	89 9f       	mul	r24, r25
    1f7a:	80 2d       	mov	r24, r0
    1f7c:	11 24       	eor	r1, r1
    1f7e:	02 2f       	mov	r16, r18
    1f80:	08 0f       	add	r16, r24
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
	arg_int-=24;
	p+=24;
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
    1f82:	c7 01       	movw	r24, r14
    1f84:	60 2f       	mov	r22, r16
    1f86:	a6 01       	movw	r20, r12
    1f88:	90 df       	rcall	.-224    	; 0x1eaa <u8x8_i2c_data_transfer>
    1f8a:	81 e0       	ldi	r24, 0x01	; 1
    1f8c:	12 c0       	rjmp	.+36     	; 0x1fb2 <u8x8_cad_ssd13xx_i2c+0xcc>
      break;
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
    1f8e:	dc 01       	movw	r26, r24
    1f90:	52 96       	adiw	r26, 0x12	; 18
    1f92:	8c 91       	ld	r24, X
    1f94:	52 97       	sbiw	r26, 0x12	; 18
    1f96:	8f 3f       	cpi	r24, 0xFF	; 255
    1f98:	19 f4       	brne	.+6      	; 0x1fa0 <u8x8_cad_ssd13xx_i2c+0xba>
	u8x8->i2c_address = 0x078;
    1f9a:	88 e7       	ldi	r24, 0x78	; 120
    1f9c:	52 96       	adiw	r26, 0x12	; 18
    1f9e:	8c 93       	st	X, r24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    1fa0:	d7 01       	movw	r26, r14
    1fa2:	18 96       	adiw	r26, 0x08	; 8
    1fa4:	ed 91       	ld	r30, X+
    1fa6:	fc 91       	ld	r31, X
    1fa8:	19 97       	sbiw	r26, 0x09	; 9
    1faa:	c7 01       	movw	r24, r14
    1fac:	64 e1       	ldi	r22, 0x14	; 20
    1fae:	40 2f       	mov	r20, r16
    1fb0:	09 95       	icall
      break;
    default:
      return 0;
  }
  return 1;
}
    1fb2:	df 91       	pop	r29
    1fb4:	cf 91       	pop	r28
    1fb6:	1f 91       	pop	r17
    1fb8:	0f 91       	pop	r16
    1fba:	ff 90       	pop	r15
    1fbc:	ef 90       	pop	r14
    1fbe:	df 90       	pop	r13
    1fc0:	cf 90       	pop	r12
    1fc2:	08 95       	ret

00001fc4 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
    1fc4:	cf 92       	push	r12
    1fc6:	df 92       	push	r13
    1fc8:	ef 92       	push	r14
    1fca:	ff 92       	push	r15
    1fcc:	0f 93       	push	r16
    1fce:	1f 93       	push	r17
    1fd0:	df 93       	push	r29
    1fd2:	cf 93       	push	r28
    1fd4:	0f 92       	push	r0
    1fd6:	cd b7       	in	r28, 0x3d	; 61
    1fd8:	de b7       	in	r29, 0x3e	; 62
    1fda:	7c 01       	movw	r14, r24
    1fdc:	8b 01       	movw	r16, r22
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
	  data++;
	  break;
      case U8X8_MSG_CAD_SEND_DATA:
	  v = *data;
	  u8x8_cad_SendData(u8x8, 1, &v);
    1fde:	6e 01       	movw	r12, r28
    1fe0:	08 94       	sec
    1fe2:	c1 1c       	adc	r12, r1
    1fe4:	d1 1c       	adc	r13, r1
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
    1fe6:	d8 01       	movw	r26, r16
    1fe8:	6d 91       	ld	r22, X+
    1fea:	8d 01       	movw	r16, r26
    data++;
    switch( cmd )
    1fec:	67 31       	cpi	r22, 0x17	; 23
    1fee:	c1 f0       	breq	.+48     	; 0x2020 <u8x8_cad_SendSequence+0x5c>
    1ff0:	68 31       	cpi	r22, 0x18	; 24
    1ff2:	18 f4       	brcc	.+6      	; 0x1ffa <u8x8_cad_SendSequence+0x36>
    1ff4:	65 31       	cpi	r22, 0x15	; 21
    1ff6:	80 f1       	brcs	.+96     	; 0x2058 <u8x8_cad_SendSequence+0x94>
    1ff8:	05 c0       	rjmp	.+10     	; 0x2004 <u8x8_cad_SendSequence+0x40>
    1ffa:	6a 31       	cpi	r22, 0x1A	; 26
    1ffc:	d0 f0       	brcs	.+52     	; 0x2032 <u8x8_cad_SendSequence+0x6e>
    1ffe:	6e 3f       	cpi	r22, 0xFE	; 254
    2000:	59 f5       	brne	.+86     	; 0x2058 <u8x8_cad_SendSequence+0x94>
    2002:	22 c0       	rjmp	.+68     	; 0x2048 <u8x8_cad_SendSequence+0x84>
    {
      case U8X8_MSG_CAD_SEND_CMD:
      case U8X8_MSG_CAD_SEND_ARG:
	  v = *data;
    2004:	fd 01       	movw	r30, r26
    2006:	41 91       	ld	r20, Z+
    2008:	8f 01       	movw	r16, r30
    200a:	49 83       	std	Y+1, r20	; 0x01
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
    200c:	d7 01       	movw	r26, r14
    200e:	16 96       	adiw	r26, 0x06	; 6
    2010:	ed 91       	ld	r30, X+
    2012:	fc 91       	ld	r31, X
    2014:	17 97       	sbiw	r26, 0x07	; 7
    2016:	c7 01       	movw	r24, r14
    2018:	20 e0       	ldi	r18, 0x00	; 0
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	09 95       	icall
    201e:	e3 cf       	rjmp	.-58     	; 0x1fe6 <u8x8_cad_SendSequence+0x22>
	  data++;
	  break;
      case U8X8_MSG_CAD_SEND_DATA:
	  v = *data;
    2020:	fd 01       	movw	r30, r26
    2022:	81 91       	ld	r24, Z+
    2024:	8f 01       	movw	r16, r30
    2026:	89 83       	std	Y+1, r24	; 0x01
	  u8x8_cad_SendData(u8x8, 1, &v);
    2028:	c7 01       	movw	r24, r14
    202a:	61 e0       	ldi	r22, 0x01	; 1
    202c:	a6 01       	movw	r20, r12
    202e:	1f df       	rcall	.-450    	; 0x1e6e <u8x8_cad_SendData>
    2030:	da cf       	rjmp	.-76     	; 0x1fe6 <u8x8_cad_SendSequence+0x22>
	  data++;
	  break;
      case U8X8_MSG_CAD_START_TRANSFER:
      case U8X8_MSG_CAD_END_TRANSFER:
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
    2032:	d7 01       	movw	r26, r14
    2034:	16 96       	adiw	r26, 0x06	; 6
    2036:	ed 91       	ld	r30, X+
    2038:	fc 91       	ld	r31, X
    203a:	17 97       	sbiw	r26, 0x07	; 7
    203c:	c7 01       	movw	r24, r14
    203e:	40 e0       	ldi	r20, 0x00	; 0
    2040:	20 e0       	ldi	r18, 0x00	; 0
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	09 95       	icall
    2046:	cf cf       	rjmp	.-98     	; 0x1fe6 <u8x8_cad_SendSequence+0x22>
	  break;
      case 0x0fe:
	  v = *data;
    2048:	fd 01       	movw	r30, r26
    204a:	41 91       	ld	r20, Z+
    204c:	8f 01       	movw	r16, r30
    204e:	49 83       	std	Y+1, r20	; 0x01
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
    2050:	c7 01       	movw	r24, r14
    2052:	69 e2       	ldi	r22, 0x29	; 41
    2054:	1f d1       	rcall	.+574    	; 0x2294 <u8x8_gpio_call>
    2056:	c7 cf       	rjmp	.-114    	; 0x1fe6 <u8x8_cad_SendSequence+0x22>
	  break;
      default:
	return;
    }
  }
}
    2058:	0f 90       	pop	r0
    205a:	cf 91       	pop	r28
    205c:	df 91       	pop	r29
    205e:	1f 91       	pop	r17
    2060:	0f 91       	pop	r16
    2062:	ff 90       	pop	r15
    2064:	ef 90       	pop	r14
    2066:	df 90       	pop	r13
    2068:	cf 90       	pop	r12
    206a:	08 95       	ret

0000206c <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
    206c:	fc 01       	movw	r30, r24
    206e:	db 01       	movw	r26, r22
      /* 1) set display info struct */
      u8x8->display_info = display_info;
    2070:	71 83       	std	Z+1, r23	; 0x01
    2072:	60 83       	st	Z, r22
      u8x8->x_offset = u8x8->display_info->default_x_offset;
    2074:	52 96       	adiw	r26, 0x12	; 18
    2076:	8c 91       	ld	r24, X
    2078:	80 8b       	std	Z+16, r24	; 0x10
}
    207a:	08 95       	ret

0000207c <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
    207c:	0f 93       	push	r16
    207e:	1f 93       	push	r17
    2080:	df 93       	push	r29
    2082:	cf 93       	push	r28
    2084:	00 d0       	rcall	.+0      	; 0x2086 <u8x8_DrawTile+0xa>
    2086:	00 d0       	rcall	.+0      	; 0x2088 <u8x8_DrawTile+0xc>
    2088:	0f 92       	push	r0
    208a:	cd b7       	in	r28, 0x3d	; 61
    208c:	de b7       	in	r29, 0x3e	; 62
    208e:	dc 01       	movw	r26, r24
  u8x8_tile_t tile;
  tile.x_pos = x;
    2090:	6c 83       	std	Y+4, r22	; 0x04
  tile.y_pos = y;
    2092:	4d 83       	std	Y+5, r20	; 0x05
  tile.cnt = cnt;
    2094:	2b 83       	std	Y+3, r18	; 0x03
  tile.tile_ptr = tile_ptr;
    2096:	1a 83       	std	Y+2, r17	; 0x02
    2098:	09 83       	std	Y+1, r16	; 0x01
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
    209a:	14 96       	adiw	r26, 0x04	; 4
    209c:	ed 91       	ld	r30, X+
    209e:	fc 91       	ld	r31, X
    20a0:	15 97       	sbiw	r26, 0x05	; 5
    20a2:	6f e0       	ldi	r22, 0x0F	; 15
    20a4:	41 e0       	ldi	r20, 0x01	; 1
    20a6:	9e 01       	movw	r18, r28
    20a8:	2f 5f       	subi	r18, 0xFF	; 255
    20aa:	3f 4f       	sbci	r19, 0xFF	; 255
    20ac:	09 95       	icall
}
    20ae:	0f 90       	pop	r0
    20b0:	0f 90       	pop	r0
    20b2:	0f 90       	pop	r0
    20b4:	0f 90       	pop	r0
    20b6:	0f 90       	pop	r0
    20b8:	cf 91       	pop	r28
    20ba:	df 91       	pop	r29
    20bc:	1f 91       	pop	r17
    20be:	0f 91       	pop	r16
    20c0:	08 95       	ret

000020c2 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
    20c2:	fc 01       	movw	r30, r24
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
    20c4:	a4 81       	ldd	r26, Z+4	; 0x04
    20c6:	b5 81       	ldd	r27, Z+5	; 0x05
    20c8:	69 e0       	ldi	r22, 0x09	; 9
    20ca:	40 e0       	ldi	r20, 0x00	; 0
    20cc:	20 e0       	ldi	r18, 0x00	; 0
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	fd 01       	movw	r30, r26
    20d2:	09 95       	icall
}
    20d4:	08 95       	ret

000020d6 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
    20d6:	fc 01       	movw	r30, r24
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
    20d8:	a4 81       	ldd	r26, Z+4	; 0x04
    20da:	b5 81       	ldd	r27, Z+5	; 0x05
    20dc:	60 e1       	ldi	r22, 0x10	; 16
    20de:	40 e0       	ldi	r20, 0x00	; 0
    20e0:	20 e0       	ldi	r18, 0x00	; 0
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	fd 01       	movw	r30, r26
    20e6:	09 95       	icall
}
    20e8:	08 95       	ret

000020ea <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
    20ea:	0f 93       	push	r16
    20ec:	1f 93       	push	r17
    20ee:	8c 01       	movw	r16, r24
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
    20f0:	dc 01       	movw	r26, r24
    20f2:	1a 96       	adiw	r26, 0x0a	; 10
    20f4:	ed 91       	ld	r30, X+
    20f6:	fc 91       	ld	r31, X
    20f8:	1b 97       	sbiw	r26, 0x0b	; 11
    20fa:	68 e2       	ldi	r22, 0x28	; 40
    20fc:	40 e0       	ldi	r20, 0x00	; 0
    20fe:	20 e0       	ldi	r18, 0x00	; 0
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	09 95       	icall
      u8x8_cad_Init(u8x8);
    2104:	d8 01       	movw	r26, r16
    2106:	16 96       	adiw	r26, 0x06	; 6
    2108:	ed 91       	ld	r30, X+
    210a:	fc 91       	ld	r31, X
    210c:	17 97       	sbiw	r26, 0x07	; 7
    210e:	c8 01       	movw	r24, r16
    2110:	64 e1       	ldi	r22, 0x14	; 20
    2112:	40 e0       	ldi	r20, 0x00	; 0
    2114:	20 e0       	ldi	r18, 0x00	; 0
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	09 95       	icall

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
    211a:	c8 01       	movw	r24, r16
    211c:	6b e4       	ldi	r22, 0x4B	; 75
    211e:	41 e0       	ldi	r20, 0x01	; 1
    2120:	b9 d0       	rcall	.+370    	; 0x2294 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
    2122:	d8 01       	movw	r26, r16
    2124:	ed 91       	ld	r30, X+
    2126:	fc 91       	ld	r31, X
    2128:	c8 01       	movw	r24, r16
    212a:	69 e2       	ldi	r22, 0x29	; 41
    212c:	44 81       	ldd	r20, Z+4	; 0x04
    212e:	b2 d0       	rcall	.+356    	; 0x2294 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
    2130:	c8 01       	movw	r24, r16
    2132:	6b e4       	ldi	r22, 0x4B	; 75
    2134:	40 e0       	ldi	r20, 0x00	; 0
    2136:	ae d0       	rcall	.+348    	; 0x2294 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
    2138:	d8 01       	movw	r26, r16
    213a:	ed 91       	ld	r30, X+
    213c:	fc 91       	ld	r31, X
    213e:	c8 01       	movw	r24, r16
    2140:	69 e2       	ldi	r22, 0x29	; 41
    2142:	44 81       	ldd	r20, Z+4	; 0x04
    2144:	a7 d0       	rcall	.+334    	; 0x2294 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
    2146:	c8 01       	movw	r24, r16
    2148:	6b e4       	ldi	r22, 0x4B	; 75
    214a:	41 e0       	ldi	r20, 0x01	; 1
    214c:	a3 d0       	rcall	.+326    	; 0x2294 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
    214e:	d8 01       	movw	r26, r16
    2150:	ed 91       	ld	r30, X+
    2152:	fc 91       	ld	r31, X
    2154:	c8 01       	movw	r24, r16
    2156:	69 e2       	ldi	r22, 0x29	; 41
    2158:	45 81       	ldd	r20, Z+5	; 0x05
    215a:	9c d0       	rcall	.+312    	; 0x2294 <u8x8_gpio_call>
}    
    215c:	1f 91       	pop	r17
    215e:	0f 91       	pop	r16
    2160:	08 95       	ret

00002162 <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END()             			/* end of sequence */
};


static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    2162:	ef 92       	push	r14
    2164:	ff 92       	push	r15
    2166:	0f 93       	push	r16
    2168:	1f 93       	push	r17
    216a:	cf 93       	push	r28
    216c:	df 93       	push	r29
    216e:	ec 01       	movw	r28, r24
    2170:	04 2f       	mov	r16, r20
    2172:	12 2f       	mov	r17, r18
    2174:	f3 2e       	mov	r15, r19
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
    2176:	6d 30       	cpi	r22, 0x0D	; 13
    2178:	b9 f0       	breq	.+46     	; 0x21a8 <u8x8_d_ssd1306_sh1106_generic+0x46>
    217a:	6e 30       	cpi	r22, 0x0E	; 14
    217c:	18 f4       	brcc	.+6      	; 0x2184 <u8x8_d_ssd1306_sh1106_generic+0x22>
    217e:	6b 30       	cpi	r22, 0x0B	; 11
    2180:	29 f4       	brne	.+10     	; 0x218c <u8x8_d_ssd1306_sh1106_generic+0x2a>
    2182:	06 c0       	rjmp	.+12     	; 0x2190 <u8x8_d_ssd1306_sh1106_generic+0x2e>
    2184:	6e 30       	cpi	r22, 0x0E	; 14
    2186:	21 f1       	breq	.+72     	; 0x21d0 <u8x8_d_ssd1306_sh1106_generic+0x6e>
    2188:	6f 30       	cpi	r22, 0x0F	; 15
    218a:	69 f1       	breq	.+90     	; 0x21e6 <u8x8_d_ssd1306_sh1106_generic+0x84>
    218c:	80 e0       	ldi	r24, 0x00	; 0
    218e:	5a c0       	rjmp	.+180    	; 0x2244 <u8x8_d_ssd1306_sh1106_generic+0xe2>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
    2190:	44 23       	and	r20, r20
    2192:	29 f4       	brne	.+10     	; 0x219e <u8x8_d_ssd1306_sh1106_generic+0x3c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
    2194:	62 e2       	ldi	r22, 0x22	; 34
    2196:	71 e0       	ldi	r23, 0x01	; 1
    2198:	15 df       	rcall	.-470    	; 0x1fc4 <u8x8_cad_SendSequence>
    219a:	81 e0       	ldi	r24, 0x01	; 1
    219c:	53 c0       	rjmp	.+166    	; 0x2244 <u8x8_d_ssd1306_sh1106_generic+0xe2>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
    219e:	67 e2       	ldi	r22, 0x27	; 39
    21a0:	71 e0       	ldi	r23, 0x01	; 1
    21a2:	10 df       	rcall	.-480    	; 0x1fc4 <u8x8_cad_SendSequence>
    21a4:	81 e0       	ldi	r24, 0x01	; 1
    21a6:	4e c0       	rjmp	.+156    	; 0x2244 <u8x8_d_ssd1306_sh1106_generic+0xe2>
      break;
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
    21a8:	44 23       	and	r20, r20
    21aa:	49 f4       	brne	.+18     	; 0x21be <u8x8_d_ssd1306_sh1106_generic+0x5c>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
    21ac:	6c e2       	ldi	r22, 0x2C	; 44
    21ae:	71 e0       	ldi	r23, 0x01	; 1
    21b0:	09 df       	rcall	.-494    	; 0x1fc4 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
    21b2:	e8 81       	ld	r30, Y
    21b4:	f9 81       	ldd	r31, Y+1	; 0x01
    21b6:	82 89       	ldd	r24, Z+18	; 0x12
    21b8:	88 8b       	std	Y+16, r24	; 0x10
    21ba:	81 e0       	ldi	r24, 0x01	; 1
    21bc:	43 c0       	rjmp	.+134    	; 0x2244 <u8x8_d_ssd1306_sh1106_generic+0xe2>
      }
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
    21be:	63 e3       	ldi	r22, 0x33	; 51
    21c0:	71 e0       	ldi	r23, 0x01	; 1
    21c2:	00 df       	rcall	.-512    	; 0x1fc4 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
    21c4:	e8 81       	ld	r30, Y
    21c6:	f9 81       	ldd	r31, Y+1	; 0x01
    21c8:	83 89       	ldd	r24, Z+19	; 0x13
    21ca:	88 8b       	std	Y+16, r24	; 0x10
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	3a c0       	rjmp	.+116    	; 0x2244 <u8x8_d_ssd1306_sh1106_generic+0xe2>
      }
      break;
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
    21d0:	58 de       	rcall	.-848    	; 0x1e82 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
    21d2:	ce 01       	movw	r24, r28
    21d4:	61 e8       	ldi	r22, 0x81	; 129
    21d6:	37 de       	rcall	.-914    	; 0x1e46 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
    21d8:	ce 01       	movw	r24, r28
    21da:	60 2f       	mov	r22, r16
    21dc:	3e de       	rcall	.-900    	; 0x1e5a <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
    21de:	ce 01       	movw	r24, r28
    21e0:	5a de       	rcall	.-844    	; 0x1e96 <u8x8_cad_EndTransfer>
    21e2:	81 e0       	ldi	r24, 0x01	; 1
    21e4:	2f c0       	rjmp	.+94     	; 0x2244 <u8x8_d_ssd1306_sh1106_generic+0xe2>
      break;
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
    21e6:	4d de       	rcall	.-870    	; 0x1e82 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
    21e8:	81 2f       	mov	r24, r17
    21ea:	9f 2d       	mov	r25, r15
    21ec:	7c 01       	movw	r14, r24
      x *= 8;
    21ee:	f7 01       	movw	r30, r14
    21f0:	13 81       	ldd	r17, Z+3	; 0x03
    21f2:	11 0f       	add	r17, r17
    21f4:	11 0f       	add	r17, r17
    21f6:	11 0f       	add	r17, r17
      x += u8x8->x_offset;
    21f8:	88 89       	ldd	r24, Y+16	; 0x10
    21fa:	18 0f       	add	r17, r24
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
    21fc:	ce 01       	movw	r24, r28
    21fe:	60 e4       	ldi	r22, 0x40	; 64
    2200:	22 de       	rcall	.-956    	; 0x1e46 <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
    2202:	61 2f       	mov	r22, r17
    2204:	62 95       	swap	r22
    2206:	6f 70       	andi	r22, 0x0F	; 15
    2208:	60 61       	ori	r22, 0x10	; 16
    220a:	ce 01       	movw	r24, r28
    220c:	1c de       	rcall	.-968    	; 0x1e46 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
    220e:	1f 70       	andi	r17, 0x0F	; 15
    2210:	ce 01       	movw	r24, r28
    2212:	61 2f       	mov	r22, r17
    2214:	22 de       	rcall	.-956    	; 0x1e5a <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
    2216:	f7 01       	movw	r30, r14
    2218:	64 81       	ldd	r22, Z+4	; 0x04
    221a:	60 6b       	ori	r22, 0xB0	; 176
    221c:	ce 01       	movw	r24, r28
    221e:	1d de       	rcall	.-966    	; 0x1e5a <u8x8_cad_SendArg>
    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
    2220:	f7 01       	movw	r30, r14
    2222:	62 81       	ldd	r22, Z+2	; 0x02
    2224:	70 e0       	ldi	r23, 0x00	; 0
    2226:	66 0f       	add	r22, r22
    2228:	77 1f       	adc	r23, r23
    222a:	66 0f       	add	r22, r22
    222c:	77 1f       	adc	r23, r23
    222e:	66 0f       	add	r22, r22
    2230:	77 1f       	adc	r23, r23
    2232:	40 81       	ld	r20, Z
    2234:	51 81       	ldd	r21, Z+1	; 0x01
    2236:	ce 01       	movw	r24, r28
    2238:	1a de       	rcall	.-972    	; 0x1e6e <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
    223a:	01 50       	subi	r16, 0x01	; 1
      } while( arg_int > 0 );
    223c:	89 f7       	brne	.-30     	; 0x2220 <u8x8_d_ssd1306_sh1106_generic+0xbe>
      
      u8x8_cad_EndTransfer(u8x8);
    223e:	ce 01       	movw	r24, r28
    2240:	2a de       	rcall	.-940    	; 0x1e96 <u8x8_cad_EndTransfer>
    2242:	81 e0       	ldi	r24, 0x01	; 1
      break;
    default:
      return 0;
  }
  return 1;
}
    2244:	df 91       	pop	r29
    2246:	cf 91       	pop	r28
    2248:	1f 91       	pop	r17
    224a:	0f 91       	pop	r16
    224c:	ff 90       	pop	r15
    224e:	ef 90       	pop	r14
    2250:	08 95       	ret

00002252 <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    2252:	1f 93       	push	r17
    2254:	cf 93       	push	r28
    2256:	df 93       	push	r29
    2258:	ec 01       	movw	r28, r24
    225a:	16 2f       	mov	r17, r22
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
    225c:	82 df       	rcall	.-252    	; 0x2162 <u8x8_d_ssd1306_sh1106_generic>
    225e:	88 23       	and	r24, r24
    2260:	11 f0       	breq	.+4      	; 0x2266 <u8x8_d_ssd1306_128x64_noname+0x14>
    2262:	81 e0       	ldi	r24, 0x01	; 1
    2264:	13 c0       	rjmp	.+38     	; 0x228c <u8x8_d_ssd1306_128x64_noname+0x3a>
    return 1;
  
  switch(msg)
    2266:	19 30       	cpi	r17, 0x09	; 9
    2268:	61 f0       	breq	.+24     	; 0x2282 <u8x8_d_ssd1306_128x64_noname+0x30>
    226a:	1a 30       	cpi	r17, 0x0A	; 10
    226c:	11 f0       	breq	.+4      	; 0x2272 <u8x8_d_ssd1306_128x64_noname+0x20>
    226e:	80 e0       	ldi	r24, 0x00	; 0
    2270:	0d c0       	rjmp	.+26     	; 0x228c <u8x8_d_ssd1306_128x64_noname+0x3a>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
    2272:	ce 01       	movw	r24, r28
    2274:	3a df       	rcall	.-396    	; 0x20ea <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
    2276:	ce 01       	movw	r24, r28
    2278:	6a e3       	ldi	r22, 0x3A	; 58
    227a:	71 e0       	ldi	r23, 0x01	; 1
    227c:	a3 de       	rcall	.-698    	; 0x1fc4 <u8x8_cad_SendSequence>
    227e:	81 e0       	ldi	r24, 0x01	; 1
    2280:	05 c0       	rjmp	.+10     	; 0x228c <u8x8_d_ssd1306_128x64_noname+0x3a>
      break;
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
    2282:	ce 01       	movw	r24, r28
    2284:	6f e6       	ldi	r22, 0x6F	; 111
    2286:	71 e0       	ldi	r23, 0x01	; 1
    2288:	f1 de       	rcall	.-542    	; 0x206c <u8x8_d_helper_display_setup_memory>
    228a:	81 e0       	ldi	r24, 0x01	; 1
      break;
    default:
      return 0;
  }
  return 1;
}
    228c:	df 91       	pop	r29
    228e:	cf 91       	pop	r28
    2290:	1f 91       	pop	r17
    2292:	08 95       	ret

00002294 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
    2294:	fc 01       	movw	r30, r24
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
    2296:	a2 85       	ldd	r26, Z+10	; 0x0a
    2298:	b3 85       	ldd	r27, Z+11	; 0x0b
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	fd 01       	movw	r30, r26
    22a0:	09 95       	icall
}
    22a2:	08 95       	ret

000022a4 <u8x8_dummy_cb>:
/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
}
    22a4:	80 e0       	ldi	r24, 0x00	; 0
    22a6:	08 95       	ret

000022a8 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
    22a8:	fc 01       	movw	r30, r24
    u8x8->display_info = NULL;
    22aa:	11 82       	std	Z+1, r1	; 0x01
    22ac:	10 82       	st	Z, r1
    u8x8->display_cb = u8x8_dummy_cb;
    22ae:	82 e5       	ldi	r24, 0x52	; 82
    22b0:	91 e1       	ldi	r25, 0x11	; 17
    22b2:	95 83       	std	Z+5, r25	; 0x05
    22b4:	84 83       	std	Z+4, r24	; 0x04
    u8x8->cad_cb = u8x8_dummy_cb;
    22b6:	97 83       	std	Z+7, r25	; 0x07
    22b8:	86 83       	std	Z+6, r24	; 0x06
    u8x8->byte_cb = u8x8_dummy_cb;
    22ba:	91 87       	std	Z+9, r25	; 0x09
    22bc:	80 87       	std	Z+8, r24	; 0x08
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
    22be:	93 87       	std	Z+11, r25	; 0x0b
    22c0:	82 87       	std	Z+10, r24	; 0x0a
    u8x8->is_font_inverse_mode = 0;
    22c2:	11 8a       	std	Z+17, r1	; 0x11
    u8x8->device_address = 0;
    22c4:	14 8a       	std	Z+20, r1	; 0x14
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
    22c6:	15 8a       	std	Z+21, r1	; 0x15
    u8x8->i2c_address = 255;
    22c8:	8f ef       	ldi	r24, 0xFF	; 255
    22ca:	82 8b       	std	Z+18, r24	; 0x12
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
    22cc:	87 8b       	std	Z+23, r24	; 0x17
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
    22ce:	08 95       	ret

000022d0 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
    22d0:	8f 92       	push	r8
    22d2:	9f 92       	push	r9
    22d4:	af 92       	push	r10
    22d6:	bf 92       	push	r11
    22d8:	cf 92       	push	r12
    22da:	df 92       	push	r13
    22dc:	ef 92       	push	r14
    22de:	ff 92       	push	r15
    22e0:	0f 93       	push	r16
    22e2:	1f 93       	push	r17
    22e4:	7c 01       	movw	r14, r24
    22e6:	6b 01       	movw	r12, r22
    22e8:	5a 01       	movw	r10, r20
    22ea:	49 01       	movw	r8, r18
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
    22ec:	dd df       	rcall	.-70     	; 0x22a8 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
    22ee:	f7 01       	movw	r30, r14
    22f0:	d5 82       	std	Z+5, r13	; 0x05
    22f2:	c4 82       	std	Z+4, r12	; 0x04
  u8x8->cad_cb = cad_cb;
    22f4:	b7 82       	std	Z+7, r11	; 0x07
    22f6:	a6 82       	std	Z+6, r10	; 0x06
  u8x8->byte_cb = byte_cb;
    22f8:	91 86       	std	Z+9, r9	; 0x09
    22fa:	80 86       	std	Z+8, r8	; 0x08
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
    22fc:	13 87       	std	Z+11, r17	; 0x0b
    22fe:	02 87       	std	Z+10, r16	; 0x0a

  /* setup display info */
  u8x8_SetupMemory(u8x8);
    2300:	c7 01       	movw	r24, r14
    2302:	df de       	rcall	.-578    	; 0x20c2 <u8x8_SetupMemory>
}
    2304:	1f 91       	pop	r17
    2306:	0f 91       	pop	r16
    2308:	ff 90       	pop	r15
    230a:	ef 90       	pop	r14
    230c:	df 90       	pop	r13
    230e:	cf 90       	pop	r12
    2310:	bf 90       	pop	r11
    2312:	af 90       	pop	r10
    2314:	9f 90       	pop	r9
    2316:	8f 90       	pop	r8
    2318:	08 95       	ret

0000231a <__cmpsf2>:
    231a:	6c d0       	rcall	.+216    	; 0x23f4 <__fp_cmp>
    231c:	08 f4       	brcc	.+2      	; 0x2320 <__cmpsf2+0x6>
    231e:	81 e0       	ldi	r24, 0x01	; 1
    2320:	08 95       	ret

00002322 <__fixunssfsi>:
    2322:	94 d0       	rcall	.+296    	; 0x244c <__fp_splitA>
    2324:	88 f0       	brcs	.+34     	; 0x2348 <__fixunssfsi+0x26>
    2326:	9f 57       	subi	r25, 0x7F	; 127
    2328:	90 f0       	brcs	.+36     	; 0x234e <__fixunssfsi+0x2c>
    232a:	b9 2f       	mov	r27, r25
    232c:	99 27       	eor	r25, r25
    232e:	b7 51       	subi	r27, 0x17	; 23
    2330:	a0 f0       	brcs	.+40     	; 0x235a <__fixunssfsi+0x38>
    2332:	d1 f0       	breq	.+52     	; 0x2368 <__fixunssfsi+0x46>
    2334:	66 0f       	add	r22, r22
    2336:	77 1f       	adc	r23, r23
    2338:	88 1f       	adc	r24, r24
    233a:	99 1f       	adc	r25, r25
    233c:	1a f0       	brmi	.+6      	; 0x2344 <__fixunssfsi+0x22>
    233e:	ba 95       	dec	r27
    2340:	c9 f7       	brne	.-14     	; 0x2334 <__fixunssfsi+0x12>
    2342:	12 c0       	rjmp	.+36     	; 0x2368 <__fixunssfsi+0x46>
    2344:	b1 30       	cpi	r27, 0x01	; 1
    2346:	81 f0       	breq	.+32     	; 0x2368 <__fixunssfsi+0x46>
    2348:	9b d0       	rcall	.+310    	; 0x2480 <__fp_zero>
    234a:	b1 e0       	ldi	r27, 0x01	; 1
    234c:	08 95       	ret
    234e:	98 c0       	rjmp	.+304    	; 0x2480 <__fp_zero>
    2350:	67 2f       	mov	r22, r23
    2352:	78 2f       	mov	r23, r24
    2354:	88 27       	eor	r24, r24
    2356:	b8 5f       	subi	r27, 0xF8	; 248
    2358:	39 f0       	breq	.+14     	; 0x2368 <__fixunssfsi+0x46>
    235a:	b9 3f       	cpi	r27, 0xF9	; 249
    235c:	cc f3       	brlt	.-14     	; 0x2350 <__fixunssfsi+0x2e>
    235e:	86 95       	lsr	r24
    2360:	77 95       	ror	r23
    2362:	67 95       	ror	r22
    2364:	b3 95       	inc	r27
    2366:	d9 f7       	brne	.-10     	; 0x235e <__fixunssfsi+0x3c>
    2368:	3e f4       	brtc	.+14     	; 0x2378 <__fixunssfsi+0x56>
    236a:	90 95       	com	r25
    236c:	80 95       	com	r24
    236e:	70 95       	com	r23
    2370:	61 95       	neg	r22
    2372:	7f 4f       	sbci	r23, 0xFF	; 255
    2374:	8f 4f       	sbci	r24, 0xFF	; 255
    2376:	9f 4f       	sbci	r25, 0xFF	; 255
    2378:	08 95       	ret

0000237a <__floatunsisf>:
    237a:	e8 94       	clt
    237c:	09 c0       	rjmp	.+18     	; 0x2390 <__floatsisf+0x12>

0000237e <__floatsisf>:
    237e:	97 fb       	bst	r25, 7
    2380:	3e f4       	brtc	.+14     	; 0x2390 <__floatsisf+0x12>
    2382:	90 95       	com	r25
    2384:	80 95       	com	r24
    2386:	70 95       	com	r23
    2388:	61 95       	neg	r22
    238a:	7f 4f       	sbci	r23, 0xFF	; 255
    238c:	8f 4f       	sbci	r24, 0xFF	; 255
    238e:	9f 4f       	sbci	r25, 0xFF	; 255
    2390:	99 23       	and	r25, r25
    2392:	a9 f0       	breq	.+42     	; 0x23be <__floatsisf+0x40>
    2394:	f9 2f       	mov	r31, r25
    2396:	96 e9       	ldi	r25, 0x96	; 150
    2398:	bb 27       	eor	r27, r27
    239a:	93 95       	inc	r25
    239c:	f6 95       	lsr	r31
    239e:	87 95       	ror	r24
    23a0:	77 95       	ror	r23
    23a2:	67 95       	ror	r22
    23a4:	b7 95       	ror	r27
    23a6:	f1 11       	cpse	r31, r1
    23a8:	f8 cf       	rjmp	.-16     	; 0x239a <__floatsisf+0x1c>
    23aa:	fa f4       	brpl	.+62     	; 0x23ea <__floatsisf+0x6c>
    23ac:	bb 0f       	add	r27, r27
    23ae:	11 f4       	brne	.+4      	; 0x23b4 <__floatsisf+0x36>
    23b0:	60 ff       	sbrs	r22, 0
    23b2:	1b c0       	rjmp	.+54     	; 0x23ea <__floatsisf+0x6c>
    23b4:	6f 5f       	subi	r22, 0xFF	; 255
    23b6:	7f 4f       	sbci	r23, 0xFF	; 255
    23b8:	8f 4f       	sbci	r24, 0xFF	; 255
    23ba:	9f 4f       	sbci	r25, 0xFF	; 255
    23bc:	16 c0       	rjmp	.+44     	; 0x23ea <__floatsisf+0x6c>
    23be:	88 23       	and	r24, r24
    23c0:	11 f0       	breq	.+4      	; 0x23c6 <__floatsisf+0x48>
    23c2:	96 e9       	ldi	r25, 0x96	; 150
    23c4:	11 c0       	rjmp	.+34     	; 0x23e8 <__floatsisf+0x6a>
    23c6:	77 23       	and	r23, r23
    23c8:	21 f0       	breq	.+8      	; 0x23d2 <__floatsisf+0x54>
    23ca:	9e e8       	ldi	r25, 0x8E	; 142
    23cc:	87 2f       	mov	r24, r23
    23ce:	76 2f       	mov	r23, r22
    23d0:	05 c0       	rjmp	.+10     	; 0x23dc <__floatsisf+0x5e>
    23d2:	66 23       	and	r22, r22
    23d4:	71 f0       	breq	.+28     	; 0x23f2 <__floatsisf+0x74>
    23d6:	96 e8       	ldi	r25, 0x86	; 134
    23d8:	86 2f       	mov	r24, r22
    23da:	70 e0       	ldi	r23, 0x00	; 0
    23dc:	60 e0       	ldi	r22, 0x00	; 0
    23de:	2a f0       	brmi	.+10     	; 0x23ea <__floatsisf+0x6c>
    23e0:	9a 95       	dec	r25
    23e2:	66 0f       	add	r22, r22
    23e4:	77 1f       	adc	r23, r23
    23e6:	88 1f       	adc	r24, r24
    23e8:	da f7       	brpl	.-10     	; 0x23e0 <__floatsisf+0x62>
    23ea:	88 0f       	add	r24, r24
    23ec:	96 95       	lsr	r25
    23ee:	87 95       	ror	r24
    23f0:	97 f9       	bld	r25, 7
    23f2:	08 95       	ret

000023f4 <__fp_cmp>:
    23f4:	99 0f       	add	r25, r25
    23f6:	00 08       	sbc	r0, r0
    23f8:	55 0f       	add	r21, r21
    23fa:	aa 0b       	sbc	r26, r26
    23fc:	e0 e8       	ldi	r30, 0x80	; 128
    23fe:	fe ef       	ldi	r31, 0xFE	; 254
    2400:	16 16       	cp	r1, r22
    2402:	17 06       	cpc	r1, r23
    2404:	e8 07       	cpc	r30, r24
    2406:	f9 07       	cpc	r31, r25
    2408:	c0 f0       	brcs	.+48     	; 0x243a <__fp_cmp+0x46>
    240a:	12 16       	cp	r1, r18
    240c:	13 06       	cpc	r1, r19
    240e:	e4 07       	cpc	r30, r20
    2410:	f5 07       	cpc	r31, r21
    2412:	98 f0       	brcs	.+38     	; 0x243a <__fp_cmp+0x46>
    2414:	62 1b       	sub	r22, r18
    2416:	73 0b       	sbc	r23, r19
    2418:	84 0b       	sbc	r24, r20
    241a:	95 0b       	sbc	r25, r21
    241c:	39 f4       	brne	.+14     	; 0x242c <__fp_cmp+0x38>
    241e:	0a 26       	eor	r0, r26
    2420:	61 f0       	breq	.+24     	; 0x243a <__fp_cmp+0x46>
    2422:	23 2b       	or	r18, r19
    2424:	24 2b       	or	r18, r20
    2426:	25 2b       	or	r18, r21
    2428:	21 f4       	brne	.+8      	; 0x2432 <__fp_cmp+0x3e>
    242a:	08 95       	ret
    242c:	0a 26       	eor	r0, r26
    242e:	09 f4       	brne	.+2      	; 0x2432 <__fp_cmp+0x3e>
    2430:	a1 40       	sbci	r26, 0x01	; 1
    2432:	a6 95       	lsr	r26
    2434:	8f ef       	ldi	r24, 0xFF	; 255
    2436:	81 1d       	adc	r24, r1
    2438:	81 1d       	adc	r24, r1
    243a:	08 95       	ret

0000243c <__fp_split3>:
    243c:	57 fd       	sbrc	r21, 7
    243e:	90 58       	subi	r25, 0x80	; 128
    2440:	44 0f       	add	r20, r20
    2442:	55 1f       	adc	r21, r21
    2444:	59 f0       	breq	.+22     	; 0x245c <__fp_splitA+0x10>
    2446:	5f 3f       	cpi	r21, 0xFF	; 255
    2448:	71 f0       	breq	.+28     	; 0x2466 <__fp_splitA+0x1a>
    244a:	47 95       	ror	r20

0000244c <__fp_splitA>:
    244c:	88 0f       	add	r24, r24
    244e:	97 fb       	bst	r25, 7
    2450:	99 1f       	adc	r25, r25
    2452:	61 f0       	breq	.+24     	; 0x246c <__fp_splitA+0x20>
    2454:	9f 3f       	cpi	r25, 0xFF	; 255
    2456:	79 f0       	breq	.+30     	; 0x2476 <__fp_splitA+0x2a>
    2458:	87 95       	ror	r24
    245a:	08 95       	ret
    245c:	12 16       	cp	r1, r18
    245e:	13 06       	cpc	r1, r19
    2460:	14 06       	cpc	r1, r20
    2462:	55 1f       	adc	r21, r21
    2464:	f2 cf       	rjmp	.-28     	; 0x244a <__fp_split3+0xe>
    2466:	46 95       	lsr	r20
    2468:	f1 df       	rcall	.-30     	; 0x244c <__fp_splitA>
    246a:	08 c0       	rjmp	.+16     	; 0x247c <__fp_splitA+0x30>
    246c:	16 16       	cp	r1, r22
    246e:	17 06       	cpc	r1, r23
    2470:	18 06       	cpc	r1, r24
    2472:	99 1f       	adc	r25, r25
    2474:	f1 cf       	rjmp	.-30     	; 0x2458 <__fp_splitA+0xc>
    2476:	86 95       	lsr	r24
    2478:	71 05       	cpc	r23, r1
    247a:	61 05       	cpc	r22, r1
    247c:	08 94       	sec
    247e:	08 95       	ret

00002480 <__fp_zero>:
    2480:	e8 94       	clt

00002482 <__fp_szero>:
    2482:	bb 27       	eor	r27, r27
    2484:	66 27       	eor	r22, r22
    2486:	77 27       	eor	r23, r23
    2488:	cb 01       	movw	r24, r22
    248a:	97 f9       	bld	r25, 7
    248c:	08 95       	ret

0000248e <__gesf2>:
    248e:	b2 df       	rcall	.-156    	; 0x23f4 <__fp_cmp>
    2490:	08 f4       	brcc	.+2      	; 0x2494 <__gesf2+0x6>
    2492:	8f ef       	ldi	r24, 0xFF	; 255
    2494:	08 95       	ret

00002496 <__mulsf3>:
    2496:	0b d0       	rcall	.+22     	; 0x24ae <__mulsf3x>
    2498:	78 c0       	rjmp	.+240    	; 0x258a <__fp_round>
    249a:	69 d0       	rcall	.+210    	; 0x256e <__fp_pscA>
    249c:	28 f0       	brcs	.+10     	; 0x24a8 <__mulsf3+0x12>
    249e:	6e d0       	rcall	.+220    	; 0x257c <__fp_pscB>
    24a0:	18 f0       	brcs	.+6      	; 0x24a8 <__mulsf3+0x12>
    24a2:	95 23       	and	r25, r21
    24a4:	09 f0       	breq	.+2      	; 0x24a8 <__mulsf3+0x12>
    24a6:	5a c0       	rjmp	.+180    	; 0x255c <__fp_inf>
    24a8:	5f c0       	rjmp	.+190    	; 0x2568 <__fp_nan>
    24aa:	11 24       	eor	r1, r1
    24ac:	ea cf       	rjmp	.-44     	; 0x2482 <__fp_szero>

000024ae <__mulsf3x>:
    24ae:	c6 df       	rcall	.-116    	; 0x243c <__fp_split3>
    24b0:	a0 f3       	brcs	.-24     	; 0x249a <__mulsf3+0x4>

000024b2 <__mulsf3_pse>:
    24b2:	95 9f       	mul	r25, r21
    24b4:	d1 f3       	breq	.-12     	; 0x24aa <__mulsf3+0x14>
    24b6:	95 0f       	add	r25, r21
    24b8:	50 e0       	ldi	r21, 0x00	; 0
    24ba:	55 1f       	adc	r21, r21
    24bc:	62 9f       	mul	r22, r18
    24be:	f0 01       	movw	r30, r0
    24c0:	72 9f       	mul	r23, r18
    24c2:	bb 27       	eor	r27, r27
    24c4:	f0 0d       	add	r31, r0
    24c6:	b1 1d       	adc	r27, r1
    24c8:	63 9f       	mul	r22, r19
    24ca:	aa 27       	eor	r26, r26
    24cc:	f0 0d       	add	r31, r0
    24ce:	b1 1d       	adc	r27, r1
    24d0:	aa 1f       	adc	r26, r26
    24d2:	64 9f       	mul	r22, r20
    24d4:	66 27       	eor	r22, r22
    24d6:	b0 0d       	add	r27, r0
    24d8:	a1 1d       	adc	r26, r1
    24da:	66 1f       	adc	r22, r22
    24dc:	82 9f       	mul	r24, r18
    24de:	22 27       	eor	r18, r18
    24e0:	b0 0d       	add	r27, r0
    24e2:	a1 1d       	adc	r26, r1
    24e4:	62 1f       	adc	r22, r18
    24e6:	73 9f       	mul	r23, r19
    24e8:	b0 0d       	add	r27, r0
    24ea:	a1 1d       	adc	r26, r1
    24ec:	62 1f       	adc	r22, r18
    24ee:	83 9f       	mul	r24, r19
    24f0:	a0 0d       	add	r26, r0
    24f2:	61 1d       	adc	r22, r1
    24f4:	22 1f       	adc	r18, r18
    24f6:	74 9f       	mul	r23, r20
    24f8:	33 27       	eor	r19, r19
    24fa:	a0 0d       	add	r26, r0
    24fc:	61 1d       	adc	r22, r1
    24fe:	23 1f       	adc	r18, r19
    2500:	84 9f       	mul	r24, r20
    2502:	60 0d       	add	r22, r0
    2504:	21 1d       	adc	r18, r1
    2506:	82 2f       	mov	r24, r18
    2508:	76 2f       	mov	r23, r22
    250a:	6a 2f       	mov	r22, r26
    250c:	11 24       	eor	r1, r1
    250e:	9f 57       	subi	r25, 0x7F	; 127
    2510:	50 40       	sbci	r21, 0x00	; 0
    2512:	8a f0       	brmi	.+34     	; 0x2536 <__mulsf3_pse+0x84>
    2514:	e1 f0       	breq	.+56     	; 0x254e <__mulsf3_pse+0x9c>
    2516:	88 23       	and	r24, r24
    2518:	4a f0       	brmi	.+18     	; 0x252c <__mulsf3_pse+0x7a>
    251a:	ee 0f       	add	r30, r30
    251c:	ff 1f       	adc	r31, r31
    251e:	bb 1f       	adc	r27, r27
    2520:	66 1f       	adc	r22, r22
    2522:	77 1f       	adc	r23, r23
    2524:	88 1f       	adc	r24, r24
    2526:	91 50       	subi	r25, 0x01	; 1
    2528:	50 40       	sbci	r21, 0x00	; 0
    252a:	a9 f7       	brne	.-22     	; 0x2516 <__mulsf3_pse+0x64>
    252c:	9e 3f       	cpi	r25, 0xFE	; 254
    252e:	51 05       	cpc	r21, r1
    2530:	70 f0       	brcs	.+28     	; 0x254e <__mulsf3_pse+0x9c>
    2532:	14 c0       	rjmp	.+40     	; 0x255c <__fp_inf>
    2534:	a6 cf       	rjmp	.-180    	; 0x2482 <__fp_szero>
    2536:	5f 3f       	cpi	r21, 0xFF	; 255
    2538:	ec f3       	brlt	.-6      	; 0x2534 <__mulsf3_pse+0x82>
    253a:	98 3e       	cpi	r25, 0xE8	; 232
    253c:	dc f3       	brlt	.-10     	; 0x2534 <__mulsf3_pse+0x82>
    253e:	86 95       	lsr	r24
    2540:	77 95       	ror	r23
    2542:	67 95       	ror	r22
    2544:	b7 95       	ror	r27
    2546:	f7 95       	ror	r31
    2548:	e7 95       	ror	r30
    254a:	9f 5f       	subi	r25, 0xFF	; 255
    254c:	c1 f7       	brne	.-16     	; 0x253e <__mulsf3_pse+0x8c>
    254e:	fe 2b       	or	r31, r30
    2550:	88 0f       	add	r24, r24
    2552:	91 1d       	adc	r25, r1
    2554:	96 95       	lsr	r25
    2556:	87 95       	ror	r24
    2558:	97 f9       	bld	r25, 7
    255a:	08 95       	ret

0000255c <__fp_inf>:
    255c:	97 f9       	bld	r25, 7
    255e:	9f 67       	ori	r25, 0x7F	; 127
    2560:	80 e8       	ldi	r24, 0x80	; 128
    2562:	70 e0       	ldi	r23, 0x00	; 0
    2564:	60 e0       	ldi	r22, 0x00	; 0
    2566:	08 95       	ret

00002568 <__fp_nan>:
    2568:	9f ef       	ldi	r25, 0xFF	; 255
    256a:	80 ec       	ldi	r24, 0xC0	; 192
    256c:	08 95       	ret

0000256e <__fp_pscA>:
    256e:	00 24       	eor	r0, r0
    2570:	0a 94       	dec	r0
    2572:	16 16       	cp	r1, r22
    2574:	17 06       	cpc	r1, r23
    2576:	18 06       	cpc	r1, r24
    2578:	09 06       	cpc	r0, r25
    257a:	08 95       	ret

0000257c <__fp_pscB>:
    257c:	00 24       	eor	r0, r0
    257e:	0a 94       	dec	r0
    2580:	12 16       	cp	r1, r18
    2582:	13 06       	cpc	r1, r19
    2584:	14 06       	cpc	r1, r20
    2586:	05 06       	cpc	r0, r21
    2588:	08 95       	ret

0000258a <__fp_round>:
    258a:	09 2e       	mov	r0, r25
    258c:	03 94       	inc	r0
    258e:	00 0c       	add	r0, r0
    2590:	11 f4       	brne	.+4      	; 0x2596 <__fp_round+0xc>
    2592:	88 23       	and	r24, r24
    2594:	52 f0       	brmi	.+20     	; 0x25aa <__fp_round+0x20>
    2596:	bb 0f       	add	r27, r27
    2598:	40 f4       	brcc	.+16     	; 0x25aa <__fp_round+0x20>
    259a:	bf 2b       	or	r27, r31
    259c:	11 f4       	brne	.+4      	; 0x25a2 <__fp_round+0x18>
    259e:	60 ff       	sbrs	r22, 0
    25a0:	04 c0       	rjmp	.+8      	; 0x25aa <__fp_round+0x20>
    25a2:	6f 5f       	subi	r22, 0xFF	; 255
    25a4:	7f 4f       	sbci	r23, 0xFF	; 255
    25a6:	8f 4f       	sbci	r24, 0xFF	; 255
    25a8:	9f 4f       	sbci	r25, 0xFF	; 255
    25aa:	08 95       	ret

000025ac <__udivmodqi4>:
    25ac:	99 1b       	sub	r25, r25
    25ae:	79 e0       	ldi	r23, 0x09	; 9
    25b0:	04 c0       	rjmp	.+8      	; 0x25ba <__udivmodqi4_ep>

000025b2 <__udivmodqi4_loop>:
    25b2:	99 1f       	adc	r25, r25
    25b4:	96 17       	cp	r25, r22
    25b6:	08 f0       	brcs	.+2      	; 0x25ba <__udivmodqi4_ep>
    25b8:	96 1b       	sub	r25, r22

000025ba <__udivmodqi4_ep>:
    25ba:	88 1f       	adc	r24, r24
    25bc:	7a 95       	dec	r23
    25be:	c9 f7       	brne	.-14     	; 0x25b2 <__udivmodqi4_loop>
    25c0:	80 95       	com	r24
    25c2:	08 95       	ret

000025c4 <memset>:
    25c4:	dc 01       	movw	r26, r24
    25c6:	01 c0       	rjmp	.+2      	; 0x25ca <memset+0x6>
    25c8:	6d 93       	st	X+, r22
    25ca:	41 50       	subi	r20, 0x01	; 1
    25cc:	50 40       	sbci	r21, 0x00	; 0
    25ce:	e0 f7       	brcc	.-8      	; 0x25c8 <memset+0x4>
    25d0:	08 95       	ret

000025d2 <_exit>:
    25d2:	f8 94       	cli

000025d4 <__stop_program>:
    25d4:	ff cf       	rjmp	.-2      	; 0x25d4 <__stop_program>
